
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf98  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed0  0800c0a8  0800c0a8  0000d0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf78  0800cf78  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cf78  0800cf78  0000df78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf80  0800cf80  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf80  0800cf80  0000df80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf84  0800cf84  0000df84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cf88  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f3c  200001d8  0800d160  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002114  0800d160  0000f114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbcb  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000409a  00000000  00000000  0002adcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  0002ee68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001471  00000000  00000000  000307d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2ae  00000000  00000000  00031c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd49  00000000  00000000  0004def7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f27e  00000000  00000000  0006bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010aebe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082d0  00000000  00000000  0010af04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001131d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c090 	.word	0x0800c090

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800c090 	.word	0x0800c090

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__gesf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b30:	e006      	b.n	8000b40 <__cmpsf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__lesf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpsf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b56:	d011      	beq.n	8000b7c <__cmpsf2+0x40>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5e:	bf18      	it	ne
 8000b60:	ea90 0f01 	teqne	r0, r1
 8000b64:	bf58      	it	pl
 8000b66:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b6a:	bf88      	it	hi
 8000b6c:	17c8      	asrhi	r0, r1, #31
 8000b6e:	bf38      	it	cc
 8000b70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b74:	bf18      	it	ne
 8000b76:	f040 0001 	orrne.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b80:	d102      	bne.n	8000b88 <__cmpsf2+0x4c>
 8000b82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b86:	d105      	bne.n	8000b94 <__cmpsf2+0x58>
 8000b88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b8c:	d1e4      	bne.n	8000b58 <__cmpsf2+0x1c>
 8000b8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b92:	d0e1      	beq.n	8000b58 <__cmpsf2+0x1c>
 8000b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_cfrcmple>:
 8000b9c:	4684      	mov	ip, r0
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	4661      	mov	r1, ip
 8000ba2:	e7ff      	b.n	8000ba4 <__aeabi_cfcmpeq>

08000ba4 <__aeabi_cfcmpeq>:
 8000ba4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba6:	f7ff ffc9 	bl	8000b3c <__cmpsf2>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	bf48      	it	mi
 8000bae:	f110 0f00 	cmnmi.w	r0, #0
 8000bb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb4 <__aeabi_fcmpeq>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff fff4 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000bbc:	bf0c      	ite	eq
 8000bbe:	2001      	moveq	r0, #1
 8000bc0:	2000      	movne	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_fcmplt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffea 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_fcmple>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffe0 	bl	8000ba4 <__aeabi_cfcmpeq>
 8000be4:	bf94      	ite	ls
 8000be6:	2001      	movls	r0, #1
 8000be8:	2000      	movhi	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fcmpge>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffd2 	bl	8000b9c <__aeabi_cfrcmple>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmpgt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffc8 	bl	8000b9c <__aeabi_cfrcmple>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff fed5 	bl	80009d0 <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fc4b 	bl	80004ec <__aeabi_dmul>
 8000c56:	f7ff fef9 	bl	8000a4c <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fbcc 	bl	80003f8 <__aeabi_ui2d>
 8000c60:	2200      	movs	r2, #0
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c64:	f7ff fc42 	bl	80004ec <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fa84 	bl	800017c <__aeabi_dsub>
 8000c74:	f7ff feea 	bl	8000a4c <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <StateMachineTask>:

//---------------------------------------------------------------- Prototypes fonctions
void parse_data_STS(char *buffer, TrameDataSTS *data);

void StateMachineTask(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0c4      	sub	sp, #272	@ 0x110
 8000c88:	af00      	add	r7, sp, #0
    static bool bp_pressed = 0, bp3_pressed = 0, bp4_pressed = 0;



    //--------------------------- Vérification de l'appui sur BP3 pour revenir à l'étape précédente
    if (!HAL_GPIO_ReadPin(BP3_GPIO_Port, BP3_Pin) && state > 0 && !bp3_pressed)
 8000c8a:	2140      	movs	r1, #64	@ 0x40
 8000c8c:	48ba      	ldr	r0, [pc, #744]	@ (8000f78 <StateMachineTask+0x2f4>)
 8000c8e:	f002 fc51 	bl	8003534 <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d11a      	bne.n	8000cce <StateMachineTask+0x4a>
 8000c98:	4bb8      	ldr	r3, [pc, #736]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d016      	beq.n	8000cce <StateMachineTask+0x4a>
 8000ca0:	4bb7      	ldr	r3, [pc, #732]	@ (8000f80 <StateMachineTask+0x2fc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f083 0301 	eor.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00f      	beq.n	8000cce <StateMachineTask+0x4a>
        {
            // Si BP3 est pressé et qu'on n'est pas déjà revenu à l'étape précédente
            state--;  // On revient à l'étape précédente
 8000cae:	4bb3      	ldr	r3, [pc, #716]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4bb1      	ldr	r3, [pc, #708]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000cb8:	701a      	strb	r2, [r3, #0]
            action_done = 0;
 8000cba:	4bb2      	ldr	r3, [pc, #712]	@ (8000f84 <StateMachineTask+0x300>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
            bp3_pressed = 1;
 8000cc0:	4baf      	ldr	r3, [pc, #700]	@ (8000f80 <StateMachineTask+0x2fc>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
            osDelay(250);
 8000cc6:	20fa      	movs	r0, #250	@ 0xfa
 8000cc8:	f004 fe30 	bl	800592c <osDelay>
 8000ccc:	e002      	b.n	8000cd4 <StateMachineTask+0x50>
        }
    else
    {
    	bp3_pressed = 0;
 8000cce:	4bac      	ldr	r3, [pc, #688]	@ (8000f80 <StateMachineTask+0x2fc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
    }
    //--------------------------- Vérification de l'appui sur BP4 pour reset (étape 0)
    if (!HAL_GPIO_ReadPin(BP4_GPIO_Port, BP4_Pin) && !bp4_pressed)
 8000cd4:	2180      	movs	r1, #128	@ 0x80
 8000cd6:	48a8      	ldr	r0, [pc, #672]	@ (8000f78 <StateMachineTask+0x2f4>)
 8000cd8:	f002 fc2c 	bl	8003534 <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d113      	bne.n	8000d0a <StateMachineTask+0x86>
 8000ce2:	4ba9      	ldr	r3, [pc, #676]	@ (8000f88 <StateMachineTask+0x304>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f083 0301 	eor.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00c      	beq.n	8000d0a <StateMachineTask+0x86>
            {
                // Si BP3 est pressé et qu'on n'est pas déjà revenu à l'étape précédente
                state = 0;  // On revient à l'étape 0
 8000cf0:	4ba2      	ldr	r3, [pc, #648]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 8000cf6:	4ba3      	ldr	r3, [pc, #652]	@ (8000f84 <StateMachineTask+0x300>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
                bp4_pressed = 1;
 8000cfc:	4ba2      	ldr	r3, [pc, #648]	@ (8000f88 <StateMachineTask+0x304>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
                osDelay(250);
 8000d02:	20fa      	movs	r0, #250	@ 0xfa
 8000d04:	f004 fe12 	bl	800592c <osDelay>
 8000d08:	e002      	b.n	8000d10 <StateMachineTask+0x8c>
            }
    else
    {
    	bp4_pressed =  0;
 8000d0a:	4b9f      	ldr	r3, [pc, #636]	@ (8000f88 <StateMachineTask+0x304>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
    }


    //--------------------------- TRANSITIONS
    switch (state)
 8000d10:	4b9a      	ldr	r3, [pc, #616]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b0c      	cmp	r3, #12
 8000d16:	f200 830e 	bhi.w	8001336 <StateMachineTask+0x6b2>
 8000d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d20 <StateMachineTask+0x9c>)
 8000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d20:	08000d55 	.word	0x08000d55
 8000d24:	08000d89 	.word	0x08000d89
 8000d28:	08000ddf 	.word	0x08000ddf
 8000d2c:	08000ebf 	.word	0x08000ebf
 8000d30:	08000fd1 	.word	0x08000fd1
 8000d34:	08001091 	.word	0x08001091
 8000d38:	08001139 	.word	0x08001139
 8000d3c:	08000d55 	.word	0x08000d55
 8000d40:	08000d55 	.word	0x08000d55
 8000d44:	080011e7 	.word	0x080011e7
 8000d48:	0800125d 	.word	0x0800125d
 8000d4c:	08000d55 	.word	0x08000d55
 8000d50:	08000d55 	.word	0x08000d55
    case 0:
    case 7:
    case 8:
    case 11:
    case 12:
        if (!HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin))
 8000d54:	2120      	movs	r1, #32
 8000d56:	4888      	ldr	r0, [pc, #544]	@ (8000f78 <StateMachineTask+0x2f4>)
 8000d58:	f002 fbec 	bl	8003534 <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 82b5 	bne.w	80012ce <StateMachineTask+0x64a>
        {
        	if(state < 12){
 8000d64:	4b85      	ldr	r3, [pc, #532]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b0b      	cmp	r3, #11
 8000d6a:	d806      	bhi.n	8000d7a <StateMachineTask+0xf6>
        		state++;
 8000d6c:	4b83      	ldr	r3, [pc, #524]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b81      	ldr	r3, [pc, #516]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000d76:	701a      	strb	r2, [r3, #0]
 8000d78:	e002      	b.n	8000d80 <StateMachineTask+0xfc>
        	}
        	else{
        		state = 0;
 8000d7a:	4b80      	ldr	r3, [pc, #512]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
        	}

            action_done = 0;
 8000d80:	4b80      	ldr	r3, [pc, #512]	@ (8000f84 <StateMachineTask+0x300>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000d86:	e2a2      	b.n	80012ce <StateMachineTask+0x64a>
    case 1:
        Check_UART1_Timeout(); // Permer de vérifier si on a fini de recevoir le message et retoure message_complete1
 8000d88:	f001 fe22 	bl	80029d0 <Check_UART1_Timeout>

        if (message_complete1)
 8000d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8000f8c <StateMachineTask+0x308>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 829e 	beq.w	80012d2 <StateMachineTask+0x64e>
        {
            message_complete1 = 0;
 8000d96:	4b7d      	ldr	r3, [pc, #500]	@ (8000f8c <StateMachineTask+0x308>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]

            char expected[20];
            sprintf(expected, "PER = %s", per_value);
 8000d9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000da0:	4a7b      	ldr	r2, [pc, #492]	@ (8000f90 <StateMachineTask+0x30c>)
 8000da2:	497c      	ldr	r1, [pc, #496]	@ (8000f94 <StateMachineTask+0x310>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f007 fcf3 	bl	8008790 <siprintf>

            if (strstr((char *)rx_buffer1, expected) != NULL)
 8000daa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4879      	ldr	r0, [pc, #484]	@ (8000f98 <StateMachineTask+0x314>)
 8000db2:	f007 fe17 	bl	80089e4 <strstr>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00c      	beq.n	8000dd6 <StateMachineTask+0x152>
            {
                send_UART3("PER VALIDE --> Etape suivante\r\n");
 8000dbc:	4877      	ldr	r0, [pc, #476]	@ (8000f9c <StateMachineTask+0x318>)
 8000dbe:	f001 fd39 	bl	8002834 <send_UART3>
                // memset(rx_buffer1, 0, RX_BUFFER1_SIZE ); // On reset notre buffer par sécurité
                state++;
 8000dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b6c      	ldr	r3, [pc, #432]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000dcc:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 8000dce:	4b6d      	ldr	r3, [pc, #436]	@ (8000f84 <StateMachineTask+0x300>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
            else
            {
                send_UART3("Valeur differente. Entrez a nouveau le PER :\r\n");
            }
        }
        break;
 8000dd4:	e27d      	b.n	80012d2 <StateMachineTask+0x64e>
                send_UART3("Valeur differente. Entrez a nouveau le PER :\r\n");
 8000dd6:	4872      	ldr	r0, [pc, #456]	@ (8000fa0 <StateMachineTask+0x31c>)
 8000dd8:	f001 fd2c 	bl	8002834 <send_UART3>
        break;
 8000ddc:	e279      	b.n	80012d2 <StateMachineTask+0x64e>

    case 2: // Check STS
        Check_UART1_Timeout();
 8000dde:	f001 fdf7 	bl	80029d0 <Check_UART1_Timeout>
        if (message_complete1)
 8000de2:	4b6a      	ldr	r3, [pc, #424]	@ (8000f8c <StateMachineTask+0x308>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8275 	beq.w	80012d6 <StateMachineTask+0x652>
        {
            message_complete1 = 0;
 8000dec:	4b67      	ldr	r3, [pc, #412]	@ (8000f8c <StateMachineTask+0x308>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]

            TrameDataSTS data = {0};
 8000df2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000df6:	226c      	movs	r2, #108	@ 0x6c
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f007 fd5b 	bl	80088b6 <memset>
            parse_data_STS((char *)rx_buffer1, &data);
 8000e00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e04:	4619      	mov	r1, r3
 8000e06:	4864      	ldr	r0, [pc, #400]	@ (8000f98 <StateMachineTask+0x314>)
 8000e08:	f000 fdac 	bl	8001964 <parse_data_STS>

            bool acc_ok = false;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
            bool bat_ok = false;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

            send_UART3((char *)rx_buffer1); // On a besoin de traiter la trame dans le logiciel de test
 8000e18:	485f      	ldr	r0, [pc, #380]	@ (8000f98 <StateMachineTask+0x314>)
 8000e1a:	f001 fd0b 	bl	8002834 <send_UART3>

            // Vérification ACC
            if (data.acc >= 8.0 && data.acc <= 10.0)
 8000e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e22:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fee2 	bl	8000bf0 <__aeabi_fcmpge>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00c      	beq.n	8000e4c <StateMachineTask+0x1c8>
 8000e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e36:	495b      	ldr	r1, [pc, #364]	@ (8000fa4 <StateMachineTask+0x320>)
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fecf 	bl	8000bdc <__aeabi_fcmple>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <StateMachineTask+0x1c8>
            {
                //send_UART3("Accu OK\n"); // Utile pour test via terminal
                acc_ok = true;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000e4a:	e002      	b.n	8000e52 <StateMachineTask+0x1ce>
            }
            else
            {
                send_UART3("Accu NOK : Valeur hors plage !!\r\n");
 8000e4c:	4856      	ldr	r0, [pc, #344]	@ (8000fa8 <StateMachineTask+0x324>)
 8000e4e:	f001 fcf1 	bl	8002834 <send_UART3>
            }

            // Vérification BAT
            if (data.bat >= 11.0 && data.bat <= 14.0)
 8000e52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000e56:	4955      	ldr	r1, [pc, #340]	@ (8000fac <StateMachineTask+0x328>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fec9 	bl	8000bf0 <__aeabi_fcmpge>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00c      	beq.n	8000e7e <StateMachineTask+0x1fa>
 8000e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000e68:	4951      	ldr	r1, [pc, #324]	@ (8000fb0 <StateMachineTask+0x32c>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff feb6 	bl	8000bdc <__aeabi_fcmple>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <StateMachineTask+0x1fa>
            {
                //send_UART3("Tension batterie OK\r\n"); // Utile pour test via
                bat_ok = true;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8000e7c:	e002      	b.n	8000e84 <StateMachineTask+0x200>
            }
            else
            {
                send_UART3("Tension batterie NOK : Valeur hors plage !!\r\n");
 8000e7e:	484d      	ldr	r0, [pc, #308]	@ (8000fb4 <StateMachineTask+0x330>)
 8000e80:	f001 fcd8 	bl	8002834 <send_UART3>
            }

            // Transition si tout est bon
            if (acc_ok &&  bat_ok)
 8000e84:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d014      	beq.n	8000eb6 <StateMachineTask+0x232>
 8000e8c:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d010      	beq.n	8000eb6 <StateMachineTask+0x232>
            {
                send_UART3("STS OK --> Etape suivante\r\n");
 8000e94:	4848      	ldr	r0, [pc, #288]	@ (8000fb8 <StateMachineTask+0x334>)
 8000e96:	f001 fccd 	bl	8002834 <send_UART3>
                osDelay(500);
 8000e9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e9e:	f004 fd45 	bl	800592c <osDelay>
                action_done = 0;
 8000ea2:	4b38      	ldr	r3, [pc, #224]	@ (8000f84 <StateMachineTask+0x300>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
                state++;
 8000ea8:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000eb2:	701a      	strb	r2, [r3, #0]
            else
            {
                send_UART3("STS invalide. Corrigez les erreurs ci-dessus et recommencez le  test\r\n");
            }
        }
        break;
 8000eb4:	e20f      	b.n	80012d6 <StateMachineTask+0x652>
                send_UART3("STS invalide. Corrigez les erreurs ci-dessus et recommencez le  test\r\n");
 8000eb6:	4841      	ldr	r0, [pc, #260]	@ (8000fbc <StateMachineTask+0x338>)
 8000eb8:	f001 fcbc 	bl	8002834 <send_UART3>
        break;
 8000ebc:	e20b      	b.n	80012d6 <StateMachineTask+0x652>

    case 3: // DIPS OFF
        Check_UART1_Timeout();
 8000ebe:	f001 fd87 	bl	80029d0 <Check_UART1_Timeout>
        if (message_complete1)
 8000ec2:	4b32      	ldr	r3, [pc, #200]	@ (8000f8c <StateMachineTask+0x308>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8207 	beq.w	80012da <StateMachineTask+0x656>
        {
            message_complete1 = 0;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f8c <StateMachineTask+0x308>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]

            bool dips_ok = true;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d

            TrameDataSTS data = {0};
 8000ed8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000edc:	226c      	movs	r2, #108	@ 0x6c
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f007 fce8 	bl	80088b6 <memset>
            parse_data_STS((char *)rx_buffer1, &data);
 8000ee6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000eea:	4619      	mov	r1, r3
 8000eec:	482a      	ldr	r0, [pc, #168]	@ (8000f98 <StateMachineTask+0x314>)
 8000eee:	f000 fd39 	bl	8001964 <parse_data_STS>

            // Vérification DIP switches
            for (int i = 0; i < 8; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000ef8:	e01b      	b.n	8000f32 <StateMachineTask+0x2ae>
            {
                if (data.dips[i])
 8000efa:	f107 0292 	add.w	r2, r7, #146	@ 0x92
 8000efe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00e      	beq.n	8000f28 <StateMachineTask+0x2a4>
                {
                    dips_ok = false;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
                    char msg[50];
                    sprintf(msg, "ERROR: DIP %d a ON !\r\n", i + 1); // On affiche l'état des DIPs en défaut
 8000f10:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	463b      	mov	r3, r7
 8000f18:	4929      	ldr	r1, [pc, #164]	@ (8000fc0 <StateMachineTask+0x33c>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f007 fc38 	bl	8008790 <siprintf>
                    send_UART3(msg);
 8000f20:	463b      	mov	r3, r7
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fc86 	bl	8002834 <send_UART3>
            for (int i = 0; i < 8; i++)
 8000f28:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000f32:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000f36:	2b07      	cmp	r3, #7
 8000f38:	dddf      	ble.n	8000efa <StateMachineTask+0x276>
                }
            }

            if (dips_ok)
 8000f3a:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d013      	beq.n	8000f6a <StateMachineTask+0x2e6>
            {
                send_UART3("DIP a OFF --> OK\r\n");
 8000f42:	4820      	ldr	r0, [pc, #128]	@ (8000fc4 <StateMachineTask+0x340>)
 8000f44:	f001 fc76 	bl	8002834 <send_UART3>
                osDelay(500);
 8000f48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f4c:	f004 fcee 	bl	800592c <osDelay>
                state++;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <StateMachineTask+0x2f8>)
 8000f5a:	701a      	strb	r2, [r3, #0]
                bp_pressed = 0;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <StateMachineTask+0x344>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <StateMachineTask+0x300>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
            {
                send_UART3("DIP NOK : Tous les DIPs ne sont pas a OFF, mettez les a OFF et rappuyez sur le bouton\r\n");
                bp_pressed = 0;
            }
        }
        break;
 8000f68:	e1b7      	b.n	80012da <StateMachineTask+0x656>
                send_UART3("DIP NOK : Tous les DIPs ne sont pas a OFF, mettez les a OFF et rappuyez sur le bouton\r\n");
 8000f6a:	4818      	ldr	r0, [pc, #96]	@ (8000fcc <StateMachineTask+0x348>)
 8000f6c:	f001 fc62 	bl	8002834 <send_UART3>
                bp_pressed = 0;
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <StateMachineTask+0x344>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
        break;
 8000f76:	e1b0      	b.n	80012da <StateMachineTask+0x656>
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	200001f4 	.word	0x200001f4
 8000f80:	20000201 	.word	0x20000201
 8000f84:	20000202 	.word	0x20000202
 8000f88:	20000203 	.word	0x20000203
 8000f8c:	20000370 	.word	0x20000370
 8000f90:	200001f8 	.word	0x200001f8
 8000f94:	0800c0a8 	.word	0x0800c0a8
 8000f98:	20000374 	.word	0x20000374
 8000f9c:	0800c0b4 	.word	0x0800c0b4
 8000fa0:	0800c0d4 	.word	0x0800c0d4
 8000fa4:	41200000 	.word	0x41200000
 8000fa8:	0800c108 	.word	0x0800c108
 8000fac:	41300000 	.word	0x41300000
 8000fb0:	41600000 	.word	0x41600000
 8000fb4:	0800c12c 	.word	0x0800c12c
 8000fb8:	0800c15c 	.word	0x0800c15c
 8000fbc:	0800c178 	.word	0x0800c178
 8000fc0:	0800c1c0 	.word	0x0800c1c0
 8000fc4:	0800c1d8 	.word	0x0800c1d8
 8000fc8:	20000204 	.word	0x20000204
 8000fcc:	0800c1ec 	.word	0x0800c1ec

    case 4: // DIPS ON
        Check_UART1_Timeout();
 8000fd0:	f001 fcfe 	bl	80029d0 <Check_UART1_Timeout>
        if (message_complete1)
 8000fd4:	4bc4      	ldr	r3, [pc, #784]	@ (80012e8 <StateMachineTask+0x664>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 8180 	beq.w	80012de <StateMachineTask+0x65a>
        {
            message_complete1 = 0;
 8000fde:	4bc2      	ldr	r3, [pc, #776]	@ (80012e8 <StateMachineTask+0x664>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]

            bool dips_ok = true;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

            TrameDataSTS data = {0};
 8000fea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fee:	226c      	movs	r2, #108	@ 0x6c
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f007 fc5f 	bl	80088b6 <memset>
            parse_data_STS((char *)rx_buffer1, &data);
 8000ff8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	48bb      	ldr	r0, [pc, #748]	@ (80012ec <StateMachineTask+0x668>)
 8001000:	f000 fcb0 	bl	8001964 <parse_data_STS>

            // Vérification DIP switches
            for (int i = 0; i < 8; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800100a:	e01e      	b.n	800104a <StateMachineTask+0x3c6>
            {
                if (!data.dips[i])
 800100c:	f107 0292 	add.w	r2, r7, #146	@ 0x92
 8001010:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	f083 0301 	eor.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00e      	beq.n	8001040 <StateMachineTask+0x3bc>
                {
                    dips_ok = false;
 8001022:	2300      	movs	r3, #0
 8001024:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
                    char msg[50];
                    sprintf(msg, "ERROR: DIP %d a OFF !\r\n", i + 1); // On affiche l'état des DIPs en défaut
 8001028:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	463b      	mov	r3, r7
 8001030:	49af      	ldr	r1, [pc, #700]	@ (80012f0 <StateMachineTask+0x66c>)
 8001032:	4618      	mov	r0, r3
 8001034:	f007 fbac 	bl	8008790 <siprintf>
                    send_UART3(msg);
 8001038:	463b      	mov	r3, r7
 800103a:	4618      	mov	r0, r3
 800103c:	f001 fbfa 	bl	8002834 <send_UART3>
            for (int i = 0; i < 8; i++)
 8001040:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001044:	3301      	adds	r3, #1
 8001046:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800104a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800104e:	2b07      	cmp	r3, #7
 8001050:	dddc      	ble.n	800100c <StateMachineTask+0x388>
                }
            }

            if (dips_ok)
 8001052:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8001056:	2b00      	cmp	r3, #0
 8001058:	d013      	beq.n	8001082 <StateMachineTask+0x3fe>
            {
                send_UART3("DIP a ON --> OK\r\n");
 800105a:	48a6      	ldr	r0, [pc, #664]	@ (80012f4 <StateMachineTask+0x670>)
 800105c:	f001 fbea 	bl	8002834 <send_UART3>
                osDelay(500);
 8001060:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001064:	f004 fc62 	bl	800592c <osDelay>
                state++;
 8001068:	4ba3      	ldr	r3, [pc, #652]	@ (80012f8 <StateMachineTask+0x674>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4ba1      	ldr	r3, [pc, #644]	@ (80012f8 <StateMachineTask+0x674>)
 8001072:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 8001074:	4ba1      	ldr	r3, [pc, #644]	@ (80012fc <StateMachineTask+0x678>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
                bp_pressed = 0;
 800107a:	4ba1      	ldr	r3, [pc, #644]	@ (8001300 <StateMachineTask+0x67c>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
            {
                send_UART3("DIP NOK : Tous les DIPs ne sont pas a ON, mettez les a ON et rappuyez sur le bouton\r\n");
                bp_pressed = 0;
            }
        }
        break;
 8001080:	e12d      	b.n	80012de <StateMachineTask+0x65a>
                send_UART3("DIP NOK : Tous les DIPs ne sont pas a ON, mettez les a ON et rappuyez sur le bouton\r\n");
 8001082:	48a0      	ldr	r0, [pc, #640]	@ (8001304 <StateMachineTask+0x680>)
 8001084:	f001 fbd6 	bl	8002834 <send_UART3>
                bp_pressed = 0;
 8001088:	4b9d      	ldr	r3, [pc, #628]	@ (8001300 <StateMachineTask+0x67c>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
        break;
 800108e:	e126      	b.n	80012de <StateMachineTask+0x65a>

    case 5: // Entrées à OFF
        Check_UART1_Timeout();
 8001090:	f001 fc9e 	bl	80029d0 <Check_UART1_Timeout>
        if (message_complete1)
 8001094:	4b94      	ldr	r3, [pc, #592]	@ (80012e8 <StateMachineTask+0x664>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 8122 	beq.w	80012e2 <StateMachineTask+0x65e>
        {
            message_complete1 = 0;
 800109e:	4b92      	ldr	r3, [pc, #584]	@ (80012e8 <StateMachineTask+0x664>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
            bool inps_ok = true;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

            TrameDataSTS data = {0};
 80010aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010ae:	226c      	movs	r2, #108	@ 0x6c
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 fbff 	bl	80088b6 <memset>
            parse_data_STS((char *)rx_buffer1, &data);
 80010b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010bc:	4619      	mov	r1, r3
 80010be:	488b      	ldr	r0, [pc, #556]	@ (80012ec <StateMachineTask+0x668>)
 80010c0:	f000 fc50 	bl	8001964 <parse_data_STS>

            // Verification entrées
            for (int i = 0; i < 3; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80010ca:	e01b      	b.n	8001104 <StateMachineTask+0x480>
            {
                if (data.inps[i])
 80010cc:	f107 029a 	add.w	r2, r7, #154	@ 0x9a
 80010d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80010d4:	4413      	add	r3, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00e      	beq.n	80010fa <StateMachineTask+0x476>
                {
                    inps_ok = false;
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
                    char msg[50];
                    sprintf(msg, "ERROR: Entree %d a ON!\r\n", i + 1); // On affiche l'état des entrées
 80010e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	463b      	mov	r3, r7
 80010ea:	4987      	ldr	r1, [pc, #540]	@ (8001308 <StateMachineTask+0x684>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f007 fb4f 	bl	8008790 <siprintf>
                    send_UART3(msg);
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fb9d 	bl	8002834 <send_UART3>
            for (int i = 0; i < 3; i++)
 80010fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80010fe:	3301      	adds	r3, #1
 8001100:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001104:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001108:	2b02      	cmp	r3, #2
 800110a:	dddf      	ble.n	80010cc <StateMachineTask+0x448>
                }
            }

            if (inps_ok)
 800110c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80e6 	beq.w	80012e2 <StateMachineTask+0x65e>
            {
                send_UART3("Entrees a OFF --> OK\r\n");
 8001116:	487d      	ldr	r0, [pc, #500]	@ (800130c <StateMachineTask+0x688>)
 8001118:	f001 fb8c 	bl	8002834 <send_UART3>
                osDelay(500);
 800111c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001120:	f004 fc04 	bl	800592c <osDelay>
                state++;
 8001124:	4b74      	ldr	r3, [pc, #464]	@ (80012f8 <StateMachineTask+0x674>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b72      	ldr	r3, [pc, #456]	@ (80012f8 <StateMachineTask+0x674>)
 800112e:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 8001130:	4b72      	ldr	r3, [pc, #456]	@ (80012fc <StateMachineTask+0x678>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8001136:	e0d4      	b.n	80012e2 <StateMachineTask+0x65e>

    case 6: // Test entrées à ON
        Check_UART1_Timeout();
 8001138:	f001 fc4a 	bl	80029d0 <Check_UART1_Timeout>
        if (message_complete1)
 800113c:	4b6a      	ldr	r3, [pc, #424]	@ (80012e8 <StateMachineTask+0x664>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 80f3 	beq.w	800132c <StateMachineTask+0x6a8>
        {
            message_complete1 = 0;
 8001146:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <StateMachineTask+0x664>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]

            bool inps_ok = true;
 800114c:	2301      	movs	r3, #1
 800114e:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7

            TrameDataSTS data = {0};
 8001152:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001156:	226c      	movs	r2, #108	@ 0x6c
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f007 fbab 	bl	80088b6 <memset>
            parse_data_STS((char *)rx_buffer1, &data);
 8001160:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001164:	4619      	mov	r1, r3
 8001166:	4861      	ldr	r0, [pc, #388]	@ (80012ec <StateMachineTask+0x668>)
 8001168:	f000 fbfc 	bl	8001964 <parse_data_STS>

            // Verification entrées
            for (int i = 0; i < 3; i++)
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001172:	e01e      	b.n	80011b2 <StateMachineTask+0x52e>
            {
                if (!data.inps[i])
 8001174:	f107 029a 	add.w	r2, r7, #154	@ 0x9a
 8001178:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	f083 0301 	eor.w	r3, r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00e      	beq.n	80011a8 <StateMachineTask+0x524>
                {
                    inps_ok = false;
 800118a:	2300      	movs	r3, #0
 800118c:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                    char msg[50];
                    sprintf(msg, "ERROR: Entree %d a OFF!\r\n", i + 1); // On affiche l'état des entrées
 8001190:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	463b      	mov	r3, r7
 8001198:	495d      	ldr	r1, [pc, #372]	@ (8001310 <StateMachineTask+0x68c>)
 800119a:	4618      	mov	r0, r3
 800119c:	f007 faf8 	bl	8008790 <siprintf>
                    send_UART3(msg);
 80011a0:	463b      	mov	r3, r7
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fb46 	bl	8002834 <send_UART3>
            for (int i = 0; i < 3; i++)
 80011a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80011ac:	3301      	adds	r3, #1
 80011ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80011b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	dddc      	ble.n	8001174 <StateMachineTask+0x4f0>
                }
            }

            if (inps_ok)
 80011ba:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80b4 	beq.w	800132c <StateMachineTask+0x6a8>
            {
                send_UART3("Entrees a ON --> OK\r\n");
 80011c4:	4853      	ldr	r0, [pc, #332]	@ (8001314 <StateMachineTask+0x690>)
 80011c6:	f001 fb35 	bl	8002834 <send_UART3>
                osDelay(500);
 80011ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011ce:	f004 fbad 	bl	800592c <osDelay>
                state++;
 80011d2:	4b49      	ldr	r3, [pc, #292]	@ (80012f8 <StateMachineTask+0x674>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b47      	ldr	r3, [pc, #284]	@ (80012f8 <StateMachineTask+0x674>)
 80011dc:	701a      	strb	r2, [r3, #0]
                action_done = 0;
 80011de:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <StateMachineTask+0x678>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 80011e4:	e0a2      	b.n	800132c <StateMachineTask+0x6a8>

    case 9: // Cellule JOUR
    	if(!HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin)){
 80011e6:	2120      	movs	r1, #32
 80011e8:	484b      	ldr	r0, [pc, #300]	@ (8001318 <StateMachineTask+0x694>)
 80011ea:	f002 f9a3 	bl	8003534 <HAL_GPIO_ReadPin>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f040 809d 	bne.w	8001330 <StateMachineTask+0x6ac>
    	Check_UART1_Timeout();
 80011f6:	f001 fbeb 	bl	80029d0 <Check_UART1_Timeout>
    	        if (message_complete1)
 80011fa:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <StateMachineTask+0x664>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8096 	beq.w	8001330 <StateMachineTask+0x6ac>
    	        {
    	            message_complete1 = 0;
 8001204:	4b38      	ldr	r3, [pc, #224]	@ (80012e8 <StateMachineTask+0x664>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]

    	            TrameDataSTS data = {0};
 800120a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800120e:	226c      	movs	r2, #108	@ 0x6c
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fb4f 	bl	80088b6 <memset>
    	            parse_data_STS((char *)rx_buffer1, &data);
 8001218:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800121c:	4619      	mov	r1, r3
 800121e:	4833      	ldr	r0, [pc, #204]	@ (80012ec <StateMachineTask+0x668>)
 8001220:	f000 fba0 	bl	8001964 <parse_data_STS>

    	            if(data.cel_mode == 'J'){
 8001224:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001228:	2b4a      	cmp	r3, #74	@ 0x4a
 800122a:	d110      	bne.n	800124e <StateMachineTask+0x5ca>
    	            	send_UART3("Cellule JOUR --> OK\r\n");
 800122c:	483b      	ldr	r0, [pc, #236]	@ (800131c <StateMachineTask+0x698>)
 800122e:	f001 fb01 	bl	8002834 <send_UART3>
    	            	osDelay(500);
 8001232:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001236:	f004 fb79 	bl	800592c <osDelay>
    	            	state++;
 800123a:	4b2f      	ldr	r3, [pc, #188]	@ (80012f8 <StateMachineTask+0x674>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <StateMachineTask+0x674>)
 8001244:	701a      	strb	r2, [r3, #0]
    	            	action_done = 0;
 8001246:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <StateMachineTask+0x678>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    	            	send_UART3("Défaut cellule en NUIT, veuillez réessayer\r\n");
    	            	action_done = 0;
    	            }
    	        }
    	}
    	break;
 800124c:	e070      	b.n	8001330 <StateMachineTask+0x6ac>
    	            	send_UART3("Défaut cellule en NUIT, veuillez réessayer\r\n");
 800124e:	4834      	ldr	r0, [pc, #208]	@ (8001320 <StateMachineTask+0x69c>)
 8001250:	f001 faf0 	bl	8002834 <send_UART3>
    	            	action_done = 0;
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <StateMachineTask+0x678>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
    	break;
 800125a:	e069      	b.n	8001330 <StateMachineTask+0x6ac>

    case 10: //Cellule NUIT
    	if(!HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin)){
 800125c:	2120      	movs	r1, #32
 800125e:	482e      	ldr	r0, [pc, #184]	@ (8001318 <StateMachineTask+0x694>)
 8001260:	f002 f968 	bl	8003534 <HAL_GPIO_ReadPin>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d164      	bne.n	8001334 <StateMachineTask+0x6b0>
        	Check_UART1_Timeout();
 800126a:	f001 fbb1 	bl	80029d0 <Check_UART1_Timeout>
        	        if (message_complete1)
 800126e:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <StateMachineTask+0x664>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d05e      	beq.n	8001334 <StateMachineTask+0x6b0>
        	        {
        	            message_complete1 = 0;
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <StateMachineTask+0x664>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]

        	            TrameDataSTS data = {0};
 800127c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001280:	226c      	movs	r2, #108	@ 0x6c
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f007 fb16 	bl	80088b6 <memset>
        	            parse_data_STS((char *)rx_buffer1, &data);
 800128a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800128e:	4619      	mov	r1, r3
 8001290:	4816      	ldr	r0, [pc, #88]	@ (80012ec <StateMachineTask+0x668>)
 8001292:	f000 fb67 	bl	8001964 <parse_data_STS>

        	            if(data.cel_mode == 'N'){
 8001296:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800129a:	2b4e      	cmp	r3, #78	@ 0x4e
 800129c:	d110      	bne.n	80012c0 <StateMachineTask+0x63c>
        	            	send_UART3("Cellule NUIT --> OK\r\n");
 800129e:	4821      	ldr	r0, [pc, #132]	@ (8001324 <StateMachineTask+0x6a0>)
 80012a0:	f001 fac8 	bl	8002834 <send_UART3>
        	                osDelay(500);
 80012a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012a8:	f004 fb40 	bl	800592c <osDelay>
        	            	state++;
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <StateMachineTask+0x674>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <StateMachineTask+0x674>)
 80012b6:	701a      	strb	r2, [r3, #0]
        	            	action_done = 0;
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <StateMachineTask+0x678>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
        	            	send_UART3("Défaut cellule en JOUR, veuillez réessayer\r\n");
        	            	action_done = 0;
        	            }
        	        }
    	}
      break;
 80012be:	e039      	b.n	8001334 <StateMachineTask+0x6b0>
        	            	send_UART3("Défaut cellule en JOUR, veuillez réessayer\r\n");
 80012c0:	4819      	ldr	r0, [pc, #100]	@ (8001328 <StateMachineTask+0x6a4>)
 80012c2:	f001 fab7 	bl	8002834 <send_UART3>
        	            	action_done = 0;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <StateMachineTask+0x678>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
      break;
 80012cc:	e032      	b.n	8001334 <StateMachineTask+0x6b0>
        break;
 80012ce:	bf00      	nop
 80012d0:	e031      	b.n	8001336 <StateMachineTask+0x6b2>
        break;
 80012d2:	bf00      	nop
 80012d4:	e02f      	b.n	8001336 <StateMachineTask+0x6b2>
        break;
 80012d6:	bf00      	nop
 80012d8:	e02d      	b.n	8001336 <StateMachineTask+0x6b2>
        break;
 80012da:	bf00      	nop
 80012dc:	e02b      	b.n	8001336 <StateMachineTask+0x6b2>
        break;
 80012de:	bf00      	nop
 80012e0:	e029      	b.n	8001336 <StateMachineTask+0x6b2>
        break;
 80012e2:	bf00      	nop
 80012e4:	e027      	b.n	8001336 <StateMachineTask+0x6b2>
 80012e6:	bf00      	nop
 80012e8:	20000370 	.word	0x20000370
 80012ec:	20000374 	.word	0x20000374
 80012f0:	0800c244 	.word	0x0800c244
 80012f4:	0800c25c 	.word	0x0800c25c
 80012f8:	200001f4 	.word	0x200001f4
 80012fc:	20000202 	.word	0x20000202
 8001300:	20000204 	.word	0x20000204
 8001304:	0800c270 	.word	0x0800c270
 8001308:	0800c2c8 	.word	0x0800c2c8
 800130c:	0800c2e4 	.word	0x0800c2e4
 8001310:	0800c2fc 	.word	0x0800c2fc
 8001314:	0800c318 	.word	0x0800c318
 8001318:	40010800 	.word	0x40010800
 800131c:	0800c330 	.word	0x0800c330
 8001320:	0800c348 	.word	0x0800c348
 8001324:	0800c378 	.word	0x0800c378
 8001328:	0800c390 	.word	0x0800c390
        break;
 800132c:	bf00      	nop
 800132e:	e002      	b.n	8001336 <StateMachineTask+0x6b2>
    	break;
 8001330:	bf00      	nop
 8001332:	e000      	b.n	8001336 <StateMachineTask+0x6b2>
      break;
 8001334:	bf00      	nop
    }



    //--------------------------- ACTIONS
    switch (state)
 8001336:	4bc3      	ldr	r3, [pc, #780]	@ (8001644 <StateMachineTask+0x9c0>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b0c      	cmp	r3, #12
 800133c:	f200 82c9 	bhi.w	80018d2 <StateMachineTask+0xc4e>
 8001340:	a201      	add	r2, pc, #4	@ (adr r2, 8001348 <StateMachineTask+0x6c4>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	0800137d 	.word	0x0800137d
 800134c:	080013f3 	.word	0x080013f3
 8001350:	080014fd 	.word	0x080014fd
 8001354:	0800153d 	.word	0x0800153d
 8001358:	08001593 	.word	0x08001593
 800135c:	080015e9 	.word	0x080015e9
 8001360:	080016ad 	.word	0x080016ad
 8001364:	08001709 	.word	0x08001709
 8001368:	08001755 	.word	0x08001755
 800136c:	080017db 	.word	0x080017db
 8001370:	08001837 	.word	0x08001837
 8001374:	08001873 	.word	0x08001873
 8001378:	0800189d 	.word	0x0800189d
    {
    case 0:
    	if (!action_done)
 800137c:	4bb2      	ldr	r3, [pc, #712]	@ (8001648 <StateMachineTask+0x9c4>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f083 0301 	eor.w	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 82a5 	beq.w	80018d6 <StateMachineTask+0xc52>
    	{
    		//On met bien les I/0 par défaut
    	HAL_GPIO_WritePin(RELAIS_ALIM_418_GPIO_Port, RELAIS_ALIM_418_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001392:	48ae      	ldr	r0, [pc, #696]	@ (800164c <StateMachineTask+0x9c8>)
 8001394:	f002 f8e5 	bl	8003562 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 8001398:	2201      	movs	r2, #1
 800139a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800139e:	48ab      	ldr	r0, [pc, #684]	@ (800164c <StateMachineTask+0x9c8>)
 80013a0:	f002 f8df 	bl	8003562 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013aa:	48a9      	ldr	r0, [pc, #676]	@ (8001650 <StateMachineTask+0x9cc>)
 80013ac:	f002 f8d9 	bl	8003562 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2108      	movs	r1, #8
 80013b4:	48a5      	ldr	r0, [pc, #660]	@ (800164c <StateMachineTask+0x9c8>)
 80013b6:	f002 f8d4 	bl	8003562 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2120      	movs	r1, #32
 80013be:	48a3      	ldr	r0, [pc, #652]	@ (800164c <StateMachineTask+0x9c8>)
 80013c0:	f002 f8cf 	bl	8003562 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2140      	movs	r1, #64	@ 0x40
 80013c8:	48a0      	ldr	r0, [pc, #640]	@ (800164c <StateMachineTask+0x9c8>)
 80013ca:	f002 f8ca 	bl	8003562 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2180      	movs	r1, #128	@ 0x80
 80013d2:	489e      	ldr	r0, [pc, #632]	@ (800164c <StateMachineTask+0x9c8>)
 80013d4:	f002 f8c5 	bl	8003562 <HAL_GPIO_WritePin>


            send_UART3("---- ETAPE 0 ----\r\n");
 80013d8:	489e      	ldr	r0, [pc, #632]	@ (8001654 <StateMachineTask+0x9d0>)
 80013da:	f001 fa2b 	bl	8002834 <send_UART3>
            osDelay(10);
 80013de:	200a      	movs	r0, #10
 80013e0:	f004 faa4 	bl	800592c <osDelay>
            send_UART3("Appuyer sur le bouton pour commencer\r\n");
 80013e4:	489c      	ldr	r0, [pc, #624]	@ (8001658 <StateMachineTask+0x9d4>)
 80013e6:	f001 fa25 	bl	8002834 <send_UART3>
            action_done = 1;
 80013ea:	4b97      	ldr	r3, [pc, #604]	@ (8001648 <StateMachineTask+0x9c4>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
        }
        break;
 80013f0:	e271      	b.n	80018d6 <StateMachineTask+0xc52>
    case 1:
        if (!action_done)
 80013f2:	4b95      	ldr	r3, [pc, #596]	@ (8001648 <StateMachineTask+0x9c4>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f083 0301 	eor.w	r3, r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <StateMachineTask+0x78e>
        {
        	send_UART3("---- ETAPE 1 ----\n");
 8001400:	4896      	ldr	r0, [pc, #600]	@ (800165c <StateMachineTask+0x9d8>)
 8001402:	f001 fa17 	bl	8002834 <send_UART3>
            send_UART3("Entrez le PER (juste la valeur sur 8 digits)\r\n");
 8001406:	4896      	ldr	r0, [pc, #600]	@ (8001660 <StateMachineTask+0x9dc>)
 8001408:	f001 fa14 	bl	8002834 <send_UART3>
            action_done = 1;
 800140c:	4b8e      	ldr	r3, [pc, #568]	@ (8001648 <StateMachineTask+0x9c4>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
        }

        if (message_complete3)
 8001412:	4b94      	ldr	r3, [pc, #592]	@ (8001664 <StateMachineTask+0x9e0>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 825f 	beq.w	80018da <StateMachineTask+0xc56>
        {
            message_complete3 = 0;
 800141c:	4b91      	ldr	r3, [pc, #580]	@ (8001664 <StateMachineTask+0x9e0>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
            // Nettoyer la chaîne des caractères \r et \n
            char cleaned_buffer[20];
            int i = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            // Copier les caractères sauf \r et \n
            for (int j = 0; j < strlen((char *)rx_buffer3); j++)
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800142e:	e021      	b.n	8001474 <StateMachineTask+0x7f0>
            {
                if (rx_buffer3[j] != '\r' && rx_buffer3[j] != '\n')
 8001430:	4a8d      	ldr	r2, [pc, #564]	@ (8001668 <StateMachineTask+0x9e4>)
 8001432:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b0d      	cmp	r3, #13
 800143c:	d015      	beq.n	800146a <StateMachineTask+0x7e6>
 800143e:	4a8a      	ldr	r2, [pc, #552]	@ (8001668 <StateMachineTask+0x9e4>)
 8001440:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b0a      	cmp	r3, #10
 800144a:	d00e      	beq.n	800146a <StateMachineTask+0x7e6>
                {
                    cleaned_buffer[i++] = rx_buffer3[j];
 800144c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001456:	4984      	ldr	r1, [pc, #528]	@ (8001668 <StateMachineTask+0x9e4>)
 8001458:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800145c:	440a      	add	r2, r1
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001464:	443b      	add	r3, r7
 8001466:	f803 2c50 	strb.w	r2, [r3, #-80]
            for (int j = 0; j < strlen((char *)rx_buffer3); j++)
 800146a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800146e:	3301      	adds	r3, #1
 8001470:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001474:	487c      	ldr	r0, [pc, #496]	@ (8001668 <StateMachineTask+0x9e4>)
 8001476:	f7fe fe75 	bl	8000164 <strlen>
 800147a:	4602      	mov	r2, r0
 800147c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001480:	429a      	cmp	r2, r3
 8001482:	d8d5      	bhi.n	8001430 <StateMachineTask+0x7ac>
                }
            }
            cleaned_buffer[i] = '\0'; // Terminer la chaîne propre
 8001484:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8001488:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800148c:	4413      	add	r3, r2
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]

            // Vérifier la longueur après nettoyage
            if (strlen(cleaned_buffer) == MAX_PER_LENGTH)
 8001492:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fe64 	bl	8000164 <strlen>
 800149c:	4603      	mov	r3, r0
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d128      	bne.n	80014f4 <StateMachineTask+0x870>
            {
                strncpy(per_value, cleaned_buffer, MAX_PER_LENGTH);
 80014a2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80014a6:	2208      	movs	r2, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	4870      	ldr	r0, [pc, #448]	@ (800166c <StateMachineTask+0x9e8>)
 80014ac:	f007 fa2a 	bl	8008904 <strncpy>

                char cmd[30];
                sprintf(cmd, "PER=%s\r", per_value);
 80014b0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80014b4:	4a6d      	ldr	r2, [pc, #436]	@ (800166c <StateMachineTask+0x9e8>)
 80014b6:	496e      	ldr	r1, [pc, #440]	@ (8001670 <StateMachineTask+0x9ec>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f007 f969 	bl	8008790 <siprintf>
                send_UART1(cmd);
 80014be:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 f940 	bl	8002748 <send_UART1>
                osDelay(10);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f004 fa2f 	bl	800592c <osDelay>
                send_UART1(cmd);
 80014ce:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 f938 	bl	8002748 <send_UART1>
                send_UART3("PER envoye. Attente confirmation…\r\n");
 80014d8:	4866      	ldr	r0, [pc, #408]	@ (8001674 <StateMachineTask+0x9f0>)
 80014da:	f001 f9ab 	bl	8002834 <send_UART3>
                osDelay(1000);
 80014de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014e2:	f004 fa23 	bl	800592c <osDelay>
                send_UART1("PER\r");
 80014e6:	4864      	ldr	r0, [pc, #400]	@ (8001678 <StateMachineTask+0x9f4>)
 80014e8:	f001 f92e 	bl	8002748 <send_UART1>
                osDelay(50);
 80014ec:	2032      	movs	r0, #50	@ 0x32
 80014ee:	f004 fa1d 	bl	800592c <osDelay>
            else
            {
                send_UART3("Format invalide. Le PER doit faire 8 digits, recommencez…\r\n");
            }
        }
        break;
 80014f2:	e1f2      	b.n	80018da <StateMachineTask+0xc56>
                send_UART3("Format invalide. Le PER doit faire 8 digits, recommencez…\r\n");
 80014f4:	4861      	ldr	r0, [pc, #388]	@ (800167c <StateMachineTask+0x9f8>)
 80014f6:	f001 f99d 	bl	8002834 <send_UART3>
        break;
 80014fa:	e1ee      	b.n	80018da <StateMachineTask+0xc56>

    case 2:
        if (!action_done)
 80014fc:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <StateMachineTask+0x9c4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	f083 0301 	eor.w	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 81e9 	beq.w	80018de <StateMachineTask+0xc5a>
        {
        	send_UART3("---- ETAPE 2 ----\r\n");
 800150c:	485c      	ldr	r0, [pc, #368]	@ (8001680 <StateMachineTask+0x9fc>)
 800150e:	f001 f991 	bl	8002834 <send_UART3>
            send_UART3("Test STS en cours ...\r\n");
 8001512:	485c      	ldr	r0, [pc, #368]	@ (8001684 <StateMachineTask+0xa00>)
 8001514:	f001 f98e 	bl	8002834 <send_UART3>
            osDelay(500);
 8001518:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800151c:	f004 fa06 	bl	800592c <osDelay>
            send_UART1("STS\r");
 8001520:	4859      	ldr	r0, [pc, #356]	@ (8001688 <StateMachineTask+0xa04>)
 8001522:	f001 f911 	bl	8002748 <send_UART1>
            osDelay(500);
 8001526:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800152a:	f004 f9ff 	bl	800592c <osDelay>
            send_UART3((char *)rx_buffer1);
 800152e:	4857      	ldr	r0, [pc, #348]	@ (800168c <StateMachineTask+0xa08>)
 8001530:	f001 f980 	bl	8002834 <send_UART3>
            action_done = 1;
 8001534:	4b44      	ldr	r3, [pc, #272]	@ (8001648 <StateMachineTask+0x9c4>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
        }
        break;
 800153a:	e1d0      	b.n	80018de <StateMachineTask+0xc5a>
    case 3:
        if (!action_done)
 800153c:	4b42      	ldr	r3, [pc, #264]	@ (8001648 <StateMachineTask+0x9c4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	f083 0301 	eor.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00c      	beq.n	8001564 <StateMachineTask+0x8e0>
        {
        	send_UART3("---- ETAPE 3 ----\r\n");
 800154a:	4851      	ldr	r0, [pc, #324]	@ (8001690 <StateMachineTask+0xa0c>)
 800154c:	f001 f972 	bl	8002834 <send_UART3>
            send_UART3("Mettez les DIPs a OFF et appuyez sur le bouton\r\n");
 8001550:	4850      	ldr	r0, [pc, #320]	@ (8001694 <StateMachineTask+0xa10>)
 8001552:	f001 f96f 	bl	8002834 <send_UART3>
            osDelay(500);
 8001556:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800155a:	f004 f9e7 	bl	800592c <osDelay>
            action_done = 1;
 800155e:	4b3a      	ldr	r3, [pc, #232]	@ (8001648 <StateMachineTask+0x9c4>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
        }
        if (!HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin) && !bp_pressed)
 8001564:	2120      	movs	r1, #32
 8001566:	483a      	ldr	r0, [pc, #232]	@ (8001650 <StateMachineTask+0x9cc>)
 8001568:	f001 ffe4 	bl	8003534 <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 81b7 	bne.w	80018e2 <StateMachineTask+0xc5e>
 8001574:	4b48      	ldr	r3, [pc, #288]	@ (8001698 <StateMachineTask+0xa14>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f083 0301 	eor.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 81af 	beq.w	80018e2 <StateMachineTask+0xc5e>
        {
            bp_pressed = 1;
 8001584:	4b44      	ldr	r3, [pc, #272]	@ (8001698 <StateMachineTask+0xa14>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
            send_UART1("STS\r");
 800158a:	483f      	ldr	r0, [pc, #252]	@ (8001688 <StateMachineTask+0xa04>)
 800158c:	f001 f8dc 	bl	8002748 <send_UART1>
        }

        break;
 8001590:	e1a7      	b.n	80018e2 <StateMachineTask+0xc5e>

    case 4:
        if (!action_done)
 8001592:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <StateMachineTask+0x9c4>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f083 0301 	eor.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <StateMachineTask+0x936>
        {
        	send_UART3("---- ETAPE 4 ----\r\n");
 80015a0:	483e      	ldr	r0, [pc, #248]	@ (800169c <StateMachineTask+0xa18>)
 80015a2:	f001 f947 	bl	8002834 <send_UART3>
            send_UART3("Mettez les DIPs a ON, appuyez sur le BP reset et appuyez sur le bouton\r\n");
 80015a6:	483e      	ldr	r0, [pc, #248]	@ (80016a0 <StateMachineTask+0xa1c>)
 80015a8:	f001 f944 	bl	8002834 <send_UART3>
            osDelay(500);
 80015ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015b0:	f004 f9bc 	bl	800592c <osDelay>
            action_done = 1;
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <StateMachineTask+0x9c4>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
        }
        if (!HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin) && !bp_pressed)
 80015ba:	2120      	movs	r1, #32
 80015bc:	4824      	ldr	r0, [pc, #144]	@ (8001650 <StateMachineTask+0x9cc>)
 80015be:	f001 ffb9 	bl	8003534 <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f040 818e 	bne.w	80018e6 <StateMachineTask+0xc62>
 80015ca:	4b33      	ldr	r3, [pc, #204]	@ (8001698 <StateMachineTask+0xa14>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	f083 0301 	eor.w	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8186 	beq.w	80018e6 <StateMachineTask+0xc62>
        {
            bp_pressed = 1;
 80015da:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <StateMachineTask+0xa14>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
            send_UART1("STS\r");
 80015e0:	4829      	ldr	r0, [pc, #164]	@ (8001688 <StateMachineTask+0xa04>)
 80015e2:	f001 f8b1 	bl	8002748 <send_UART1>
        }

        break;
 80015e6:	e17e      	b.n	80018e6 <StateMachineTask+0xc62>
    case 5: // Entrées à OFF
        if (!action_done)
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <StateMachineTask+0x9c4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f083 0301 	eor.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8179 	beq.w	80018ea <StateMachineTask+0xc66>
        {
        	send_UART3("---- ETAPE 5 ----\r\n");
 80015f8:	482a      	ldr	r0, [pc, #168]	@ (80016a4 <StateMachineTask+0xa20>)
 80015fa:	f001 f91b 	bl	8002834 <send_UART3>
        	osDelay(250);
 80015fe:	20fa      	movs	r0, #250	@ 0xfa
 8001600:	f004 f994 	bl	800592c <osDelay>
            send_UART3("Test entrees à OFF en cours...\r\n");
 8001604:	4828      	ldr	r0, [pc, #160]	@ (80016a8 <StateMachineTask+0xa24>)
 8001606:	f001 f915 	bl	8002834 <send_UART3>
            // Activation de toutes les entrées
            HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001610:	480e      	ldr	r0, [pc, #56]	@ (800164c <StateMachineTask+0x9c8>)
 8001612:	f001 ffa6 	bl	8003562 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800161c:	480c      	ldr	r0, [pc, #48]	@ (8001650 <StateMachineTask+0x9cc>)
 800161e:	f001 ffa0 	bl	8003562 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2108      	movs	r1, #8
 8001626:	4809      	ldr	r0, [pc, #36]	@ (800164c <StateMachineTask+0x9c8>)
 8001628:	f001 ff9b 	bl	8003562 <HAL_GPIO_WritePin>
            osDelay(1000);
 800162c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001630:	f004 f97c 	bl	800592c <osDelay>
            send_UART1("STS\r");
 8001634:	4814      	ldr	r0, [pc, #80]	@ (8001688 <StateMachineTask+0xa04>)
 8001636:	f001 f887 	bl	8002748 <send_UART1>
            action_done = 1;
 800163a:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <StateMachineTask+0x9c4>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001640:	e153      	b.n	80018ea <StateMachineTask+0xc66>
 8001642:	bf00      	nop
 8001644:	200001f4 	.word	0x200001f4
 8001648:	20000202 	.word	0x20000202
 800164c:	40010c00 	.word	0x40010c00
 8001650:	40010800 	.word	0x40010800
 8001654:	0800c3c0 	.word	0x0800c3c0
 8001658:	0800c3d4 	.word	0x0800c3d4
 800165c:	0800c3fc 	.word	0x0800c3fc
 8001660:	0800c410 	.word	0x0800c410
 8001664:	200004f0 	.word	0x200004f0
 8001668:	200004f4 	.word	0x200004f4
 800166c:	200001f8 	.word	0x200001f8
 8001670:	0800c440 	.word	0x0800c440
 8001674:	0800c448 	.word	0x0800c448
 8001678:	0800c470 	.word	0x0800c470
 800167c:	0800c478 	.word	0x0800c478
 8001680:	0800c4b8 	.word	0x0800c4b8
 8001684:	0800c4cc 	.word	0x0800c4cc
 8001688:	0800c4e4 	.word	0x0800c4e4
 800168c:	20000374 	.word	0x20000374
 8001690:	0800c4ec 	.word	0x0800c4ec
 8001694:	0800c500 	.word	0x0800c500
 8001698:	20000204 	.word	0x20000204
 800169c:	0800c534 	.word	0x0800c534
 80016a0:	0800c548 	.word	0x0800c548
 80016a4:	0800c594 	.word	0x0800c594
 80016a8:	0800c5a8 	.word	0x0800c5a8

    case 6: // Entrées à ON
        if (!action_done)
 80016ac:	4b99      	ldr	r3, [pc, #612]	@ (8001914 <StateMachineTask+0xc90>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	f083 0301 	eor.w	r3, r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8119 	beq.w	80018ee <StateMachineTask+0xc6a>
        {
        	send_UART3("---- ETAPE 6 ----\r\n");
 80016bc:	4896      	ldr	r0, [pc, #600]	@ (8001918 <StateMachineTask+0xc94>)
 80016be:	f001 f8b9 	bl	8002834 <send_UART3>
            send_UART3("Test entrees à ON en cours...\r\n");
 80016c2:	4896      	ldr	r0, [pc, #600]	@ (800191c <StateMachineTask+0xc98>)
 80016c4:	f001 f8b6 	bl	8002834 <send_UART3>
            osDelay(1000);
 80016c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016cc:	f004 f92e 	bl	800592c <osDelay>
            // Activation de toutes les entrées
            HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016d6:	4892      	ldr	r0, [pc, #584]	@ (8001920 <StateMachineTask+0xc9c>)
 80016d8:	f001 ff43 	bl	8003562 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e2:	4890      	ldr	r0, [pc, #576]	@ (8001924 <StateMachineTask+0xca0>)
 80016e4:	f001 ff3d 	bl	8003562 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2108      	movs	r1, #8
 80016ec:	488c      	ldr	r0, [pc, #560]	@ (8001920 <StateMachineTask+0xc9c>)
 80016ee:	f001 ff38 	bl	8003562 <HAL_GPIO_WritePin>
            osDelay(500);
 80016f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016f6:	f004 f919 	bl	800592c <osDelay>
            send_UART1("STS\r");
 80016fa:	488b      	ldr	r0, [pc, #556]	@ (8001928 <StateMachineTask+0xca4>)
 80016fc:	f001 f824 	bl	8002748 <send_UART1>
            action_done = 1;
 8001700:	4b84      	ldr	r3, [pc, #528]	@ (8001914 <StateMachineTask+0xc90>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001706:	e0f2      	b.n	80018ee <StateMachineTask+0xc6a>
    case 7:
    	if (!action_done)
 8001708:	4b82      	ldr	r3, [pc, #520]	@ (8001914 <StateMachineTask+0xc90>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f083 0301 	eor.w	r3, r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80ed 	beq.w	80018f2 <StateMachineTask+0xc6e>
    	        {
    		        // On réinitialise les entrées précédemment sur ON
    		    	HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800171e:	4880      	ldr	r0, [pc, #512]	@ (8001920 <StateMachineTask+0xc9c>)
 8001720:	f001 ff1f 	bl	8003562 <HAL_GPIO_WritePin>
    		    	HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800172a:	487e      	ldr	r0, [pc, #504]	@ (8001924 <StateMachineTask+0xca0>)
 800172c:	f001 ff19 	bl	8003562 <HAL_GPIO_WritePin>
    		    	HAL_GPIO_WritePin(OUT3_GPIO_Port, OUT3_Pin, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	2108      	movs	r1, #8
 8001734:	487a      	ldr	r0, [pc, #488]	@ (8001920 <StateMachineTask+0xc9c>)
 8001736:	f001 ff14 	bl	8003562 <HAL_GPIO_WritePin>
    		    	send_UART3("---- ETAPE 7 ----\n");
 800173a:	487c      	ldr	r0, [pc, #496]	@ (800192c <StateMachineTask+0xca8>)
 800173c:	f001 f87a 	bl	8002834 <send_UART3>
    		        send_UART3("Test du décompteur...\n Veuillez valider en appuyant sur le BP si toutes les leds s'allument correctement et dans le bon ordre sur le décompteur\n\r");
 8001740:	487b      	ldr	r0, [pc, #492]	@ (8001930 <StateMachineTask+0xcac>)
 8001742:	f001 f877 	bl	8002834 <send_UART3>
    		        send_UART1("TST=1\r");
 8001746:	487b      	ldr	r0, [pc, #492]	@ (8001934 <StateMachineTask+0xcb0>)
 8001748:	f000 fffe 	bl	8002748 <send_UART1>
    		        action_done = 1;
 800174c:	4b71      	ldr	r3, [pc, #452]	@ (8001914 <StateMachineTask+0xc90>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
    	        }
    	        break;
 8001752:	e0ce      	b.n	80018f2 <StateMachineTask+0xc6e>
    case 8: // Défauts ampoules
    	if (!action_done)
 8001754:	4b6f      	ldr	r3, [pc, #444]	@ (8001914 <StateMachineTask+0xc90>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	f083 0301 	eor.w	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80c9 	beq.w	80018f6 <StateMachineTask+0xc72>
    	{
    		send_UART1("TST=0\r"); // On arrête le test décompteur
 8001764:	4874      	ldr	r0, [pc, #464]	@ (8001938 <StateMachineTask+0xcb4>)
 8001766:	f000 ffef 	bl	8002748 <send_UART1>
    		send_UART3("---- ETAPE 8 ----\r\n");
 800176a:	4874      	ldr	r0, [pc, #464]	@ (800193c <StateMachineTask+0xcb8>)
 800176c:	f001 f862 	bl	8002834 <send_UART3>
    		send_UART3("Test des ampoules ...\n\r Verifiez que les ampoules s'éteignent et se rallument et que le défaut sur l'écran LCD de la carte corresponde bien a la bonne optique\n\rEnsuite appuyez sur le bouton pour valider\r\n");
 8001770:	4873      	ldr	r0, [pc, #460]	@ (8001940 <StateMachineTask+0xcbc>)
 8001772:	f001 f85f 	bl	8002834 <send_UART3>
    		osDelay(2500);
 8001776:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800177a:	f004 f8d7 	bl	800592c <osDelay>
    		HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	2120      	movs	r1, #32
 8001782:	4867      	ldr	r0, [pc, #412]	@ (8001920 <StateMachineTask+0xc9c>)
 8001784:	f001 feed 	bl	8003562 <HAL_GPIO_WritePin>
    		osDelay(2500);
 8001788:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800178c:	f004 f8ce 	bl	800592c <osDelay>
    		HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	2120      	movs	r1, #32
 8001794:	4862      	ldr	r0, [pc, #392]	@ (8001920 <StateMachineTask+0xc9c>)
 8001796:	f001 fee4 	bl	8003562 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	2140      	movs	r1, #64	@ 0x40
 800179e:	4860      	ldr	r0, [pc, #384]	@ (8001920 <StateMachineTask+0xc9c>)
 80017a0:	f001 fedf 	bl	8003562 <HAL_GPIO_WritePin>
    		osDelay(2500);
 80017a4:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80017a8:	f004 f8c0 	bl	800592c <osDelay>
    		HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2140      	movs	r1, #64	@ 0x40
 80017b0:	485b      	ldr	r0, [pc, #364]	@ (8001920 <StateMachineTask+0xc9c>)
 80017b2:	f001 fed6 	bl	8003562 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	2180      	movs	r1, #128	@ 0x80
 80017ba:	4859      	ldr	r0, [pc, #356]	@ (8001920 <StateMachineTask+0xc9c>)
 80017bc:	f001 fed1 	bl	8003562 <HAL_GPIO_WritePin>
    		osDelay(2500);
 80017c0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80017c4:	f004 f8b2 	bl	800592c <osDelay>
    		HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2180      	movs	r1, #128	@ 0x80
 80017cc:	4854      	ldr	r0, [pc, #336]	@ (8001920 <StateMachineTask+0xc9c>)
 80017ce:	f001 fec8 	bl	8003562 <HAL_GPIO_WritePin>
    		action_done = 1;
 80017d2:	4b50      	ldr	r3, [pc, #320]	@ (8001914 <StateMachineTask+0xc90>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 80017d8:	e08d      	b.n	80018f6 <StateMachineTask+0xc72>
    case 9: // Test cellule Jour
    	// on remet les relais à l'état initial
    	if(!action_done){
 80017da:	4b4e      	ldr	r3, [pc, #312]	@ (8001914 <StateMachineTask+0xc90>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f083 0301 	eor.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 8088 	beq.w	80018fa <StateMachineTask+0xc76>
    	osDelay(1000);
 80017ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ee:	f004 f89d 	bl	800592c <osDelay>
    	HAL_GPIO_WritePin(OUT5_GPIO_Port, OUT5_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2120      	movs	r1, #32
 80017f6:	484a      	ldr	r0, [pc, #296]	@ (8001920 <StateMachineTask+0xc9c>)
 80017f8:	f001 feb3 	bl	8003562 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(OUT6_GPIO_Port, OUT6_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2140      	movs	r1, #64	@ 0x40
 8001800:	4847      	ldr	r0, [pc, #284]	@ (8001920 <StateMachineTask+0xc9c>)
 8001802:	f001 feae 	bl	8003562 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(OUT7_GPIO_Port, OUT7_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2180      	movs	r1, #128	@ 0x80
 800180a:	4845      	ldr	r0, [pc, #276]	@ (8001920 <StateMachineTask+0xc9c>)
 800180c:	f001 fea9 	bl	8003562 <HAL_GPIO_WritePin>
    	send_UART3("---- ETAPE 9 ----\r\n");
 8001810:	484c      	ldr	r0, [pc, #304]	@ (8001944 <StateMachineTask+0xcc0>)
 8001812:	f001 f80f 	bl	8002834 <send_UART3>
    	send_UART3("Test cellule JOUR, veuillez exposer la cellule a la lumière\r\nappuyez sur le bouton pour tester\r\n");
 8001816:	484c      	ldr	r0, [pc, #304]	@ (8001948 <StateMachineTask+0xcc4>)
 8001818:	f001 f80c 	bl	8002834 <send_UART3>
    	HAL_GPIO_WritePin(LED_CEL_GPIO_Port, LED_CEL_Pin, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001822:	4840      	ldr	r0, [pc, #256]	@ (8001924 <StateMachineTask+0xca0>)
 8001824:	f001 fe9d 	bl	8003562 <HAL_GPIO_WritePin>
    	send_UART1("STS\r");
 8001828:	483f      	ldr	r0, [pc, #252]	@ (8001928 <StateMachineTask+0xca4>)
 800182a:	f000 ff8d 	bl	8002748 <send_UART1>
    	action_done = 1;
 800182e:	4b39      	ldr	r3, [pc, #228]	@ (8001914 <StateMachineTask+0xc90>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
    	}
    	 break;
 8001834:	e061      	b.n	80018fa <StateMachineTask+0xc76>

    case 10: //Test cellule Nuit
    	if(!action_done){
 8001836:	4b37      	ldr	r3, [pc, #220]	@ (8001914 <StateMachineTask+0xc90>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	f083 0301 	eor.w	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d05c      	beq.n	80018fe <StateMachineTask+0xc7a>
    		HAL_GPIO_WritePin(LED_CEL_GPIO_Port, LED_CEL_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800184a:	4836      	ldr	r0, [pc, #216]	@ (8001924 <StateMachineTask+0xca0>)
 800184c:	f001 fe89 	bl	8003562 <HAL_GPIO_WritePin>
    	osDelay(1000);
 8001850:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001854:	f004 f86a 	bl	800592c <osDelay>
    	send_UART3("---- ETAPE 10 ----\r\n");
 8001858:	483c      	ldr	r0, [pc, #240]	@ (800194c <StateMachineTask+0xcc8>)
 800185a:	f000 ffeb 	bl	8002834 <send_UART3>
    	send_UART3("Test cellule NUIT, veuillez cacher la cellule et reset la cart\r\nappuyez sur le bouton pour tester\n\r");
 800185e:	483c      	ldr	r0, [pc, #240]	@ (8001950 <StateMachineTask+0xccc>)
 8001860:	f000 ffe8 	bl	8002834 <send_UART3>
    	send_UART1("STS\r");
 8001864:	4830      	ldr	r0, [pc, #192]	@ (8001928 <StateMachineTask+0xca4>)
 8001866:	f000 ff6f 	bl	8002748 <send_UART1>
    	action_done=1;
 800186a:	4b2a      	ldr	r3, [pc, #168]	@ (8001914 <StateMachineTask+0xc90>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 8001870:	e045      	b.n	80018fe <StateMachineTask+0xc7a>


    case 11:// Test IR
    	if(!action_done){
 8001872:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <StateMachineTask+0xc90>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	f083 0301 	eor.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d040      	beq.n	8001902 <StateMachineTask+0xc7e>
    	osDelay(1000);
 8001880:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001884:	f004 f852 	bl	800592c <osDelay>
    	send_UART3("---- ETAPE 11 ----\r\n");
 8001888:	4832      	ldr	r0, [pc, #200]	@ (8001954 <StateMachineTask+0xcd0>)
 800188a:	f000 ffd3 	bl	8002834 <send_UART3>
    	send_UART3("Test de l'infrarouge...\n Veuillez valider en appuyant sur le BP si la telecommande fonctionne en emission et reception");
 800188e:	4832      	ldr	r0, [pc, #200]	@ (8001958 <StateMachineTask+0xcd4>)
 8001890:	f000 ffd0 	bl	8002834 <send_UART3>
    	action_done = 1;
 8001894:	4b1f      	ldr	r3, [pc, #124]	@ (8001914 <StateMachineTask+0xc90>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
    	}
        break;
 800189a:	e032      	b.n	8001902 <StateMachineTask+0xc7e>
    case 12:
    	if(!action_done){
 800189c:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <StateMachineTask+0xc90>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	f083 0301 	eor.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d02d      	beq.n	8001906 <StateMachineTask+0xc82>
    	osDelay(1000);
 80018aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ae:	f004 f83d 	bl	800592c <osDelay>
    	send_UART3("---- ETAPE 12 ----\r\n");
 80018b2:	482a      	ldr	r0, [pc, #168]	@ (800195c <StateMachineTask+0xcd8>)
 80018b4:	f000 ffbe 	bl	8002834 <send_UART3>
        HAL_GPIO_WritePin(RELAIS_ALIM_418_GPIO_Port, RELAIS_ALIM_418_Pin, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018be:	4818      	ldr	r0, [pc, #96]	@ (8001920 <StateMachineTask+0xc9c>)
 80018c0:	f001 fe4f 	bl	8003562 <HAL_GPIO_WritePin>
        send_UART3("Test de l'accu...\n Veuillez verifier que vous avez bien le message suppression batterie qui s'affiche à l'écran, si le cas validez");
 80018c4:	4826      	ldr	r0, [pc, #152]	@ (8001960 <StateMachineTask+0xcdc>)
 80018c6:	f000 ffb5 	bl	8002834 <send_UART3>
    	action_done=1;
 80018ca:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <StateMachineTask+0xc90>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
    	}
        break;
 80018d0:	e019      	b.n	8001906 <StateMachineTask+0xc82>
    default:
        break;
 80018d2:	bf00      	nop
 80018d4:	e018      	b.n	8001908 <StateMachineTask+0xc84>
        break;
 80018d6:	bf00      	nop
 80018d8:	e016      	b.n	8001908 <StateMachineTask+0xc84>
        break;
 80018da:	bf00      	nop
 80018dc:	e014      	b.n	8001908 <StateMachineTask+0xc84>
        break;
 80018de:	bf00      	nop
 80018e0:	e012      	b.n	8001908 <StateMachineTask+0xc84>
        break;
 80018e2:	bf00      	nop
 80018e4:	e010      	b.n	8001908 <StateMachineTask+0xc84>
        break;
 80018e6:	bf00      	nop
 80018e8:	e00e      	b.n	8001908 <StateMachineTask+0xc84>
        break;
 80018ea:	bf00      	nop
 80018ec:	e00c      	b.n	8001908 <StateMachineTask+0xc84>
        break;
 80018ee:	bf00      	nop
 80018f0:	e00a      	b.n	8001908 <StateMachineTask+0xc84>
    	        break;
 80018f2:	bf00      	nop
 80018f4:	e008      	b.n	8001908 <StateMachineTask+0xc84>
    	break;
 80018f6:	bf00      	nop
 80018f8:	e006      	b.n	8001908 <StateMachineTask+0xc84>
    	 break;
 80018fa:	bf00      	nop
 80018fc:	e004      	b.n	8001908 <StateMachineTask+0xc84>
    	break;
 80018fe:	bf00      	nop
 8001900:	e002      	b.n	8001908 <StateMachineTask+0xc84>
        break;
 8001902:	bf00      	nop
 8001904:	e000      	b.n	8001908 <StateMachineTask+0xc84>
        break;
 8001906:	bf00      	nop
    }
}
 8001908:	bf00      	nop
 800190a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000202 	.word	0x20000202
 8001918:	0800c5cc 	.word	0x0800c5cc
 800191c:	0800c5e0 	.word	0x0800c5e0
 8001920:	40010c00 	.word	0x40010c00
 8001924:	40010800 	.word	0x40010800
 8001928:	0800c4e4 	.word	0x0800c4e4
 800192c:	0800c604 	.word	0x0800c604
 8001930:	0800c618 	.word	0x0800c618
 8001934:	0800c6ac 	.word	0x0800c6ac
 8001938:	0800c6b4 	.word	0x0800c6b4
 800193c:	0800c6bc 	.word	0x0800c6bc
 8001940:	0800c6d0 	.word	0x0800c6d0
 8001944:	0800c7a0 	.word	0x0800c7a0
 8001948:	0800c7b4 	.word	0x0800c7b4
 800194c:	0800c818 	.word	0x0800c818
 8001950:	0800c830 	.word	0x0800c830
 8001954:	0800c894 	.word	0x0800c894
 8001958:	0800c8ac 	.word	0x0800c8ac
 800195c:	0800c924 	.word	0x0800c924
 8001960:	0800c93c 	.word	0x0800c93c

08001964 <parse_data_STS>:

//---------------------------------------------------------------- Fonctions outils
void parse_data_STS(char *buffer, TrameDataSTS *data)

{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	@ 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]

    char *line = strtok(buffer, "\r\n");
 800196e:	4994      	ldr	r1, [pc, #592]	@ (8001bc0 <parse_data_STS+0x25c>)
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f006 ffdb 	bl	800892c <strtok>
 8001976:	62f8      	str	r0, [r7, #44]	@ 0x2c



    bool cel_val_parsed = false;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    bool cel_mode_parsed = false;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a



    while (line != NULL)
 8001984:	e112      	b.n	8001bac <parse_data_STS+0x248>

    {

        if (strncmp(line, "VER =", 5) == 0)
 8001986:	2205      	movs	r2, #5
 8001988:	498e      	ldr	r1, [pc, #568]	@ (8001bc4 <parse_data_STS+0x260>)
 800198a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800198c:	f006 ffa8 	bl	80088e0 <strncmp>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <parse_data_STS+0x40>

        {

            sscanf(line, "VER = %31[^\r\n]", data->ver);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	498b      	ldr	r1, [pc, #556]	@ (8001bc8 <parse_data_STS+0x264>)
 800199c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800199e:	f006 ff19 	bl	80087d4 <siscanf>
 80019a2:	e0fe      	b.n	8001ba2 <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "CRC =", 5) == 0)
 80019a4:	2205      	movs	r2, #5
 80019a6:	4989      	ldr	r1, [pc, #548]	@ (8001bcc <parse_data_STS+0x268>)
 80019a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019aa:	f006 ff99 	bl	80088e0 <strncmp>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <parse_data_STS+0x60>

        {

            sscanf(line, "CRC = %63[^\r\n]", data->crc);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	3320      	adds	r3, #32
 80019b8:	461a      	mov	r2, r3
 80019ba:	4985      	ldr	r1, [pc, #532]	@ (8001bd0 <parse_data_STS+0x26c>)
 80019bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019be:	f006 ff09 	bl	80087d4 <siscanf>
 80019c2:	e0ee      	b.n	8001ba2 <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "LAN =", 5) == 0)
 80019c4:	2205      	movs	r2, #5
 80019c6:	4983      	ldr	r1, [pc, #524]	@ (8001bd4 <parse_data_STS+0x270>)
 80019c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019ca:	f006 ff89 	bl	80088e0 <strncmp>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d107      	bne.n	80019e4 <parse_data_STS+0x80>

        {

            sscanf(line, "LAN = %15[^\r\n]", data->lan);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	3340      	adds	r3, #64	@ 0x40
 80019d8:	461a      	mov	r2, r3
 80019da:	497f      	ldr	r1, [pc, #508]	@ (8001bd8 <parse_data_STS+0x274>)
 80019dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019de:	f006 fef9 	bl	80087d4 <siscanf>
 80019e2:	e0de      	b.n	8001ba2 <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "ACC =", 5) == 0)
 80019e4:	2205      	movs	r2, #5
 80019e6:	497d      	ldr	r1, [pc, #500]	@ (8001bdc <parse_data_STS+0x278>)
 80019e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019ea:	f006 ff79 	bl	80088e0 <strncmp>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d107      	bne.n	8001a04 <parse_data_STS+0xa0>

        {

            sscanf(line, "ACC = %f", &data->acc);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	3350      	adds	r3, #80	@ 0x50
 80019f8:	461a      	mov	r2, r3
 80019fa:	4979      	ldr	r1, [pc, #484]	@ (8001be0 <parse_data_STS+0x27c>)
 80019fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019fe:	f006 fee9 	bl	80087d4 <siscanf>
 8001a02:	e0ce      	b.n	8001ba2 <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "BAT =", 5) == 0)
 8001a04:	2205      	movs	r2, #5
 8001a06:	4977      	ldr	r1, [pc, #476]	@ (8001be4 <parse_data_STS+0x280>)
 8001a08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a0a:	f006 ff69 	bl	80088e0 <strncmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <parse_data_STS+0xc0>

        {

            sscanf(line, "BAT = %f", &data->bat);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	3354      	adds	r3, #84	@ 0x54
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4973      	ldr	r1, [pc, #460]	@ (8001be8 <parse_data_STS+0x284>)
 8001a1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a1e:	f006 fed9 	bl	80087d4 <siscanf>
 8001a22:	e0be      	b.n	8001ba2 <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "CEL =", 5) == 0)
 8001a24:	2205      	movs	r2, #5
 8001a26:	4971      	ldr	r1, [pc, #452]	@ (8001bec <parse_data_STS+0x288>)
 8001a28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a2a:	f006 ff59 	bl	80088e0 <strncmp>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d12b      	bne.n	8001a8c <parse_data_STS+0x128>

        {

            // Essaye de parser float si pas encore fait

            if (!cel_val_parsed && sscanf(line, "CEL = %f", &data->cel_val) == 1)
 8001a34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a38:	f083 0301 	eor.w	r3, r3, #1
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00d      	beq.n	8001a5e <parse_data_STS+0xfa>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	3358      	adds	r3, #88	@ 0x58
 8001a46:	461a      	mov	r2, r3
 8001a48:	4969      	ldr	r1, [pc, #420]	@ (8001bf0 <parse_data_STS+0x28c>)
 8001a4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a4c:	f006 fec2 	bl	80087d4 <siscanf>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d103      	bne.n	8001a5e <parse_data_STS+0xfa>

            {

                cel_val_parsed = true;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001a5c:	e0a1      	b.n	8001ba2 <parse_data_STS+0x23e>

            }

            // Sinon essaye de parser mode char, indépendamment

            else if (!cel_mode_parsed && sscanf(line, "CEL = %c", &data->cel_mode) == 1)
 8001a5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001a62:	f083 0301 	eor.w	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 809a 	beq.w	8001ba2 <parse_data_STS+0x23e>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	335c      	adds	r3, #92	@ 0x5c
 8001a72:	461a      	mov	r2, r3
 8001a74:	495f      	ldr	r1, [pc, #380]	@ (8001bf4 <parse_data_STS+0x290>)
 8001a76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a78:	f006 feac 	bl	80087d4 <siscanf>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	f040 808f 	bne.w	8001ba2 <parse_data_STS+0x23e>

            {

                cel_mode_parsed = true;
 8001a84:	2301      	movs	r3, #1
 8001a86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001a8a:	e08a      	b.n	8001ba2 <parse_data_STS+0x23e>

            }

        }

        else if (strncmp(line, "LUM =", 5) == 0)
 8001a8c:	2205      	movs	r2, #5
 8001a8e:	495a      	ldr	r1, [pc, #360]	@ (8001bf8 <parse_data_STS+0x294>)
 8001a90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a92:	f006 ff25 	bl	80088e0 <strncmp>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <parse_data_STS+0x148>

        {

            sscanf(line, "LUM = %c", &data->lum);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	335d      	adds	r3, #93	@ 0x5d
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4956      	ldr	r1, [pc, #344]	@ (8001bfc <parse_data_STS+0x298>)
 8001aa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001aa6:	f006 fe95 	bl	80087d4 <siscanf>
 8001aaa:	e07a      	b.n	8001ba2 <parse_data_STS+0x23e>

        }

        else if (strncmp(line, "DIP =", 5) == 0)
 8001aac:	2205      	movs	r2, #5
 8001aae:	4954      	ldr	r1, [pc, #336]	@ (8001c00 <parse_data_STS+0x29c>)
 8001ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ab2:	f006 ff15 	bl	80088e0 <strncmp>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d133      	bne.n	8001b24 <parse_data_STS+0x1c0>

        {

            char *p = line + 5;
 8001abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001abe:	3305      	adds	r3, #5
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24

            char state[4];



            while (sscanf(p, " %d:%3s", &num, state) == 2)
 8001ac2:	e023      	b.n	8001b0c <parse_data_STS+0x1a8>

            {

                if (num >= 1 && num <= 8)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	dd15      	ble.n	8001af6 <parse_data_STS+0x192>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	dc12      	bgt.n	8001af6 <parse_data_STS+0x192>

                    data->dips[num - 1] = (strcmp(state, "ON") == 0);
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	494b      	ldr	r1, [pc, #300]	@ (8001c04 <parse_data_STS+0x2a0>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fb3a 	bl	8000150 <strcmp>
 8001adc:	4602      	mov	r2, r0
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2201      	moveq	r2, #1
 8001ae8:	2200      	movne	r2, #0
 8001aea:	b2d1      	uxtb	r1, r2
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	460a      	mov	r2, r1
 8001af2:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e



                char *next = strchr(p, ' ');
 8001af6:	2120      	movs	r1, #32
 8001af8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001afa:	f006 fee4 	bl	80088c6 <strchr>
 8001afe:	61b8      	str	r0, [r7, #24]

                if (!next) break;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d04a      	beq.n	8001b9c <parse_data_STS+0x238>

                p = next + 1;
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
            while (sscanf(p, " %d:%3s", &num, state) == 2)
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	f107 0214 	add.w	r2, r7, #20
 8001b14:	493c      	ldr	r1, [pc, #240]	@ (8001c08 <parse_data_STS+0x2a4>)
 8001b16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b18:	f006 fe5c 	bl	80087d4 <siscanf>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d0d0      	beq.n	8001ac4 <parse_data_STS+0x160>
 8001b22:	e03e      	b.n	8001ba2 <parse_data_STS+0x23e>

            }

        }

        else if (strncmp(line, "INP =", 5) == 0)
 8001b24:	2205      	movs	r2, #5
 8001b26:	4939      	ldr	r1, [pc, #228]	@ (8001c0c <parse_data_STS+0x2a8>)
 8001b28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b2a:	f006 fed9 	bl	80088e0 <strncmp>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d136      	bne.n	8001ba2 <parse_data_STS+0x23e>

        {

            char *p = line + 5;
 8001b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b36:	3305      	adds	r3, #5
 8001b38:	623b      	str	r3, [r7, #32]

            char state[4];



            while (sscanf(p, " %d:%3s", &num, state) == 2)
 8001b3a:	e023      	b.n	8001b84 <parse_data_STS+0x220>

            {

                if (num >= 1 && num <= 3)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	dd15      	ble.n	8001b6e <parse_data_STS+0x20a>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	dc12      	bgt.n	8001b6e <parse_data_STS+0x20a>

                    data->inps[num - 1] = (strcmp(state, "ON") == 0);
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	492d      	ldr	r1, [pc, #180]	@ (8001c04 <parse_data_STS+0x2a0>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fafe 	bl	8000150 <strcmp>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2201      	moveq	r2, #1
 8001b60:	2200      	movne	r2, #0
 8001b62:	b2d1      	uxtb	r1, r2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	460a      	mov	r2, r1
 8001b6a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66



                char *next = strchr(p, ' ');
 8001b6e:	2120      	movs	r1, #32
 8001b70:	6a38      	ldr	r0, [r7, #32]
 8001b72:	f006 fea8 	bl	80088c6 <strchr>
 8001b76:	61f8      	str	r0, [r7, #28]

                if (!next) break;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d010      	beq.n	8001ba0 <parse_data_STS+0x23c>

                p = next + 1;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3301      	adds	r3, #1
 8001b82:	623b      	str	r3, [r7, #32]
            while (sscanf(p, " %d:%3s", &num, state) == 2)
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	f107 020c 	add.w	r2, r7, #12
 8001b8c:	491e      	ldr	r1, [pc, #120]	@ (8001c08 <parse_data_STS+0x2a4>)
 8001b8e:	6a38      	ldr	r0, [r7, #32]
 8001b90:	f006 fe20 	bl	80087d4 <siscanf>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d0d0      	beq.n	8001b3c <parse_data_STS+0x1d8>
 8001b9a:	e002      	b.n	8001ba2 <parse_data_STS+0x23e>
                if (!next) break;
 8001b9c:	bf00      	nop
 8001b9e:	e000      	b.n	8001ba2 <parse_data_STS+0x23e>
                if (!next) break;
 8001ba0:	bf00      	nop

        }



        line = strtok(NULL, "\r\n");
 8001ba2:	4907      	ldr	r1, [pc, #28]	@ (8001bc0 <parse_data_STS+0x25c>)
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f006 fec1 	bl	800892c <strtok>
 8001baa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    while (line != NULL)
 8001bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f aee9 	bne.w	8001986 <parse_data_STS+0x22>

    }

}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3730      	adds	r7, #48	@ 0x30
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	0800c9c4 	.word	0x0800c9c4
 8001bc4:	0800c9c8 	.word	0x0800c9c8
 8001bc8:	0800c9d0 	.word	0x0800c9d0
 8001bcc:	0800c9e0 	.word	0x0800c9e0
 8001bd0:	0800c9e8 	.word	0x0800c9e8
 8001bd4:	0800c9f8 	.word	0x0800c9f8
 8001bd8:	0800ca00 	.word	0x0800ca00
 8001bdc:	0800ca10 	.word	0x0800ca10
 8001be0:	0800ca18 	.word	0x0800ca18
 8001be4:	0800ca24 	.word	0x0800ca24
 8001be8:	0800ca2c 	.word	0x0800ca2c
 8001bec:	0800ca38 	.word	0x0800ca38
 8001bf0:	0800ca40 	.word	0x0800ca40
 8001bf4:	0800ca4c 	.word	0x0800ca4c
 8001bf8:	0800ca58 	.word	0x0800ca58
 8001bfc:	0800ca60 	.word	0x0800ca60
 8001c00:	0800ca6c 	.word	0x0800ca6c
 8001c04:	0800ca74 	.word	0x0800ca74
 8001c08:	0800ca78 	.word	0x0800ca78
 8001c0c:	0800ca80 	.word	0x0800ca80

08001c10 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c14:	f000 ff34 	bl	8002a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c18:	f000 f832 	bl	8001c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c1c:	f000 f948 	bl	8001eb0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c20:	f000 f8c8 	bl	8001db4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c24:	f000 fd60 	bl	80026e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001c28:	f000 fda4 	bl	8002774 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001c2c:	f000 fdd2 	bl	80027d4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001c30:	f000 f882 	bl	8001d38 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001c34:	f000 f8ec 	bl	8001e10 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c38:	f003 fd9e 	bl	8005778 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <main+0x58>)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	480a      	ldr	r0, [pc, #40]	@ (8001c6c <main+0x5c>)
 8001c42:	f003 fde1 	bl	8005808 <osThreadNew>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <main+0x60>)
 8001c4a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  StateMachineTaskHandle = osThreadNew(StartStateMachineTask, NULL, &StateMachineTask_attributes);
 8001c4c:	4a09      	ldr	r2, [pc, #36]	@ (8001c74 <main+0x64>)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4809      	ldr	r0, [pc, #36]	@ (8001c78 <main+0x68>)
 8001c52:	f003 fdd9 	bl	8005808 <osThreadNew>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a08      	ldr	r2, [pc, #32]	@ (8001c7c <main+0x6c>)
 8001c5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c5c:	f003 fdae 	bl	80057bc <osKernelStart>
 8001c60:	2300      	movs	r3, #0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* USER CODE END 3 */
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	0800cad4 	.word	0x0800cad4
 8001c6c:	08002023 	.word	0x08002023
 8001c70:	200002d4 	.word	0x200002d4
 8001c74:	0800caf8 	.word	0x0800caf8
 8001c78:	0800200d 	.word	0x0800200d
 8001c7c:	200002d8 	.word	0x200002d8

08001c80 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b094      	sub	sp, #80	@ 0x50
 8001c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c8a:	2228      	movs	r2, #40	@ 0x28
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f006 fe11 	bl	80088b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ccc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 fdb8 	bl	800384c <HAL_RCC_OscConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ce2:	f000 f9b7 	bl	8002054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ce6:	230f      	movs	r3, #15
 8001ce8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cf6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2102      	movs	r1, #2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 f824 	bl	8003d50 <HAL_RCC_ClockConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d0e:	f000 f9a1 	bl	8002054 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d12:	2302      	movs	r3, #2
 8001d14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001d16:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 f9d4 	bl	80040cc <HAL_RCCEx_PeriphCLKConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d2a:	f000 f993 	bl	8002054 <Error_Handler>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3750      	adds	r7, #80	@ 0x50
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8001d48:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <MX_ADC1_Init+0x74>)
 8001d4a:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <MX_ADC1_Init+0x78>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <MX_ADC1_Init+0x74>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d54:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <MX_ADC1_Init+0x74>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <MX_ADC1_Init+0x74>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <MX_ADC1_Init+0x74>)
 8001d62:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001d66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d68:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <MX_ADC1_Init+0x74>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <MX_ADC1_Init+0x74>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d74:	480d      	ldr	r0, [pc, #52]	@ (8001dac <MX_ADC1_Init+0x74>)
 8001d76:	f000 feb5 	bl	8002ae4 <HAL_ADC_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001d80:	f000 f968 	bl	8002054 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d84:	2308      	movs	r3, #8
 8001d86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	@ (8001dac <MX_ADC1_Init+0x74>)
 8001d96:	f000 ff7d 	bl	8002c94 <HAL_ADC_ConfigChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001da0:	f000 f958 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000208 	.word	0x20000208
 8001db0:	40012400 	.word	0x40012400

08001db4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dba:	4a13      	ldr	r2, [pc, #76]	@ (8001e08 <MX_I2C1_Init+0x54>)
 8001dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dc0:	4a12      	ldr	r2, [pc, #72]	@ (8001e0c <MX_I2C1_Init+0x58>)
 8001dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de4:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001df2:	f001 fbe7 	bl	80035c4 <HAL_I2C_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dfc:	f000 f92a 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000238 	.word	0x20000238
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	000186a0 	.word	0x000186a0

08001e10 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e24:	463b      	mov	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <MX_TIM1_Init+0x98>)
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001eac <MX_TIM1_Init+0x9c>)
 8001e30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <MX_TIM1_Init+0x98>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <MX_TIM1_Init+0x98>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <MX_TIM1_Init+0x98>)
 8001e40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <MX_TIM1_Init+0x98>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <MX_TIM1_Init+0x98>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e52:	4b15      	ldr	r3, [pc, #84]	@ (8001ea8 <MX_TIM1_Init+0x98>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e58:	4813      	ldr	r0, [pc, #76]	@ (8001ea8 <MX_TIM1_Init+0x98>)
 8001e5a:	f002 f9ed 	bl	8004238 <HAL_TIM_Base_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e64:	f000 f8f6 	bl	8002054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	4619      	mov	r1, r3
 8001e74:	480c      	ldr	r0, [pc, #48]	@ (8001ea8 <MX_TIM1_Init+0x98>)
 8001e76:	f002 fb71 	bl	800455c <HAL_TIM_ConfigClockSource>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e80:	f000 f8e8 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <MX_TIM1_Init+0x98>)
 8001e92:	f002 fd53 	bl	800493c <HAL_TIMEx_MasterConfigSynchronization>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e9c:	f000 f8da 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 8001ea0:	bf00      	nop
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2000028c 	.word	0x2000028c
 8001eac:	40012c00 	.word	0x40012c00

08001eb0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001eca:	f043 0310 	orr.w	r3, r3, #16
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b49      	ldr	r3, [pc, #292]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001edc:	4b46      	ldr	r3, [pc, #280]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a45      	ldr	r2, [pc, #276]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001ee2:	f043 0320 	orr.w	r3, r3, #32
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef4:	4b40      	ldr	r3, [pc, #256]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a3f      	ldr	r2, [pc, #252]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a39      	ldr	r2, [pc, #228]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001f12:	f043 0308 	orr.w	r3, r3, #8
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b37      	ldr	r3, [pc, #220]	@ (8001ff8 <MX_GPIO_Init+0x148>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT8_Pin | BUZZER_Pin, GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001f2a:	4834      	ldr	r0, [pc, #208]	@ (8001ffc <MX_GPIO_Init+0x14c>)
 8001f2c:	f001 fb19 	bl	8003562 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RTS_485_Pin | LED_CEL_Pin | OUT2_Pin, GPIO_PIN_RESET);
 8001f30:	2200      	movs	r2, #0
 8001f32:	f648 0110 	movw	r1, #34832	@ 0x8810
 8001f36:	4832      	ldr	r0, [pc, #200]	@ (8002000 <MX_GPIO_Init+0x150>)
 8001f38:	f001 fb13 	bl	8003562 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin | LEDG_Pin | LEDY_Pin | RELAIS_ALIM_418_Pin | OUT1_Pin | OUT3_Pin | OUT4_Pin | OUT5_Pin | OUT6_Pin | OUT7_Pin, GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f24e 01fe 	movw	r1, #57598	@ 0xe0fe
 8001f42:	4830      	ldr	r0, [pc, #192]	@ (8002004 <MX_GPIO_Init+0x154>)
 8001f44:	f001 fb0d 	bl	8003562 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT8_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = OUT8_Pin | BUZZER_Pin;
 8001f48:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2302      	movs	r3, #2
 8001f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4826      	ldr	r0, [pc, #152]	@ (8001ffc <MX_GPIO_Init+0x14c>)
 8001f62:	f001 f963 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP1_Pin */
  GPIO_InitStruct.Pin = DIP1_Pin;
 8001f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIP1_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4820      	ldr	r0, [pc, #128]	@ (8001ffc <MX_GPIO_Init+0x14c>)
 8001f7c:	f001 f956 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP2_Pin DIP3_Pin BP2_Pin BP3_Pin
                           BP4_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin | DIP3_Pin | BP2_Pin | BP3_Pin | BP4_Pin;
 8001f80:	23e3      	movs	r3, #227	@ 0xe3
 8001f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	4619      	mov	r1, r3
 8001f92:	481b      	ldr	r0, [pc, #108]	@ (8002000 <MX_GPIO_Init+0x150>)
 8001f94:	f001 f94a 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pins : RTS_485_Pin LED_CEL_Pin OUT2_Pin */
  GPIO_InitStruct.Pin = RTS_485_Pin | LED_CEL_Pin | OUT2_Pin;
 8001f98:	f648 0310 	movw	r3, #34832	@ 0x8810
 8001f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 0310 	add.w	r3, r7, #16
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4813      	ldr	r0, [pc, #76]	@ (8002000 <MX_GPIO_Init+0x150>)
 8001fb2:	f001 f93b 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDY_Pin RELAIS_ALIM_418_Pin
                           OUT1_Pin OUT3_Pin OUT4_Pin OUT5_Pin
                           OUT6_Pin OUT7_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin | LEDG_Pin | LEDY_Pin | RELAIS_ALIM_418_Pin | OUT1_Pin | OUT3_Pin | OUT4_Pin | OUT5_Pin | OUT6_Pin | OUT7_Pin;
 8001fb6:	f24e 03fe 	movw	r3, #57598	@ 0xe0fe
 8001fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480d      	ldr	r0, [pc, #52]	@ (8002004 <MX_GPIO_Init+0x154>)
 8001fd0:	f001 f92c 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pin : BP1_IRQ_Pin */
  GPIO_InitStruct.Pin = BP1_IRQ_Pin;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <MX_GPIO_Init+0x158>)
 8001fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BP1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4806      	ldr	r0, [pc, #24]	@ (8002004 <MX_GPIO_Init+0x154>)
 8001fea:	f001 f91f 	bl	800322c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001fee:	bf00      	nop
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40011000 	.word	0x40011000
 8002000:	40010800 	.word	0x40010800
 8002004:	40010c00 	.word	0x40010c00
 8002008:	10110000 	.word	0x10110000

0800200c <StartStateMachineTask>:

/* USER CODE BEGIN 4 */
void StartStateMachineTask(void *argument)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    StateMachineTask();
 8002014:	f7fe fe36 	bl	8000c84 <StateMachineTask>
    osDelay(50);
 8002018:	2032      	movs	r0, #50	@ 0x32
 800201a:	f003 fc87 	bl	800592c <osDelay>
    StateMachineTask();
 800201e:	bf00      	nop
 8002020:	e7f8      	b.n	8002014 <StartStateMachineTask+0x8>

08002022 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    // HAL_GPIO_TogglePin(OUT4_GPIO_Port, OUT4_Pin); //DEBUG
    osDelay(1000);
 800202a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800202e:	f003 fc7d 	bl	800592c <osDelay>
 8002032:	e7fa      	b.n	800202a <StartDefaultTask+0x8>

08002034 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002044:	d101      	bne.n	800204a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002046:	f000 fd31 	bl	8002aac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    send_UART3("ERROR");
 800205c:	4801      	ldr	r0, [pc, #4]	@ (8002064 <Error_Handler+0x10>)
 800205e:	f000 fbe9 	bl	8002834 <send_UART3>
 8002062:	e7fb      	b.n	800205c <Error_Handler+0x8>
 8002064:	0800caa8 	.word	0x0800caa8

08002068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800206e:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <HAL_MspInit+0x68>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <HAL_MspInit+0x68>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6193      	str	r3, [r2, #24]
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_MspInit+0x68>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <HAL_MspInit+0x68>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4a11      	ldr	r2, [pc, #68]	@ (80020d0 <HAL_MspInit+0x68>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002090:	61d3      	str	r3, [r2, #28]
 8002092:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_MspInit+0x68>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	210f      	movs	r1, #15
 80020a2:	f06f 0001 	mvn.w	r0, #1
 80020a6:	f000 ffe4 	bl	8003072 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_MspInit+0x6c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <HAL_MspInit+0x6c>)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010000 	.word	0x40010000

080020d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <HAL_ADC_MspInit+0x6c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d121      	bne.n	800213c <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020f8:	4b13      	ldr	r3, [pc, #76]	@ (8002148 <HAL_ADC_MspInit+0x70>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <HAL_ADC_MspInit+0x70>)
 80020fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <HAL_ADC_MspInit+0x70>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002110:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <HAL_ADC_MspInit+0x70>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4a0c      	ldr	r2, [pc, #48]	@ (8002148 <HAL_ADC_MspInit+0x70>)
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	6193      	str	r3, [r2, #24]
 800211c:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_ADC_MspInit+0x70>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = V_CEL_Pin;
 8002128:	2301      	movs	r3, #1
 800212a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212c:	2303      	movs	r3, #3
 800212e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(V_CEL_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4619      	mov	r1, r3
 8002136:	4805      	ldr	r0, [pc, #20]	@ (800214c <HAL_ADC_MspInit+0x74>)
 8002138:	f001 f878 	bl	800322c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800213c:	bf00      	nop
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40012400 	.word	0x40012400
 8002148:	40021000 	.word	0x40021000
 800214c:	40010c00 	.word	0x40010c00

08002150 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	@ 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1d      	ldr	r2, [pc, #116]	@ (80021e0 <HAL_I2C_MspInit+0x90>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d132      	bne.n	80021d6 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002170:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <HAL_I2C_MspInit+0x94>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a1b      	ldr	r2, [pc, #108]	@ (80021e4 <HAL_I2C_MspInit+0x94>)
 8002176:	f043 0308 	orr.w	r3, r3, #8
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <HAL_I2C_MspInit+0x94>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8002188:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800218c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800218e:	2312      	movs	r3, #18
 8002190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4812      	ldr	r0, [pc, #72]	@ (80021e8 <HAL_I2C_MspInit+0x98>)
 800219e:	f001 f845 	bl	800322c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_I2C_MspInit+0x9c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b8:	4a0c      	ldr	r2, [pc, #48]	@ (80021ec <HAL_I2C_MspInit+0x9c>)
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_I2C_MspInit+0x94>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a08      	ldr	r2, [pc, #32]	@ (80021e4 <HAL_I2C_MspInit+0x94>)
 80021c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021c8:	61d3      	str	r3, [r2, #28]
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_I2C_MspInit+0x94>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	@ 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40005400 	.word	0x40005400
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010c00 	.word	0x40010c00
 80021ec:	40010000 	.word	0x40010000

080021f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a09      	ldr	r2, [pc, #36]	@ (8002224 <HAL_TIM_Base_MspInit+0x34>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10b      	bne.n	800221a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_TIM_Base_MspInit+0x38>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	4a08      	ldr	r2, [pc, #32]	@ (8002228 <HAL_TIM_Base_MspInit+0x38>)
 8002208:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800220c:	6193      	str	r3, [r2, #24]
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_TIM_Base_MspInit+0x38>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	@ 0x30
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5f      	ldr	r2, [pc, #380]	@ (80023c4 <HAL_UART_MspInit+0x198>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d13a      	bne.n	80022c2 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224c:	4b5e      	ldr	r3, [pc, #376]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a5d      	ldr	r2, [pc, #372]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b5b      	ldr	r3, [pc, #364]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b58      	ldr	r3, [pc, #352]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a57      	ldr	r2, [pc, #348]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b55      	ldr	r3, [pc, #340]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Tx232_Pin;
 800227c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx232_GPIO_Port, &GPIO_InitStruct);
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	4619      	mov	r1, r3
 8002290:	484e      	ldr	r0, [pc, #312]	@ (80023cc <HAL_UART_MspInit+0x1a0>)
 8002292:	f000 ffcb 	bl	800322c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Rx232_Pin;
 8002296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx232_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 0320 	add.w	r3, r7, #32
 80022a8:	4619      	mov	r1, r3
 80022aa:	4848      	ldr	r0, [pc, #288]	@ (80023cc <HAL_UART_MspInit+0x1a0>)
 80022ac:	f000 ffbe 	bl	800322c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2105      	movs	r1, #5
 80022b4:	2025      	movs	r0, #37	@ 0x25
 80022b6:	f000 fedc 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ba:	2025      	movs	r0, #37	@ 0x25
 80022bc:	f000 fef5 	bl	80030aa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80022c0:	e07c      	b.n	80023bc <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a42      	ldr	r2, [pc, #264]	@ (80023d0 <HAL_UART_MspInit+0x1a4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d138      	bne.n	800233e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022cc:	4b3e      	ldr	r3, [pc, #248]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a3d      	ldr	r2, [pc, #244]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b3b      	ldr	r3, [pc, #236]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a37      	ldr	r2, [pc, #220]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b35      	ldr	r3, [pc, #212]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Tx485_Pin;
 80022fc:	2304      	movs	r3, #4
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Tx485_GPIO_Port, &GPIO_InitStruct);
 8002308:	f107 0320 	add.w	r3, r7, #32
 800230c:	4619      	mov	r1, r3
 800230e:	482f      	ldr	r0, [pc, #188]	@ (80023cc <HAL_UART_MspInit+0x1a0>)
 8002310:	f000 ff8c 	bl	800322c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Rx485_Pin;
 8002314:	2308      	movs	r3, #8
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(Rx485_GPIO_Port, &GPIO_InitStruct);
 8002320:	f107 0320 	add.w	r3, r7, #32
 8002324:	4619      	mov	r1, r3
 8002326:	4829      	ldr	r0, [pc, #164]	@ (80023cc <HAL_UART_MspInit+0x1a0>)
 8002328:	f000 ff80 	bl	800322c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2105      	movs	r1, #5
 8002330:	2026      	movs	r0, #38	@ 0x26
 8002332:	f000 fe9e 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002336:	2026      	movs	r0, #38	@ 0x26
 8002338:	f000 feb7 	bl	80030aa <HAL_NVIC_EnableIRQ>
}
 800233c:	e03e      	b.n	80023bc <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a24      	ldr	r2, [pc, #144]	@ (80023d4 <HAL_UART_MspInit+0x1a8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d139      	bne.n	80023bc <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002348:	4b1f      	ldr	r3, [pc, #124]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a1e      	ldr	r2, [pc, #120]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800234e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b1c      	ldr	r3, [pc, #112]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002360:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a18      	ldr	r2, [pc, #96]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0320 	add.w	r3, r7, #32
 800238a:	4619      	mov	r1, r3
 800238c:	4812      	ldr	r0, [pc, #72]	@ (80023d8 <HAL_UART_MspInit+0x1ac>)
 800238e:	f000 ff4d 	bl	800322c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002392:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 0320 	add.w	r3, r7, #32
 80023a4:	4619      	mov	r1, r3
 80023a6:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <HAL_UART_MspInit+0x1ac>)
 80023a8:	f000 ff40 	bl	800322c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2105      	movs	r1, #5
 80023b0:	2027      	movs	r0, #39	@ 0x27
 80023b2:	f000 fe5e 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023b6:	2027      	movs	r0, #39	@ 0x27
 80023b8:	f000 fe77 	bl	80030aa <HAL_NVIC_EnableIRQ>
}
 80023bc:	bf00      	nop
 80023be:	3730      	adds	r7, #48	@ 0x30
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010800 	.word	0x40010800
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40004800 	.word	0x40004800
 80023d8:	40010c00 	.word	0x40010c00

080023dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08e      	sub	sp, #56	@ 0x38
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80023f2:	4b34      	ldr	r3, [pc, #208]	@ (80024c4 <HAL_InitTick+0xe8>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a33      	ldr	r2, [pc, #204]	@ (80024c4 <HAL_InitTick+0xe8>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	61d3      	str	r3, [r2, #28]
 80023fe:	4b31      	ldr	r3, [pc, #196]	@ (80024c4 <HAL_InitTick+0xe8>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800240a:	f107 0210 	add.w	r2, r7, #16
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f001 fe0b 	bl	8004030 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800241e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002424:	f001 fddc 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8002428:	6378      	str	r0, [r7, #52]	@ 0x34
 800242a:	e004      	b.n	8002436 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800242c:	f001 fdd8 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8002430:	4603      	mov	r3, r0
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002438:	4a23      	ldr	r2, [pc, #140]	@ (80024c8 <HAL_InitTick+0xec>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	3b01      	subs	r3, #1
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002444:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_InitTick+0xf0>)
 8002446:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800244a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800244c:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <HAL_InitTick+0xf0>)
 800244e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002452:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002454:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <HAL_InitTick+0xf0>)
 8002456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002458:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800245a:	4b1c      	ldr	r3, [pc, #112]	@ (80024cc <HAL_InitTick+0xf0>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <HAL_InitTick+0xf0>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002466:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_InitTick+0xf0>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800246c:	4817      	ldr	r0, [pc, #92]	@ (80024cc <HAL_InitTick+0xf0>)
 800246e:	f001 fee3 	bl	8004238 <HAL_TIM_Base_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002478:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11b      	bne.n	80024b8 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002480:	4812      	ldr	r0, [pc, #72]	@ (80024cc <HAL_InitTick+0xf0>)
 8002482:	f001 ff29 	bl	80042d8 <HAL_TIM_Base_Start_IT>
 8002486:	4603      	mov	r3, r0
 8002488:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800248c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002494:	201c      	movs	r0, #28
 8002496:	f000 fe08 	bl	80030aa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d808      	bhi.n	80024b2 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	201c      	movs	r0, #28
 80024a6:	f000 fde4 	bl	8003072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024aa:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <HAL_InitTick+0xf4>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e002      	b.n	80024b8 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3738      	adds	r7, #56	@ 0x38
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	431bde83 	.word	0x431bde83
 80024cc:	200002dc 	.word	0x200002dc
 80024d0:	20000004 	.word	0x20000004

080024d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <NMI_Handler+0x4>

080024dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <HardFault_Handler+0x4>

080024e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <MemManage_Handler+0x4>

080024ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800250c:	4802      	ldr	r0, [pc, #8]	@ (8002518 <TIM2_IRQHandler+0x10>)
 800250e:	f001 ff35 	bl	800437c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200002dc 	.word	0x200002dc

0800251c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002520:	4802      	ldr	r0, [pc, #8]	@ (800252c <USART1_IRQHandler+0x10>)
 8002522:	f002 fb7b 	bl	8004c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000328 	.word	0x20000328

08002530 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002534:	4802      	ldr	r0, [pc, #8]	@ (8002540 <USART2_IRQHandler+0x10>)
 8002536:	f002 fb71 	bl	8004c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000055c 	.word	0x2000055c

08002544 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002548:	4802      	ldr	r0, [pc, #8]	@ (8002554 <USART3_IRQHandler+0x10>)
 800254a:	f002 fb67 	bl	8004c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200004a8 	.word	0x200004a8

08002558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return 1;
 800255c:	2301      	movs	r3, #1
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <_kill>:

int _kill(int pid, int sig)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002570:	f006 faf2 	bl	8008b58 <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	2216      	movs	r2, #22
 8002578:	601a      	str	r2, [r3, #0]
  return -1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <_exit>:

void _exit (int status)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800258e:	f04f 31ff 	mov.w	r1, #4294967295
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffe7 	bl	8002566 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <_exit+0x12>

0800259c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	e00a      	b.n	80025c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ae:	f3af 8000 	nop.w
 80025b2:	4601      	mov	r1, r0
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	60ba      	str	r2, [r7, #8]
 80025ba:	b2ca      	uxtb	r2, r1
 80025bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbf0      	blt.n	80025ae <_read+0x12>
  }

  return len;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e009      	b.n	80025fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	60ba      	str	r2, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbf1      	blt.n	80025e8 <_write+0x12>
  }
  return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_close>:

int _close(int file)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002634:	605a      	str	r2, [r3, #4]
  return 0;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <_isatty>:

int _isatty(int file)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
	...

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	@ (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	@ (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f006 fa5a 	bl	8008b58 <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	@ (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20005000 	.word	0x20005000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	20000324 	.word	0x20000324
 80026d8:	20002118 	.word	0x20002118

080026dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026ec:	4b13      	ldr	r3, [pc, #76]	@ (800273c <MX_USART1_UART_Init+0x54>)
 80026ee:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <MX_USART1_UART_Init+0x58>)
 80026f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026f2:	4b12      	ldr	r3, [pc, #72]	@ (800273c <MX_USART1_UART_Init+0x54>)
 80026f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80026f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <MX_USART1_UART_Init+0x54>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002700:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <MX_USART1_UART_Init+0x54>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002706:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <MX_USART1_UART_Init+0x54>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <MX_USART1_UART_Init+0x54>)
 800270e:	220c      	movs	r2, #12
 8002710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002712:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <MX_USART1_UART_Init+0x54>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002718:	4b08      	ldr	r3, [pc, #32]	@ (800273c <MX_USART1_UART_Init+0x54>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800271e:	4807      	ldr	r0, [pc, #28]	@ (800273c <MX_USART1_UART_Init+0x54>)
 8002720:	f002 f97c 	bl	8004a1c <HAL_UART_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800272a:	f7ff fc93 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, &rx_char1, 1);
 800272e:	2201      	movs	r2, #1
 8002730:	4904      	ldr	r1, [pc, #16]	@ (8002744 <MX_USART1_UART_Init+0x5c>)
 8002732:	4802      	ldr	r0, [pc, #8]	@ (800273c <MX_USART1_UART_Init+0x54>)
 8002734:	f002 fa4d 	bl	8004bd2 <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000328 	.word	0x20000328
 8002740:	40013800 	.word	0x40013800
 8002744:	20000371 	.word	0x20000371

08002748 <send_UART1>:

void send_UART1(const char *msg)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7fd fd07 	bl	8000164 <strlen>
 8002756:	4603      	mov	r3, r0
 8002758:	b29a      	uxth	r2, r3
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4803      	ldr	r0, [pc, #12]	@ (8002770 <send_UART1+0x28>)
 8002762:	f002 f9ab 	bl	8004abc <HAL_UART_Transmit>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000328 	.word	0x20000328

08002774 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002778:	4b13      	ldr	r3, [pc, #76]	@ (80027c8 <MX_USART2_UART_Init+0x54>)
 800277a:	4a14      	ldr	r2, [pc, #80]	@ (80027cc <MX_USART2_UART_Init+0x58>)
 800277c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800277e:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <MX_USART2_UART_Init+0x54>)
 8002780:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002786:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <MX_USART2_UART_Init+0x54>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800278c:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <MX_USART2_UART_Init+0x54>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002792:	4b0d      	ldr	r3, [pc, #52]	@ (80027c8 <MX_USART2_UART_Init+0x54>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <MX_USART2_UART_Init+0x54>)
 800279a:	220c      	movs	r2, #12
 800279c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279e:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <MX_USART2_UART_Init+0x54>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a4:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <MX_USART2_UART_Init+0x54>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027aa:	4807      	ldr	r0, [pc, #28]	@ (80027c8 <MX_USART2_UART_Init+0x54>)
 80027ac:	f002 f936 	bl	8004a1c <HAL_UART_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027b6:	f7ff fc4d 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &rx_char2, 1);
 80027ba:	2201      	movs	r2, #1
 80027bc:	4904      	ldr	r1, [pc, #16]	@ (80027d0 <MX_USART2_UART_Init+0x5c>)
 80027be:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <MX_USART2_UART_Init+0x54>)
 80027c0:	f002 fa07 	bl	8004bd2 <HAL_UART_Receive_IT>

  /* USER CODE END USART2_Init 2 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000055c 	.word	0x2000055c
 80027cc:	40004400 	.word	0x40004400
 80027d0:	200005a5 	.word	0x200005a5

080027d4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART3_UART_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027d8:	4b13      	ldr	r3, [pc, #76]	@ (8002828 <MX_USART3_UART_Init+0x54>)
 80027da:	4a14      	ldr	r2, [pc, #80]	@ (800282c <MX_USART3_UART_Init+0x58>)
 80027dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80027de:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <MX_USART3_UART_Init+0x54>)
 80027e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027e6:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <MX_USART3_UART_Init+0x54>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <MX_USART3_UART_Init+0x54>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <MX_USART3_UART_Init+0x54>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <MX_USART3_UART_Init+0x54>)
 80027fa:	220c      	movs	r2, #12
 80027fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <MX_USART3_UART_Init+0x54>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002804:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <MX_USART3_UART_Init+0x54>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 800280a:	4807      	ldr	r0, [pc, #28]	@ (8002828 <MX_USART3_UART_Init+0x54>)
 800280c:	f002 f906 	bl	8004a1c <HAL_UART_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002816:	f7ff fc1d 	bl	8002054 <Error_Handler>
  }

  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_IT(&huart3, &rx_char3, 1);
 800281a:	2201      	movs	r2, #1
 800281c:	4904      	ldr	r1, [pc, #16]	@ (8002830 <MX_USART3_UART_Init+0x5c>)
 800281e:	4802      	ldr	r0, [pc, #8]	@ (8002828 <MX_USART3_UART_Init+0x54>)
 8002820:	f002 f9d7 	bl	8004bd2 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_Init 2 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200004a8 	.word	0x200004a8
 800282c:	40004800 	.word	0x40004800
 8002830:	200004f1 	.word	0x200004f1

08002834 <send_UART3>:

void send_UART3(const char *msg)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7fd fc91 	bl	8000164 <strlen>
 8002842:	4603      	mov	r3, r0
 8002844:	b29a      	uxth	r2, r3
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4803      	ldr	r0, [pc, #12]	@ (800285c <send_UART3+0x28>)
 800284e:	f002 f935 	bl	8004abc <HAL_UART_Transmit>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200004a8 	.word	0x200004a8

08002860 <HAL_UART_RxCpltCallback>:
  memset(rx_buffer3, 0, sizeof(rx_buffer3));
}

// Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(OUT4_GPIO_Port, OUT4_Pin); // DEBUG
 8002868:	2110      	movs	r1, #16
 800286a:	4845      	ldr	r0, [pc, #276]	@ (8002980 <HAL_UART_RxCpltCallback+0x120>)
 800286c:	f000 fe91 	bl	8003592 <HAL_GPIO_TogglePin>

  // RS232_418
  if (huart->Instance == USART1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a43      	ldr	r2, [pc, #268]	@ (8002984 <HAL_UART_RxCpltCallback+0x124>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d12a      	bne.n	80028d0 <HAL_UART_RxCpltCallback+0x70>
  {
    // Stocker le tick de réception à chaque char reçu
    last_rx_tick1 = HAL_GetTick();
 800287a:	f000 f929 	bl	8002ad0 <HAL_GetTick>
 800287e:	4603      	mov	r3, r0
 8002880:	4a41      	ldr	r2, [pc, #260]	@ (8002988 <HAL_UART_RxCpltCallback+0x128>)
 8002882:	6013      	str	r3, [r2, #0]

    if (rx_char1 != '\0' && rx_index1 < RX_BUFFER1_SIZE - 1)
 8002884:	4b41      	ldr	r3, [pc, #260]	@ (800298c <HAL_UART_RxCpltCallback+0x12c>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d010      	beq.n	80028ae <HAL_UART_RxCpltCallback+0x4e>
 800288c:	4b40      	ldr	r3, [pc, #256]	@ (8002990 <HAL_UART_RxCpltCallback+0x130>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	f5b3 7f95 	cmp.w	r3, #298	@ 0x12a
 8002894:	d80b      	bhi.n	80028ae <HAL_UART_RxCpltCallback+0x4e>
    {
      rx_buffer1[rx_index1++] = rx_char1;
 8002896:	4b3e      	ldr	r3, [pc, #248]	@ (8002990 <HAL_UART_RxCpltCallback+0x130>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	b291      	uxth	r1, r2
 800289e:	4a3c      	ldr	r2, [pc, #240]	@ (8002990 <HAL_UART_RxCpltCallback+0x130>)
 80028a0:	8011      	strh	r1, [r2, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b39      	ldr	r3, [pc, #228]	@ (800298c <HAL_UART_RxCpltCallback+0x12c>)
 80028a6:	7819      	ldrb	r1, [r3, #0]
 80028a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002994 <HAL_UART_RxCpltCallback+0x134>)
 80028aa:	5499      	strb	r1, [r3, r2]
 80028ac:	e00b      	b.n	80028c6 <HAL_UART_RxCpltCallback+0x66>
    }
    else
    {
      rx_buffer1[rx_index1] = '\0';
 80028ae:	4b38      	ldr	r3, [pc, #224]	@ (8002990 <HAL_UART_RxCpltCallback+0x130>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b37      	ldr	r3, [pc, #220]	@ (8002994 <HAL_UART_RxCpltCallback+0x134>)
 80028b6:	2100      	movs	r1, #0
 80028b8:	5499      	strb	r1, [r3, r2]
      message_complete1 = 1;
 80028ba:	4b37      	ldr	r3, [pc, #220]	@ (8002998 <HAL_UART_RxCpltCallback+0x138>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
      rx_index1 = 0;
 80028c0:	4b33      	ldr	r3, [pc, #204]	@ (8002990 <HAL_UART_RxCpltCallback+0x130>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	801a      	strh	r2, [r3, #0]
    }

    HAL_UART_Receive_IT(&huart1, &rx_char1, 1);
 80028c6:	2201      	movs	r2, #1
 80028c8:	4930      	ldr	r1, [pc, #192]	@ (800298c <HAL_UART_RxCpltCallback+0x12c>)
 80028ca:	4834      	ldr	r0, [pc, #208]	@ (800299c <HAL_UART_RxCpltCallback+0x13c>)
 80028cc:	f002 f981 	bl	8004bd2 <HAL_UART_Receive_IT>
  }

  // RS232_COM
  if (huart->Instance == USART3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a32      	ldr	r2, [pc, #200]	@ (80029a0 <HAL_UART_RxCpltCallback+0x140>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d124      	bne.n	8002924 <HAL_UART_RxCpltCallback+0xc4>
  {
    if (rx_char3 != '\r' && rx_index3 < RX_BUFFER3_SIZE - 1)
 80028da:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <HAL_UART_RxCpltCallback+0x144>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b0d      	cmp	r3, #13
 80028e0:	d00f      	beq.n	8002902 <HAL_UART_RxCpltCallback+0xa2>
 80028e2:	4b31      	ldr	r3, [pc, #196]	@ (80029a8 <HAL_UART_RxCpltCallback+0x148>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	2b62      	cmp	r3, #98	@ 0x62
 80028e8:	d80b      	bhi.n	8002902 <HAL_UART_RxCpltCallback+0xa2>
    {
      rx_buffer3[rx_index3++] = rx_char3;
 80028ea:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <HAL_UART_RxCpltCallback+0x148>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	b291      	uxth	r1, r2
 80028f2:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <HAL_UART_RxCpltCallback+0x148>)
 80028f4:	8011      	strh	r1, [r2, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b2a      	ldr	r3, [pc, #168]	@ (80029a4 <HAL_UART_RxCpltCallback+0x144>)
 80028fa:	7819      	ldrb	r1, [r3, #0]
 80028fc:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_UART_RxCpltCallback+0x14c>)
 80028fe:	5499      	strb	r1, [r3, r2]
 8002900:	e00b      	b.n	800291a <HAL_UART_RxCpltCallback+0xba>
    }
    else
    {
      rx_buffer3[rx_index3] = '\r';
 8002902:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <HAL_UART_RxCpltCallback+0x148>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	4b28      	ldr	r3, [pc, #160]	@ (80029ac <HAL_UART_RxCpltCallback+0x14c>)
 800290a:	210d      	movs	r1, #13
 800290c:	5499      	strb	r1, [r3, r2]
      message_complete3 = 1;
 800290e:	4b28      	ldr	r3, [pc, #160]	@ (80029b0 <HAL_UART_RxCpltCallback+0x150>)
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
      rx_index3 = 0;
 8002914:	4b24      	ldr	r3, [pc, #144]	@ (80029a8 <HAL_UART_RxCpltCallback+0x148>)
 8002916:	2200      	movs	r2, #0
 8002918:	801a      	strh	r2, [r3, #0]
    }

    HAL_UART_Receive_IT(&huart3, &rx_char3, 1);
 800291a:	2201      	movs	r2, #1
 800291c:	4921      	ldr	r1, [pc, #132]	@ (80029a4 <HAL_UART_RxCpltCallback+0x144>)
 800291e:	4825      	ldr	r0, [pc, #148]	@ (80029b4 <HAL_UART_RxCpltCallback+0x154>)
 8002920:	f002 f957 	bl	8004bd2 <HAL_UART_Receive_IT>
    // send_UART3("COM!"); // DEBUG
  }

  // RS485
  if (huart->Instance == USART2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a23      	ldr	r2, [pc, #140]	@ (80029b8 <HAL_UART_RxCpltCallback+0x158>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d124      	bne.n	8002978 <HAL_UART_RxCpltCallback+0x118>
  {
    if (rx_char2 != '\0' && rx_index2 < RX_BUFFER2_SIZE - 1)
 800292e:	4b23      	ldr	r3, [pc, #140]	@ (80029bc <HAL_UART_RxCpltCallback+0x15c>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00f      	beq.n	8002956 <HAL_UART_RxCpltCallback+0xf6>
 8002936:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <HAL_UART_RxCpltCallback+0x160>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	2b30      	cmp	r3, #48	@ 0x30
 800293c:	d80b      	bhi.n	8002956 <HAL_UART_RxCpltCallback+0xf6>
    {
      rx_buffer2[rx_index2++] = rx_char2;
 800293e:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <HAL_UART_RxCpltCallback+0x160>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	b291      	uxth	r1, r2
 8002946:	4a1e      	ldr	r2, [pc, #120]	@ (80029c0 <HAL_UART_RxCpltCallback+0x160>)
 8002948:	8011      	strh	r1, [r2, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <HAL_UART_RxCpltCallback+0x15c>)
 800294e:	7819      	ldrb	r1, [r3, #0]
 8002950:	4b1c      	ldr	r3, [pc, #112]	@ (80029c4 <HAL_UART_RxCpltCallback+0x164>)
 8002952:	5499      	strb	r1, [r3, r2]
 8002954:	e00b      	b.n	800296e <HAL_UART_RxCpltCallback+0x10e>
    }
    else
    {

      rx_buffer2[rx_index2] = '\0';
 8002956:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <HAL_UART_RxCpltCallback+0x160>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	4b19      	ldr	r3, [pc, #100]	@ (80029c4 <HAL_UART_RxCpltCallback+0x164>)
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]
      message_complete2 = 1;
 8002962:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_UART_RxCpltCallback+0x168>)
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
      rx_index2 = 0;
 8002968:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_UART_RxCpltCallback+0x160>)
 800296a:	2200      	movs	r2, #0
 800296c:	801a      	strh	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2, &rx_char2, 1);
 800296e:	2201      	movs	r2, #1
 8002970:	4912      	ldr	r1, [pc, #72]	@ (80029bc <HAL_UART_RxCpltCallback+0x15c>)
 8002972:	4816      	ldr	r0, [pc, #88]	@ (80029cc <HAL_UART_RxCpltCallback+0x16c>)
 8002974:	f002 f92d 	bl	8004bd2 <HAL_UART_Receive_IT>
  }
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40010c00 	.word	0x40010c00
 8002984:	40013800 	.word	0x40013800
 8002988:	200004a4 	.word	0x200004a4
 800298c:	20000371 	.word	0x20000371
 8002990:	200004a0 	.word	0x200004a0
 8002994:	20000374 	.word	0x20000374
 8002998:	20000370 	.word	0x20000370
 800299c:	20000328 	.word	0x20000328
 80029a0:	40004800 	.word	0x40004800
 80029a4:	200004f1 	.word	0x200004f1
 80029a8:	20000558 	.word	0x20000558
 80029ac:	200004f4 	.word	0x200004f4
 80029b0:	200004f0 	.word	0x200004f0
 80029b4:	200004a8 	.word	0x200004a8
 80029b8:	40004400 	.word	0x40004400
 80029bc:	200005a5 	.word	0x200005a5
 80029c0:	200005da 	.word	0x200005da
 80029c4:	200005a8 	.word	0x200005a8
 80029c8:	200005a4 	.word	0x200005a4
 80029cc:	2000055c 	.word	0x2000055c

080029d0 <Check_UART1_Timeout>:

void Check_UART1_Timeout(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  if (!message_complete1 && rx_index1 > 0)
 80029d4:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <Check_UART1_Timeout+0x54>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d120      	bne.n	8002a1e <Check_UART1_Timeout+0x4e>
 80029dc:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <Check_UART1_Timeout+0x58>)
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01c      	beq.n	8002a1e <Check_UART1_Timeout+0x4e>
  {
    if ((HAL_GetTick() - last_rx_tick1) > RX_TIMEOUT_MS)
 80029e4:	f000 f874 	bl	8002ad0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <Check_UART1_Timeout+0x5c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80029f2:	d914      	bls.n	8002a1e <Check_UART1_Timeout+0x4e>
    {

      // Sécurité : s'assurer de ne pas dépasser la taille du buffer
      if (rx_index1 >= RX_BUFFER1_SIZE)
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <Check_UART1_Timeout+0x58>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80029fc:	d303      	bcc.n	8002a06 <Check_UART1_Timeout+0x36>
      {
        rx_index1 = RX_BUFFER1_SIZE - 1;
 80029fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <Check_UART1_Timeout+0x58>)
 8002a00:	f240 122b 	movw	r2, #299	@ 0x12b
 8002a04:	801a      	strh	r2, [r3, #0]
      }

      rx_buffer1[rx_index1] = '\0'; // Fin de chaîne propre
 8002a06:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <Check_UART1_Timeout+0x58>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <Check_UART1_Timeout+0x60>)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	5499      	strb	r1, [r3, r2]
      message_complete1 = 1;        // Signal que le message est complet
 8002a12:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <Check_UART1_Timeout+0x54>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
      rx_index1 = 0;                // Réinitialisation de l'index
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <Check_UART1_Timeout+0x58>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000370 	.word	0x20000370
 8002a28:	200004a0 	.word	0x200004a0
 8002a2c:	200004a4 	.word	0x200004a4
 8002a30:	20000374 	.word	0x20000374

08002a34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a34:	f7ff fe52 	bl	80026dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a38:	480b      	ldr	r0, [pc, #44]	@ (8002a68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a3a:	490c      	ldr	r1, [pc, #48]	@ (8002a6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a40:	e002      	b.n	8002a48 <LoopCopyDataInit>

08002a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a46:	3304      	adds	r3, #4

08002a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a4c:	d3f9      	bcc.n	8002a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4e:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a50:	4c09      	ldr	r4, [pc, #36]	@ (8002a78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a54:	e001      	b.n	8002a5a <LoopFillZerobss>

08002a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a58:	3204      	adds	r2, #4

08002a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a5c:	d3fb      	bcc.n	8002a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5e:	f006 f881 	bl	8008b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a62:	f7ff f8d5 	bl	8001c10 <main>
  bx lr
 8002a66:	4770      	bx	lr
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002a70:	0800cf88 	.word	0x0800cf88
  ldr r2, =_sbss
 8002a74:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002a78:	20002114 	.word	0x20002114

08002a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC1_2_IRQHandler>
	...

08002a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a84:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <HAL_Init+0x28>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a07      	ldr	r2, [pc, #28]	@ (8002aa8 <HAL_Init+0x28>)
 8002a8a:	f043 0310 	orr.w	r3, r3, #16
 8002a8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a90:	2003      	movs	r0, #3
 8002a92:	f000 fae3 	bl	800305c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a96:	200f      	movs	r0, #15
 8002a98:	f7ff fca0 	bl	80023dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a9c:	f7ff fae4 	bl	8002068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40022000 	.word	0x40022000

08002aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_IncTick+0x1c>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <HAL_IncTick+0x20>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	4a03      	ldr	r2, [pc, #12]	@ (8002acc <HAL_IncTick+0x20>)
 8002abe:	6013      	str	r3, [r2, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	20000008 	.word	0x20000008
 8002acc:	200005dc 	.word	0x200005dc

08002ad0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad4:	4b02      	ldr	r3, [pc, #8]	@ (8002ae0 <HAL_GetTick+0x10>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	200005dc 	.word	0x200005dc

08002ae4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0be      	b.n	8002c84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fad8 	bl	80020d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f9ab 	bl	8002e84 <ADC_ConversionStop_Disable>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 8099 	bne.w	8002c72 <HAL_ADC_Init+0x18e>
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8095 	bne.w	8002c72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b50:	f023 0302 	bic.w	r3, r3, #2
 8002b54:	f043 0202 	orr.w	r2, r3, #2
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7b1b      	ldrb	r3, [r3, #12]
 8002b6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b7c:	d003      	beq.n	8002b86 <HAL_ADC_Init+0xa2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d102      	bne.n	8002b8c <HAL_ADC_Init+0xa8>
 8002b86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b8a:	e000      	b.n	8002b8e <HAL_ADC_Init+0xaa>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7d1b      	ldrb	r3, [r3, #20]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d119      	bne.n	8002bd0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7b1b      	ldrb	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	035a      	lsls	r2, r3, #13
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	4b28      	ldr	r3, [pc, #160]	@ (8002c8c <HAL_ADC_Init+0x1a8>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c00:	d003      	beq.n	8002c0a <HAL_ADC_Init+0x126>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d104      	bne.n	8002c14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	051b      	lsls	r3, r3, #20
 8002c12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	4b18      	ldr	r3, [pc, #96]	@ (8002c90 <HAL_ADC_Init+0x1ac>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d10b      	bne.n	8002c50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c4e:	e018      	b.n	8002c82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	f023 0312 	bic.w	r3, r3, #18
 8002c58:	f043 0210 	orr.w	r2, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c70:	e007      	b.n	8002c82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	ffe1f7fd 	.word	0xffe1f7fd
 8002c90:	ff1f0efe 	.word	0xff1f0efe

08002c94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x20>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e0dc      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x1da>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d81c      	bhi.n	8002cfe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b05      	subs	r3, #5
 8002cd6:	221f      	movs	r2, #31
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	4019      	ands	r1, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	3b05      	subs	r3, #5
 8002cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cfc:	e03c      	b.n	8002d78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d81c      	bhi.n	8002d40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	3b23      	subs	r3, #35	@ 0x23
 8002d18:	221f      	movs	r2, #31
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	4019      	ands	r1, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	3b23      	subs	r3, #35	@ 0x23
 8002d32:	fa00 f203 	lsl.w	r2, r0, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d3e:	e01b      	b.n	8002d78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	3b41      	subs	r3, #65	@ 0x41
 8002d52:	221f      	movs	r2, #31
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	4019      	ands	r1, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	3b41      	subs	r3, #65	@ 0x41
 8002d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b09      	cmp	r3, #9
 8002d7e:	d91c      	bls.n	8002dba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68d9      	ldr	r1, [r3, #12]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	3b1e      	subs	r3, #30
 8002d92:	2207      	movs	r2, #7
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	4019      	ands	r1, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6898      	ldr	r0, [r3, #8]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	3b1e      	subs	r3, #30
 8002dac:	fa00 f203 	lsl.w	r2, r0, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]
 8002db8:	e019      	b.n	8002dee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6919      	ldr	r1, [r3, #16]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	2207      	movs	r2, #7
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4019      	ands	r1, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6898      	ldr	r0, [r3, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	fa00 f203 	lsl.w	r2, r0, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d003      	beq.n	8002dfe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dfa:	2b11      	cmp	r3, #17
 8002dfc:	d132      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1d      	ldr	r2, [pc, #116]	@ (8002e78 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d125      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d126      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002e24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d11a      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <HAL_ADC_ConfigChannel+0x1e8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <HAL_ADC_ConfigChannel+0x1ec>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	0c9a      	lsrs	r2, r3, #18
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e44:	e002      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f9      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x1b2>
 8002e52:	e007      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	40012400 	.word	0x40012400
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	431bde83 	.word	0x431bde83

08002e84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d12e      	bne.n	8002efc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eae:	f7ff fe0f 	bl	8002ad0 <HAL_GetTick>
 8002eb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002eb4:	e01b      	b.n	8002eee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002eb6:	f7ff fe0b 	bl	8002ad0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d914      	bls.n	8002eee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d10d      	bne.n	8002eee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	f043 0210 	orr.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e007      	b.n	8002efe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d0dc      	beq.n	8002eb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f18:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f24:	4013      	ands	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3a:	4a04      	ldr	r2, [pc, #16]	@ (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	60d3      	str	r3, [r2, #12]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f54:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <__NVIC_GetPriorityGrouping+0x18>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	f003 0307 	and.w	r3, r3, #7
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	db0b      	blt.n	8002f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	4906      	ldr	r1, [pc, #24]	@ (8002fa0 <__NVIC_EnableIRQ+0x34>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	e000e100 	.word	0xe000e100

08002fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db0a      	blt.n	8002fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	490c      	ldr	r1, [pc, #48]	@ (8002ff0 <__NVIC_SetPriority+0x4c>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fcc:	e00a      	b.n	8002fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4908      	ldr	r1, [pc, #32]	@ (8002ff4 <__NVIC_SetPriority+0x50>)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3b04      	subs	r3, #4
 8002fdc:	0112      	lsls	r2, r2, #4
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	761a      	strb	r2, [r3, #24]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	@ 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f1c3 0307 	rsb	r3, r3, #7
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf28      	it	cs
 8003016:	2304      	movcs	r3, #4
 8003018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3304      	adds	r3, #4
 800301e:	2b06      	cmp	r3, #6
 8003020:	d902      	bls.n	8003028 <NVIC_EncodePriority+0x30>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3b03      	subs	r3, #3
 8003026:	e000      	b.n	800302a <NVIC_EncodePriority+0x32>
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	401a      	ands	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43d9      	mvns	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	4313      	orrs	r3, r2
         );
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff4f 	bl	8002f08 <__NVIC_SetPriorityGrouping>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003084:	f7ff ff64 	bl	8002f50 <__NVIC_GetPriorityGrouping>
 8003088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f7ff ffb2 	bl	8002ff8 <NVIC_EncodePriority>
 8003094:	4602      	mov	r2, r0
 8003096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff81 	bl	8002fa4 <__NVIC_SetPriority>
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff57 	bl	8002f6c <__NVIC_EnableIRQ>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d008      	beq.n	80030f0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e020      	b.n	8003132 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020e 	bic.w	r2, r2, #14
 80030fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	2101      	movs	r1, #1
 800311a:	fa01 f202 	lsl.w	r2, r1, r2
 800311e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d005      	beq.n	8003160 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2204      	movs	r2, #4
 8003158:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e051      	b.n	8003204 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 020e 	bic.w	r2, r2, #14
 800316e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a22      	ldr	r2, [pc, #136]	@ (8003210 <HAL_DMA_Abort_IT+0xd4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d029      	beq.n	80031de <HAL_DMA_Abort_IT+0xa2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a21      	ldr	r2, [pc, #132]	@ (8003214 <HAL_DMA_Abort_IT+0xd8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d022      	beq.n	80031da <HAL_DMA_Abort_IT+0x9e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1f      	ldr	r2, [pc, #124]	@ (8003218 <HAL_DMA_Abort_IT+0xdc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01a      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x98>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1e      	ldr	r2, [pc, #120]	@ (800321c <HAL_DMA_Abort_IT+0xe0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d012      	beq.n	80031ce <HAL_DMA_Abort_IT+0x92>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003220 <HAL_DMA_Abort_IT+0xe4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00a      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x8c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003224 <HAL_DMA_Abort_IT+0xe8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d102      	bne.n	80031c2 <HAL_DMA_Abort_IT+0x86>
 80031bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80031c0:	e00e      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031c6:	e00b      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031cc:	e008      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031d2:	e005      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031d8:	e002      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031da:	2310      	movs	r3, #16
 80031dc:	e000      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031de:	2301      	movs	r3, #1
 80031e0:	4a11      	ldr	r2, [pc, #68]	@ (8003228 <HAL_DMA_Abort_IT+0xec>)
 80031e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
    } 
  }
  return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40020008 	.word	0x40020008
 8003214:	4002001c 	.word	0x4002001c
 8003218:	40020030 	.word	0x40020030
 800321c:	40020044 	.word	0x40020044
 8003220:	40020058 	.word	0x40020058
 8003224:	4002006c 	.word	0x4002006c
 8003228:	40020000 	.word	0x40020000

0800322c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800322c:	b480      	push	{r7}
 800322e:	b08b      	sub	sp, #44	@ 0x2c
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800323a:	2300      	movs	r3, #0
 800323c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323e:	e169      	b.n	8003514 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003240:	2201      	movs	r2, #1
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	429a      	cmp	r2, r3
 800325a:	f040 8158 	bne.w	800350e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a9a      	ldr	r2, [pc, #616]	@ (80034cc <HAL_GPIO_Init+0x2a0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d05e      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
 8003268:	4a98      	ldr	r2, [pc, #608]	@ (80034cc <HAL_GPIO_Init+0x2a0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d875      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 800326e:	4a98      	ldr	r2, [pc, #608]	@ (80034d0 <HAL_GPIO_Init+0x2a4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d058      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
 8003274:	4a96      	ldr	r2, [pc, #600]	@ (80034d0 <HAL_GPIO_Init+0x2a4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d86f      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 800327a:	4a96      	ldr	r2, [pc, #600]	@ (80034d4 <HAL_GPIO_Init+0x2a8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d052      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
 8003280:	4a94      	ldr	r2, [pc, #592]	@ (80034d4 <HAL_GPIO_Init+0x2a8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d869      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 8003286:	4a94      	ldr	r2, [pc, #592]	@ (80034d8 <HAL_GPIO_Init+0x2ac>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d04c      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
 800328c:	4a92      	ldr	r2, [pc, #584]	@ (80034d8 <HAL_GPIO_Init+0x2ac>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d863      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 8003292:	4a92      	ldr	r2, [pc, #584]	@ (80034dc <HAL_GPIO_Init+0x2b0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d046      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
 8003298:	4a90      	ldr	r2, [pc, #576]	@ (80034dc <HAL_GPIO_Init+0x2b0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d85d      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 800329e:	2b12      	cmp	r3, #18
 80032a0:	d82a      	bhi.n	80032f8 <HAL_GPIO_Init+0xcc>
 80032a2:	2b12      	cmp	r3, #18
 80032a4:	d859      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 80032a6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <HAL_GPIO_Init+0x80>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	08003327 	.word	0x08003327
 80032b0:	08003301 	.word	0x08003301
 80032b4:	08003313 	.word	0x08003313
 80032b8:	08003355 	.word	0x08003355
 80032bc:	0800335b 	.word	0x0800335b
 80032c0:	0800335b 	.word	0x0800335b
 80032c4:	0800335b 	.word	0x0800335b
 80032c8:	0800335b 	.word	0x0800335b
 80032cc:	0800335b 	.word	0x0800335b
 80032d0:	0800335b 	.word	0x0800335b
 80032d4:	0800335b 	.word	0x0800335b
 80032d8:	0800335b 	.word	0x0800335b
 80032dc:	0800335b 	.word	0x0800335b
 80032e0:	0800335b 	.word	0x0800335b
 80032e4:	0800335b 	.word	0x0800335b
 80032e8:	0800335b 	.word	0x0800335b
 80032ec:	0800335b 	.word	0x0800335b
 80032f0:	08003309 	.word	0x08003309
 80032f4:	0800331d 	.word	0x0800331d
 80032f8:	4a79      	ldr	r2, [pc, #484]	@ (80034e0 <HAL_GPIO_Init+0x2b4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032fe:	e02c      	b.n	800335a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	623b      	str	r3, [r7, #32]
          break;
 8003306:	e029      	b.n	800335c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	3304      	adds	r3, #4
 800330e:	623b      	str	r3, [r7, #32]
          break;
 8003310:	e024      	b.n	800335c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	3308      	adds	r3, #8
 8003318:	623b      	str	r3, [r7, #32]
          break;
 800331a:	e01f      	b.n	800335c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	330c      	adds	r3, #12
 8003322:	623b      	str	r3, [r7, #32]
          break;
 8003324:	e01a      	b.n	800335c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800332e:	2304      	movs	r3, #4
 8003330:	623b      	str	r3, [r7, #32]
          break;
 8003332:	e013      	b.n	800335c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800333c:	2308      	movs	r3, #8
 800333e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	611a      	str	r2, [r3, #16]
          break;
 8003346:	e009      	b.n	800335c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003348:	2308      	movs	r3, #8
 800334a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	615a      	str	r2, [r3, #20]
          break;
 8003352:	e003      	b.n	800335c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003354:	2300      	movs	r3, #0
 8003356:	623b      	str	r3, [r7, #32]
          break;
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x130>
          break;
 800335a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2bff      	cmp	r3, #255	@ 0xff
 8003360:	d801      	bhi.n	8003366 <HAL_GPIO_Init+0x13a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	e001      	b.n	800336a <HAL_GPIO_Init+0x13e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2bff      	cmp	r3, #255	@ 0xff
 8003370:	d802      	bhi.n	8003378 <HAL_GPIO_Init+0x14c>
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	e002      	b.n	800337e <HAL_GPIO_Init+0x152>
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	3b08      	subs	r3, #8
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	210f      	movs	r1, #15
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	6a39      	ldr	r1, [r7, #32]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	431a      	orrs	r2, r3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80b1 	beq.w	800350e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <HAL_GPIO_Init+0x2b8>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	4a4c      	ldr	r2, [pc, #304]	@ (80034e4 <HAL_GPIO_Init+0x2b8>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6193      	str	r3, [r2, #24]
 80033b8:	4b4a      	ldr	r3, [pc, #296]	@ (80034e4 <HAL_GPIO_Init+0x2b8>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033c4:	4a48      	ldr	r2, [pc, #288]	@ (80034e8 <HAL_GPIO_Init+0x2bc>)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	3302      	adds	r3, #2
 80033cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	220f      	movs	r2, #15
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a40      	ldr	r2, [pc, #256]	@ (80034ec <HAL_GPIO_Init+0x2c0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <HAL_GPIO_Init+0x1ec>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3f      	ldr	r2, [pc, #252]	@ (80034f0 <HAL_GPIO_Init+0x2c4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00d      	beq.n	8003414 <HAL_GPIO_Init+0x1e8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3e      	ldr	r2, [pc, #248]	@ (80034f4 <HAL_GPIO_Init+0x2c8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d007      	beq.n	8003410 <HAL_GPIO_Init+0x1e4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a3d      	ldr	r2, [pc, #244]	@ (80034f8 <HAL_GPIO_Init+0x2cc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d101      	bne.n	800340c <HAL_GPIO_Init+0x1e0>
 8003408:	2303      	movs	r3, #3
 800340a:	e006      	b.n	800341a <HAL_GPIO_Init+0x1ee>
 800340c:	2304      	movs	r3, #4
 800340e:	e004      	b.n	800341a <HAL_GPIO_Init+0x1ee>
 8003410:	2302      	movs	r3, #2
 8003412:	e002      	b.n	800341a <HAL_GPIO_Init+0x1ee>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_GPIO_Init+0x1ee>
 8003418:	2300      	movs	r3, #0
 800341a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800341c:	f002 0203 	and.w	r2, r2, #3
 8003420:	0092      	lsls	r2, r2, #2
 8003422:	4093      	lsls	r3, r2
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800342a:	492f      	ldr	r1, [pc, #188]	@ (80034e8 <HAL_GPIO_Init+0x2bc>)
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	3302      	adds	r3, #2
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d006      	beq.n	8003452 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003444:	4b2d      	ldr	r3, [pc, #180]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	492c      	ldr	r1, [pc, #176]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]
 8003450:	e006      	b.n	8003460 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003452:	4b2a      	ldr	r3, [pc, #168]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	43db      	mvns	r3, r3
 800345a:	4928      	ldr	r1, [pc, #160]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 800345c:	4013      	ands	r3, r2
 800345e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800346c:	4b23      	ldr	r3, [pc, #140]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	4922      	ldr	r1, [pc, #136]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	60cb      	str	r3, [r1, #12]
 8003478:	e006      	b.n	8003488 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800347a:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	43db      	mvns	r3, r3
 8003482:	491e      	ldr	r1, [pc, #120]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 8003484:	4013      	ands	r3, r2
 8003486:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d006      	beq.n	80034a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003494:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4918      	ldr	r1, [pc, #96]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
 80034a0:	e006      	b.n	80034b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034a2:	4b16      	ldr	r3, [pc, #88]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	4914      	ldr	r1, [pc, #80]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d021      	beq.n	8003500 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034bc:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	490e      	ldr	r1, [pc, #56]	@ (80034fc <HAL_GPIO_Init+0x2d0>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e021      	b.n	800350e <HAL_GPIO_Init+0x2e2>
 80034ca:	bf00      	nop
 80034cc:	10320000 	.word	0x10320000
 80034d0:	10310000 	.word	0x10310000
 80034d4:	10220000 	.word	0x10220000
 80034d8:	10210000 	.word	0x10210000
 80034dc:	10120000 	.word	0x10120000
 80034e0:	10110000 	.word	0x10110000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40010800 	.word	0x40010800
 80034f0:	40010c00 	.word	0x40010c00
 80034f4:	40011000 	.word	0x40011000
 80034f8:	40011400 	.word	0x40011400
 80034fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003500:	4b0b      	ldr	r3, [pc, #44]	@ (8003530 <HAL_GPIO_Init+0x304>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	43db      	mvns	r3, r3
 8003508:	4909      	ldr	r1, [pc, #36]	@ (8003530 <HAL_GPIO_Init+0x304>)
 800350a:	4013      	ands	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	3301      	adds	r3, #1
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	fa22 f303 	lsr.w	r3, r2, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	f47f ae8e 	bne.w	8003240 <HAL_GPIO_Init+0x14>
  }
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	372c      	adds	r7, #44	@ 0x2c
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	40010400 	.word	0x40010400

08003534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	e001      	b.n	8003556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	807b      	strh	r3, [r7, #2]
 800356e:	4613      	mov	r3, r2
 8003570:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003572:	787b      	ldrb	r3, [r7, #1]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003578:	887a      	ldrh	r2, [r7, #2]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800357e:	e003      	b.n	8003588 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003580:	887b      	ldrh	r3, [r7, #2]
 8003582:	041a      	lsls	r2, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	611a      	str	r2, [r3, #16]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035a4:	887a      	ldrh	r2, [r7, #2]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4013      	ands	r3, r2
 80035aa:	041a      	lsls	r2, r3, #16
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43d9      	mvns	r1, r3
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	400b      	ands	r3, r1
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	611a      	str	r2, [r3, #16]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e12b      	b.n	800382e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe fdb0 	bl	8002150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	@ 0x24
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003616:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003626:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003628:	f000 fcda 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 800362c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4a81      	ldr	r2, [pc, #516]	@ (8003838 <HAL_I2C_Init+0x274>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d807      	bhi.n	8003648 <HAL_I2C_Init+0x84>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a80      	ldr	r2, [pc, #512]	@ (800383c <HAL_I2C_Init+0x278>)
 800363c:	4293      	cmp	r3, r2
 800363e:	bf94      	ite	ls
 8003640:	2301      	movls	r3, #1
 8003642:	2300      	movhi	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e006      	b.n	8003656 <HAL_I2C_Init+0x92>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a7d      	ldr	r2, [pc, #500]	@ (8003840 <HAL_I2C_Init+0x27c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	bf94      	ite	ls
 8003650:	2301      	movls	r3, #1
 8003652:	2300      	movhi	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0e7      	b.n	800382e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a78      	ldr	r2, [pc, #480]	@ (8003844 <HAL_I2C_Init+0x280>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0c9b      	lsrs	r3, r3, #18
 8003668:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a6a      	ldr	r2, [pc, #424]	@ (8003838 <HAL_I2C_Init+0x274>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d802      	bhi.n	8003698 <HAL_I2C_Init+0xd4>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	3301      	adds	r3, #1
 8003696:	e009      	b.n	80036ac <HAL_I2C_Init+0xe8>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	4a69      	ldr	r2, [pc, #420]	@ (8003848 <HAL_I2C_Init+0x284>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	3301      	adds	r3, #1
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	495c      	ldr	r1, [pc, #368]	@ (8003838 <HAL_I2C_Init+0x274>)
 80036c8:	428b      	cmp	r3, r1
 80036ca:	d819      	bhi.n	8003700 <HAL_I2C_Init+0x13c>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e59      	subs	r1, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036da:	1c59      	adds	r1, r3, #1
 80036dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036e0:	400b      	ands	r3, r1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_I2C_Init+0x138>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1e59      	subs	r1, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fa:	e051      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 80036fc:	2304      	movs	r3, #4
 80036fe:	e04f      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d111      	bne.n	800372c <HAL_I2C_Init+0x168>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1e58      	subs	r0, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e012      	b.n	8003752 <HAL_I2C_Init+0x18e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e58      	subs	r0, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	0099      	lsls	r1, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003742:	3301      	adds	r3, #1
 8003744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Init+0x196>
 8003756:	2301      	movs	r3, #1
 8003758:	e022      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10e      	bne.n	8003780 <HAL_I2C_Init+0x1bc>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1e58      	subs	r0, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	460b      	mov	r3, r1
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	440b      	add	r3, r1
 8003770:	fbb0 f3f3 	udiv	r3, r0, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800377e:	e00f      	b.n	80037a0 <HAL_I2C_Init+0x1dc>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1e58      	subs	r0, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	0099      	lsls	r1, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	fbb0 f3f3 	udiv	r3, r0, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	6809      	ldr	r1, [r1, #0]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6911      	ldr	r1, [r2, #16]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68d2      	ldr	r2, [r2, #12]
 80037da:	4311      	orrs	r1, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	000186a0 	.word	0x000186a0
 800383c:	001e847f 	.word	0x001e847f
 8003840:	003d08ff 	.word	0x003d08ff
 8003844:	431bde83 	.word	0x431bde83
 8003848:	10624dd3 	.word	0x10624dd3

0800384c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e272      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8087 	beq.w	800397a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800386c:	4b92      	ldr	r3, [pc, #584]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b04      	cmp	r3, #4
 8003876:	d00c      	beq.n	8003892 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003878:	4b8f      	ldr	r3, [pc, #572]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b08      	cmp	r3, #8
 8003882:	d112      	bne.n	80038aa <HAL_RCC_OscConfig+0x5e>
 8003884:	4b8c      	ldr	r3, [pc, #560]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003890:	d10b      	bne.n	80038aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003892:	4b89      	ldr	r3, [pc, #548]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d06c      	beq.n	8003978 <HAL_RCC_OscConfig+0x12c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d168      	bne.n	8003978 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e24c      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_OscConfig+0x76>
 80038b4:	4b80      	ldr	r3, [pc, #512]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a7f      	ldr	r2, [pc, #508]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	e02e      	b.n	8003920 <HAL_RCC_OscConfig+0xd4>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x98>
 80038ca:	4b7b      	ldr	r3, [pc, #492]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7a      	ldr	r2, [pc, #488]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b78      	ldr	r3, [pc, #480]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a77      	ldr	r2, [pc, #476]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e01d      	b.n	8003920 <HAL_RCC_OscConfig+0xd4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0xbc>
 80038ee:	4b72      	ldr	r3, [pc, #456]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a71      	ldr	r2, [pc, #452]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a6e      	ldr	r2, [pc, #440]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0xd4>
 8003908:	4b6b      	ldr	r3, [pc, #428]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 800390e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b68      	ldr	r3, [pc, #416]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a67      	ldr	r2, [pc, #412]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 800391a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800391e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7ff f8d2 	bl	8002ad0 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003930:	f7ff f8ce 	bl	8002ad0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	@ 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e200      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b5d      	ldr	r3, [pc, #372]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0xe4>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7ff f8be 	bl	8002ad0 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003958:	f7ff f8ba 	bl	8002ad0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e1ec      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396a:	4b53      	ldr	r3, [pc, #332]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x10c>
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d063      	beq.n	8003a4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003986:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003992:	4b49      	ldr	r3, [pc, #292]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b08      	cmp	r3, #8
 800399c:	d11c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x18c>
 800399e:	4b46      	ldr	r3, [pc, #280]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d116      	bne.n	80039d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039aa:	4b43      	ldr	r3, [pc, #268]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_RCC_OscConfig+0x176>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d001      	beq.n	80039c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e1c0      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4939      	ldr	r1, [pc, #228]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d6:	e03a      	b.n	8003a4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d020      	beq.n	8003a22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e0:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e6:	f7ff f873 	bl	8002ad0 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ee:	f7ff f86f 	bl	8002ad0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e1a1      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a00:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4927      	ldr	r1, [pc, #156]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]
 8003a20:	e015      	b.n	8003a4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a22:	4b26      	ldr	r3, [pc, #152]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7ff f852 	bl	8002ad0 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a30:	f7ff f84e 	bl	8002ad0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e180      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a42:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d03a      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d019      	beq.n	8003a96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a62:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a68:	f7ff f832 	bl	8002ad0 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a70:	f7ff f82e 	bl	8002ad0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e160      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a82:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab8 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f000 fafe 	bl	8004090 <RCC_Delay>
 8003a94:	e01c      	b.n	8003ad0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9c:	f7ff f818 	bl	8002ad0 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa2:	e00f      	b.n	8003ac4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7ff f814 	bl	8002ad0 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d908      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e146      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	42420000 	.word	0x42420000
 8003ac0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac4:	4b92      	ldr	r3, [pc, #584]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e9      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80a6 	beq.w	8003c2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae2:	4b8b      	ldr	r3, [pc, #556]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	4b88      	ldr	r3, [pc, #544]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4a87      	ldr	r2, [pc, #540]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	61d3      	str	r3, [r2, #28]
 8003afa:	4b85      	ldr	r3, [pc, #532]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	4b82      	ldr	r3, [pc, #520]	@ (8003d14 <HAL_RCC_OscConfig+0x4c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d118      	bne.n	8003b48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b16:	4b7f      	ldr	r3, [pc, #508]	@ (8003d14 <HAL_RCC_OscConfig+0x4c8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d14 <HAL_RCC_OscConfig+0x4c8>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b22:	f7fe ffd5 	bl	8002ad0 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2a:	f7fe ffd1 	bl	8002ad0 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b64      	cmp	r3, #100	@ 0x64
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e103      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	4b75      	ldr	r3, [pc, #468]	@ (8003d14 <HAL_RCC_OscConfig+0x4c8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d106      	bne.n	8003b5e <HAL_RCC_OscConfig+0x312>
 8003b50:	4b6f      	ldr	r3, [pc, #444]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4a6e      	ldr	r2, [pc, #440]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6213      	str	r3, [r2, #32]
 8003b5c:	e02d      	b.n	8003bba <HAL_RCC_OscConfig+0x36e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x334>
 8003b66:	4b6a      	ldr	r3, [pc, #424]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4a69      	ldr	r2, [pc, #420]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6213      	str	r3, [r2, #32]
 8003b72:	4b67      	ldr	r3, [pc, #412]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a66      	ldr	r2, [pc, #408]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	6213      	str	r3, [r2, #32]
 8003b7e:	e01c      	b.n	8003bba <HAL_RCC_OscConfig+0x36e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	d10c      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x356>
 8003b88:	4b61      	ldr	r3, [pc, #388]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4a60      	ldr	r2, [pc, #384]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	f043 0304 	orr.w	r3, r3, #4
 8003b92:	6213      	str	r3, [r2, #32]
 8003b94:	4b5e      	ldr	r3, [pc, #376]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4a5d      	ldr	r2, [pc, #372]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6213      	str	r3, [r2, #32]
 8003ba0:	e00b      	b.n	8003bba <HAL_RCC_OscConfig+0x36e>
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4a5a      	ldr	r2, [pc, #360]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	6213      	str	r3, [r2, #32]
 8003bae:	4b58      	ldr	r3, [pc, #352]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	4a57      	ldr	r2, [pc, #348]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	f023 0304 	bic.w	r3, r3, #4
 8003bb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d015      	beq.n	8003bee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe ff85 	bl	8002ad0 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fe ff81 	bl	8002ad0 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0b1      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be0:	4b4b      	ldr	r3, [pc, #300]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ee      	beq.n	8003bca <HAL_RCC_OscConfig+0x37e>
 8003bec:	e014      	b.n	8003c18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bee:	f7fe ff6f 	bl	8002ad0 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf6:	f7fe ff6b 	bl	8002ad0 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e09b      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0c:	4b40      	ldr	r3, [pc, #256]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ee      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d105      	bne.n	8003c2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	4a3b      	ldr	r2, [pc, #236]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8087 	beq.w	8003d42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c34:	4b36      	ldr	r3, [pc, #216]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d061      	beq.n	8003d04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d146      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c48:	4b33      	ldr	r3, [pc, #204]	@ (8003d18 <HAL_RCC_OscConfig+0x4cc>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe ff3f 	bl	8002ad0 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c56:	f7fe ff3b 	bl	8002ad0 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e06d      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c68:	4b29      	ldr	r3, [pc, #164]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f0      	bne.n	8003c56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c7c:	d108      	bne.n	8003c90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c7e:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4921      	ldr	r1, [pc, #132]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c90:	4b1f      	ldr	r3, [pc, #124]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a19      	ldr	r1, [r3, #32]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	491b      	ldr	r1, [pc, #108]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d18 <HAL_RCC_OscConfig+0x4cc>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cae:	f7fe ff0f 	bl	8002ad0 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb6:	f7fe ff0b 	bl	8002ad0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e03d      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cc8:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x46a>
 8003cd4:	e035      	b.n	8003d42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd6:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <HAL_RCC_OscConfig+0x4cc>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7fe fef8 	bl	8002ad0 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7fe fef4 	bl	8002ad0 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e026      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x498>
 8003d02:	e01e      	b.n	8003d42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e019      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40007000 	.word	0x40007000
 8003d18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <HAL_RCC_OscConfig+0x500>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d001      	beq.n	8003d42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021000 	.word	0x40021000

08003d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0d0      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d64:	4b6a      	ldr	r3, [pc, #424]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d910      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b67      	ldr	r3, [pc, #412]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 0207 	bic.w	r2, r3, #7
 8003d7a:	4965      	ldr	r1, [pc, #404]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b63      	ldr	r3, [pc, #396]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0b8      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dac:	4b59      	ldr	r3, [pc, #356]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a58      	ldr	r2, [pc, #352]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003db6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc4:	4b53      	ldr	r3, [pc, #332]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4a52      	ldr	r2, [pc, #328]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd0:	4b50      	ldr	r3, [pc, #320]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	494d      	ldr	r1, [pc, #308]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d040      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d115      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0e:	4b41      	ldr	r3, [pc, #260]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e073      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e06b      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2e:	4b39      	ldr	r3, [pc, #228]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f023 0203 	bic.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4936      	ldr	r1, [pc, #216]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e40:	f7fe fe46 	bl	8002ad0 <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e48:	f7fe fe42 	bl	8002ad0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e053      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 020c 	and.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d1eb      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e70:	4b27      	ldr	r3, [pc, #156]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d210      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b24      	ldr	r3, [pc, #144]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 0207 	bic.w	r2, r3, #7
 8003e86:	4922      	ldr	r1, [pc, #136]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b20      	ldr	r3, [pc, #128]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e032      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eac:	4b19      	ldr	r3, [pc, #100]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4916      	ldr	r1, [pc, #88]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eca:	4b12      	ldr	r3, [pc, #72]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	490e      	ldr	r1, [pc, #56]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ede:	f000 f821 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	490a      	ldr	r1, [pc, #40]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef0:	5ccb      	ldrb	r3, [r1, r3]
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	4a09      	ldr	r2, [pc, #36]	@ (8003f1c <HAL_RCC_ClockConfig+0x1cc>)
 8003ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003efa:	4b09      	ldr	r3, [pc, #36]	@ (8003f20 <HAL_RCC_ClockConfig+0x1d0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fa6c 	bl	80023dc <HAL_InitTick>

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40022000 	.word	0x40022000
 8003f14:	40021000 	.word	0x40021000
 8003f18:	0800cb1c 	.word	0x0800cb1c
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	20000004 	.word	0x20000004

08003f24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d002      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x30>
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d003      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0x36>
 8003f52:	e027      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f54:	4b19      	ldr	r3, [pc, #100]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8003f56:	613b      	str	r3, [r7, #16]
      break;
 8003f58:	e027      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	0c9b      	lsrs	r3, r3, #18
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	4a17      	ldr	r2, [pc, #92]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f64:	5cd3      	ldrb	r3, [r2, r3]
 8003f66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d010      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f72:	4b11      	ldr	r3, [pc, #68]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	0c5b      	lsrs	r3, r3, #17
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	4a11      	ldr	r2, [pc, #68]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f7e:	5cd3      	ldrb	r3, [r2, r3]
 8003f80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a0d      	ldr	r2, [pc, #52]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8003f86:	fb03 f202 	mul.w	r2, r3, r2
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e004      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f98:	fb02 f303 	mul.w	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	613b      	str	r3, [r7, #16]
      break;
 8003fa2:	e002      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fa4:	4b05      	ldr	r3, [pc, #20]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa6:	613b      	str	r3, [r7, #16]
      break;
 8003fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003faa:	693b      	ldr	r3, [r7, #16]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	007a1200 	.word	0x007a1200
 8003fc0:	0800cb34 	.word	0x0800cb34
 8003fc4:	0800cb44 	.word	0x0800cb44
 8003fc8:	003d0900 	.word	0x003d0900

08003fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd0:	4b02      	ldr	r3, [pc, #8]	@ (8003fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	20000000 	.word	0x20000000

08003fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fe4:	f7ff fff2 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b05      	ldr	r3, [pc, #20]	@ (8004000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4903      	ldr	r1, [pc, #12]	@ (8004004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40021000 	.word	0x40021000
 8004004:	0800cb2c 	.word	0x0800cb2c

08004008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800400c:	f7ff ffde 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	0adb      	lsrs	r3, r3, #11
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4903      	ldr	r1, [pc, #12]	@ (800402c <HAL_RCC_GetPCLK2Freq+0x24>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40021000 	.word	0x40021000
 800402c:	0800cb2c 	.word	0x0800cb2c

08004030 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	220f      	movs	r2, #15
 800403e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004040:	4b11      	ldr	r3, [pc, #68]	@ (8004088 <HAL_RCC_GetClockConfig+0x58>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0203 	and.w	r2, r3, #3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800404c:	4b0e      	ldr	r3, [pc, #56]	@ (8004088 <HAL_RCC_GetClockConfig+0x58>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCC_GetClockConfig+0x58>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004064:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <HAL_RCC_GetClockConfig+0x58>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	08db      	lsrs	r3, r3, #3
 800406a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004072:	4b06      	ldr	r3, [pc, #24]	@ (800408c <HAL_RCC_GetClockConfig+0x5c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0207 	and.w	r2, r3, #7
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	40021000 	.word	0x40021000
 800408c:	40022000 	.word	0x40022000

08004090 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004098:	4b0a      	ldr	r3, [pc, #40]	@ (80040c4 <RCC_Delay+0x34>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0a      	ldr	r2, [pc, #40]	@ (80040c8 <RCC_Delay+0x38>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	0a5b      	lsrs	r3, r3, #9
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040ac:	bf00      	nop
  }
  while (Delay --);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1e5a      	subs	r2, r3, #1
 80040b2:	60fa      	str	r2, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f9      	bne.n	80040ac <RCC_Delay+0x1c>
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	20000000 	.word	0x20000000
 80040c8:	10624dd3 	.word	0x10624dd3

080040cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d07d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ec:	4b4f      	ldr	r3, [pc, #316]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b4c      	ldr	r3, [pc, #304]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4a4b      	ldr	r2, [pc, #300]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004102:	61d3      	str	r3, [r2, #28]
 8004104:	4b49      	ldr	r3, [pc, #292]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004110:	2301      	movs	r3, #1
 8004112:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	4b46      	ldr	r3, [pc, #280]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d118      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004120:	4b43      	ldr	r3, [pc, #268]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a42      	ldr	r2, [pc, #264]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412c:	f7fe fcd0 	bl	8002ad0 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	e008      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fe fccc 	bl	8002ad0 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	@ 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e06d      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004146:	4b3a      	ldr	r3, [pc, #232]	@ (8004230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004152:	4b36      	ldr	r3, [pc, #216]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d02e      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	429a      	cmp	r2, r3
 800416e:	d027      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004170:	4b2e      	ldr	r3, [pc, #184]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004178:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800417a:	4b2e      	ldr	r3, [pc, #184]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004180:	4b2c      	ldr	r3, [pc, #176]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004186:	4a29      	ldr	r2, [pc, #164]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d014      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004196:	f7fe fc9b 	bl	8002ad0 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fe fc97 	bl	8002ad0 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e036      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b4:	4b1d      	ldr	r3, [pc, #116]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ee      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041c0:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4917      	ldr	r1, [pc, #92]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d8:	4b14      	ldr	r3, [pc, #80]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	4a13      	ldr	r2, [pc, #76]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041f0:	4b0e      	ldr	r3, [pc, #56]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	490b      	ldr	r1, [pc, #44]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800420e:	4b07      	ldr	r3, [pc, #28]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	4904      	ldr	r1, [pc, #16]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
 8004230:	40007000 	.word	0x40007000
 8004234:	42420440 	.word	0x42420440

08004238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e041      	b.n	80042ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fd ffc6 	bl	80021f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f000 fa5c 	bl	8004734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e03a      	b.n	8004366 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a18      	ldr	r2, [pc, #96]	@ (8004370 <HAL_TIM_Base_Start_IT+0x98>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00e      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x58>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800431a:	d009      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x58>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a14      	ldr	r2, [pc, #80]	@ (8004374 <HAL_TIM_Base_Start_IT+0x9c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x58>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a13      	ldr	r2, [pc, #76]	@ (8004378 <HAL_TIM_Base_Start_IT+0xa0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d111      	bne.n	8004354 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b06      	cmp	r3, #6
 8004340:	d010      	beq.n	8004364 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0201 	orr.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004352:	e007      	b.n	8004364 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800

0800437c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d020      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01b      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0202 	mvn.w	r2, #2
 80043b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f998 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 80043cc:	e005      	b.n	80043da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f98b 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f99a 	bl	800470e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d020      	beq.n	800442c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01b      	beq.n	800442c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0204 	mvn.w	r2, #4
 80043fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f972 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f965 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f974 	bl	800470e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d020      	beq.n	8004478 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01b      	beq.n	8004478 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0208 	mvn.w	r2, #8
 8004448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2204      	movs	r2, #4
 800444e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f94c 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f93f 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f94e 	bl	800470e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	d020      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01b      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0210 	mvn.w	r2, #16
 8004494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2208      	movs	r2, #8
 800449a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f926 	bl	80046fc <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f919 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f928 	bl	800470e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00c      	beq.n	80044e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0201 	mvn.w	r2, #1
 80044e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fd fda6 	bl	8002034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00c      	beq.n	800450c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa7f 	bl	8004a0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00c      	beq.n	8004530 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8f8 	bl	8004720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0220 	mvn.w	r2, #32
 800454c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fa52 	bl	80049f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIM_ConfigClockSource+0x1c>
 8004574:	2302      	movs	r3, #2
 8004576:	e0b4      	b.n	80046e2 <HAL_TIM_ConfigClockSource+0x186>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800459e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b0:	d03e      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0xd4>
 80045b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b6:	f200 8087 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045be:	f000 8086 	beq.w	80046ce <HAL_TIM_ConfigClockSource+0x172>
 80045c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c6:	d87f      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b70      	cmp	r3, #112	@ 0x70
 80045ca:	d01a      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0xa6>
 80045cc:	2b70      	cmp	r3, #112	@ 0x70
 80045ce:	d87b      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b60      	cmp	r3, #96	@ 0x60
 80045d2:	d050      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x11a>
 80045d4:	2b60      	cmp	r3, #96	@ 0x60
 80045d6:	d877      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b50      	cmp	r3, #80	@ 0x50
 80045da:	d03c      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0xfa>
 80045dc:	2b50      	cmp	r3, #80	@ 0x50
 80045de:	d873      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045e0:	2b40      	cmp	r3, #64	@ 0x40
 80045e2:	d058      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x13a>
 80045e4:	2b40      	cmp	r3, #64	@ 0x40
 80045e6:	d86f      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045e8:	2b30      	cmp	r3, #48	@ 0x30
 80045ea:	d064      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 80045ec:	2b30      	cmp	r3, #48	@ 0x30
 80045ee:	d86b      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d060      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d867      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d05c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d05a      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	e062      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004612:	f000 f974 	bl	80048fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	609a      	str	r2, [r3, #8]
      break;
 800462e:	e04f      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004640:	f000 f95d 	bl	80048fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004652:	609a      	str	r2, [r3, #8]
      break;
 8004654:	e03c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004662:	461a      	mov	r2, r3
 8004664:	f000 f8d4 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2150      	movs	r1, #80	@ 0x50
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f92b 	bl	80048ca <TIM_ITRx_SetConfig>
      break;
 8004674:	e02c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004682:	461a      	mov	r2, r3
 8004684:	f000 f8f2 	bl	800486c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2160      	movs	r1, #96	@ 0x60
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f91b 	bl	80048ca <TIM_ITRx_SetConfig>
      break;
 8004694:	e01c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 f8b4 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2140      	movs	r1, #64	@ 0x40
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f90b 	bl	80048ca <TIM_ITRx_SetConfig>
      break;
 80046b4:	e00c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f000 f902 	bl	80048ca <TIM_ITRx_SetConfig>
      break;
 80046c6:	e003      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      break;
 80046cc:	e000      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr
	...

08004734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a2f      	ldr	r2, [pc, #188]	@ (8004804 <TIM_Base_SetConfig+0xd0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00b      	beq.n	8004764 <TIM_Base_SetConfig+0x30>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004752:	d007      	beq.n	8004764 <TIM_Base_SetConfig+0x30>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a2c      	ldr	r2, [pc, #176]	@ (8004808 <TIM_Base_SetConfig+0xd4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_Base_SetConfig+0x30>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a2b      	ldr	r2, [pc, #172]	@ (800480c <TIM_Base_SetConfig+0xd8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a22      	ldr	r2, [pc, #136]	@ (8004804 <TIM_Base_SetConfig+0xd0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <TIM_Base_SetConfig+0x62>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004784:	d007      	beq.n	8004796 <TIM_Base_SetConfig+0x62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1f      	ldr	r2, [pc, #124]	@ (8004808 <TIM_Base_SetConfig+0xd4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_Base_SetConfig+0x62>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <TIM_Base_SetConfig+0xd8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d108      	bne.n	80047a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800479c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004804 <TIM_Base_SetConfig+0xd0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d103      	bne.n	80047dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f023 0201 	bic.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]
  }
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800

08004810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f023 0201 	bic.w	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800483a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 030a 	bic.w	r3, r3, #10
 800484c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f023 0210 	bic.w	r2, r3, #16
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	031b      	lsls	r3, r3, #12
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	621a      	str	r2, [r3, #32]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f043 0307 	orr.w	r3, r3, #7
 80048ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	609a      	str	r2, [r3, #8]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr

080048fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048fe:	b480      	push	{r7}
 8004900:	b087      	sub	sp, #28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004918:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	021a      	lsls	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	431a      	orrs	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4313      	orrs	r3, r2
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	609a      	str	r2, [r3, #8]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004950:	2302      	movs	r3, #2
 8004952:	e046      	b.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a0:	d009      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a12      	ldr	r2, [pc, #72]	@ (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a10      	ldr	r2, [pc, #64]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d10c      	bne.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40000400 	.word	0x40000400
 80049f4:	40000800 	.word	0x40000800

080049f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e042      	b.n	8004ab4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fd fbf2 	bl	800222c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	@ 0x24
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fdb7 	bl	80055d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	@ 0x28
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d175      	bne.n	8004bc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_UART_Transmit+0x2c>
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e06e      	b.n	8004bca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2221      	movs	r2, #33	@ 0x21
 8004af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004afa:	f7fd ffe9 	bl	8002ad0 <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	88fa      	ldrh	r2, [r7, #6]
 8004b0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b14:	d108      	bne.n	8004b28 <HAL_UART_Transmit+0x6c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	e003      	b.n	8004b30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b30:	e02e      	b.n	8004b90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2180      	movs	r1, #128	@ 0x80
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fb1c 	bl	800517a <UART_WaitOnFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e03a      	b.n	8004bca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	e007      	b.n	8004b82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	781a      	ldrb	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1cb      	bne.n	8004b32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2140      	movs	r1, #64	@ 0x40
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fae8 	bl	800517a <UART_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e006      	b.n	8004bca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e000      	b.n	8004bca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
  }
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d112      	bne.n	8004c12 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_UART_Receive_IT+0x26>
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e00b      	b.n	8004c14 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	461a      	mov	r2, r3
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fb0f 	bl	800522c <UART_Start_Receive_IT>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	e000      	b.n	8004c14 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
  }
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b0ba      	sub	sp, #232	@ 0xe8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_UART_IRQHandler+0x66>
 8004c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fbec 	bl	8005458 <UART_Receive_IT>
      return;
 8004c80:	e25b      	b.n	800513a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80de 	beq.w	8004e48 <HAL_UART_IRQHandler+0x22c>
 8004c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80d1 	beq.w	8004e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <HAL_UART_IRQHandler+0xae>
 8004cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc2:	f043 0201 	orr.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <HAL_UART_IRQHandler+0xd2>
 8004cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce6:	f043 0202 	orr.w	r2, r3, #2
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <HAL_UART_IRQHandler+0xf6>
 8004cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d011      	beq.n	8004d42 <HAL_UART_IRQHandler+0x126>
 8004d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3a:	f043 0208 	orr.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 81f2 	beq.w	8005130 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_UART_IRQHandler+0x14e>
 8004d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fb77 	bl	8005458 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d103      	bne.n	8004d96 <HAL_UART_IRQHandler+0x17a>
 8004d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d04f      	beq.n	8004e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fa81 	bl	800529e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d041      	beq.n	8004e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3314      	adds	r3, #20
 8004db0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1d9      	bne.n	8004daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d013      	beq.n	8004e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e02:	4a7e      	ldr	r2, [pc, #504]	@ (8004ffc <HAL_UART_IRQHandler+0x3e0>)
 8004e04:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe f996 	bl	800313c <HAL_DMA_Abort_IT>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d016      	beq.n	8004e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e20:	4610      	mov	r0, r2
 8004e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e24:	e00e      	b.n	8004e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f993 	bl	8005152 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	e00a      	b.n	8004e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f98f 	bl	8005152 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	e006      	b.n	8004e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f98b 	bl	8005152 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e42:	e175      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	bf00      	nop
    return;
 8004e46:	e173      	b.n	8005130 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	f040 814f 	bne.w	80050f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8148 	beq.w	80050f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8141 	beq.w	80050f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 80b6 	beq.w	8005000 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8145 	beq.w	8005134 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	f080 813e 	bcs.w	8005134 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ebe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	f000 8088 	beq.w	8004fdc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ee6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ef8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004efc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1d9      	bne.n	8004ecc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3314      	adds	r3, #20
 8004f38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e1      	bne.n	8004f18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3314      	adds	r3, #20
 8004f5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3314      	adds	r3, #20
 8004f74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e3      	bne.n	8004f54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fac:	f023 0310 	bic.w	r3, r3, #16
 8004fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fbe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fc0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e3      	bne.n	8004f9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe f875 	bl	80030c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f8b6 	bl	8005164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ff8:	e09c      	b.n	8005134 <HAL_UART_IRQHandler+0x518>
 8004ffa:	bf00      	nop
 8004ffc:	08005363 	.word	0x08005363
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005008:	b29b      	uxth	r3, r3
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 808e 	beq.w	8005138 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800501c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8089 	beq.w	8005138 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	330c      	adds	r3, #12
 800502c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800503c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800504a:	647a      	str	r2, [r7, #68]	@ 0x44
 800504c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005050:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e3      	bne.n	8005026 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3314      	adds	r3, #20
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	623b      	str	r3, [r7, #32]
   return(result);
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3314      	adds	r3, #20
 800507e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005082:	633a      	str	r2, [r7, #48]	@ 0x30
 8005084:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e3      	bne.n	800505e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	330c      	adds	r3, #12
 80050aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0310 	bic.w	r3, r3, #16
 80050ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	330c      	adds	r3, #12
 80050c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050c8:	61fa      	str	r2, [r7, #28]
 80050ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	69b9      	ldr	r1, [r7, #24]
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	617b      	str	r3, [r7, #20]
   return(result);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e3      	bne.n	80050a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f83b 	bl	8005164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050ee:	e023      	b.n	8005138 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d009      	beq.n	8005110 <HAL_UART_IRQHandler+0x4f4>
 80050fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f93e 	bl	800538a <UART_Transmit_IT>
    return;
 800510e:	e014      	b.n	800513a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00e      	beq.n	800513a <HAL_UART_IRQHandler+0x51e>
 800511c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f97d 	bl	8005428 <UART_EndTransmit_IT>
    return;
 800512e:	e004      	b.n	800513a <HAL_UART_IRQHandler+0x51e>
    return;
 8005130:	bf00      	nop
 8005132:	e002      	b.n	800513a <HAL_UART_IRQHandler+0x51e>
      return;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <HAL_UART_IRQHandler+0x51e>
      return;
 8005138:	bf00      	nop
  }
}
 800513a:	37e8      	adds	r7, #232	@ 0xe8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b086      	sub	sp, #24
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	4613      	mov	r3, r2
 8005188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518a:	e03b      	b.n	8005204 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d037      	beq.n	8005204 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005194:	f7fd fc9c 	bl	8002ad0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	6a3a      	ldr	r2, [r7, #32]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d302      	bcc.n	80051aa <UART_WaitOnFlagUntilTimeout+0x30>
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e03a      	b.n	8005224 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d023      	beq.n	8005204 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b80      	cmp	r3, #128	@ 0x80
 80051c0:	d020      	beq.n	8005204 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b40      	cmp	r3, #64	@ 0x40
 80051c6:	d01d      	beq.n	8005204 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d116      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f856 	bl	800529e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2208      	movs	r2, #8
 80051f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e00f      	b.n	8005224 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	bf0c      	ite	eq
 8005214:	2301      	moveq	r3, #1
 8005216:	2300      	movne	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	429a      	cmp	r2, r3
 8005220:	d0b4      	beq.n	800518c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	88fa      	ldrh	r2, [r7, #6]
 800524a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2222      	movs	r2, #34	@ 0x22
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005270:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0201 	orr.w	r2, r2, #1
 8005280:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0220 	orr.w	r2, r2, #32
 8005290:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800529e:	b480      	push	{r7}
 80052a0:	b095      	sub	sp, #84	@ 0x54
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	330c      	adds	r3, #12
 80052ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80052c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e5      	bne.n	80052a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3314      	adds	r3, #20
 80052e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3314      	adds	r3, #20
 80052f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	2b01      	cmp	r3, #1
 8005314:	d119      	bne.n	800534a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	647b      	str	r3, [r7, #68]	@ 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005336:	61ba      	str	r2, [r7, #24]
 8005338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005358:	bf00      	nop
 800535a:	3754      	adds	r7, #84	@ 0x54
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff fee8 	bl	8005152 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b21      	cmp	r3, #33	@ 0x21
 800539c:	d13e      	bne.n	800541c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053a6:	d114      	bne.n	80053d2 <UART_Transmit_IT+0x48>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d110      	bne.n	80053d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	1c9a      	adds	r2, r3, #2
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	621a      	str	r2, [r3, #32]
 80053d0:	e008      	b.n	80053e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6211      	str	r1, [r2, #32]
 80053dc:	781a      	ldrb	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4619      	mov	r1, r3
 80053f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10f      	bne.n	8005418 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005406:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005416:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr

08005428 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800543e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff fe79 	bl	8005140 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08c      	sub	sp, #48	@ 0x30
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b22      	cmp	r3, #34	@ 0x22
 800546a:	f040 80ae 	bne.w	80055ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005476:	d117      	bne.n	80054a8 <UART_Receive_IT+0x50>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d113      	bne.n	80054a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005480:	2300      	movs	r3, #0
 8005482:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005496:	b29a      	uxth	r2, r3
 8005498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80054a6:	e026      	b.n	80054f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ba:	d007      	beq.n	80054cc <UART_Receive_IT+0x74>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <UART_Receive_IT+0x82>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	e008      	b.n	80054ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29b      	uxth	r3, r3
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	4619      	mov	r1, r3
 8005504:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005506:	2b00      	cmp	r3, #0
 8005508:	d15d      	bne.n	80055c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0220 	bic.w	r2, r2, #32
 8005518:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005528:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0201 	bic.w	r2, r2, #1
 8005538:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554c:	2b01      	cmp	r3, #1
 800554e:	d135      	bne.n	80055bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	613b      	str	r3, [r7, #16]
   return(result);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f023 0310 	bic.w	r3, r3, #16
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005576:	623a      	str	r2, [r7, #32]
 8005578:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	69f9      	ldr	r1, [r7, #28]
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	61bb      	str	r3, [r7, #24]
   return(result);
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e5      	bne.n	8005556 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b10      	cmp	r3, #16
 8005596:	d10a      	bne.n	80055ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff fdd5 	bl	8005164 <HAL_UARTEx_RxEventCallback>
 80055ba:	e002      	b.n	80055c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fd f94f 	bl	8002860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e002      	b.n	80055cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3730      	adds	r7, #48	@ 0x30
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800560e:	f023 030c 	bic.w	r3, r3, #12
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	430b      	orrs	r3, r1
 800561a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2c      	ldr	r2, [pc, #176]	@ (80056e8 <UART_SetConfig+0x114>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d103      	bne.n	8005644 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800563c:	f7fe fce4 	bl	8004008 <HAL_RCC_GetPCLK2Freq>
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	e002      	b.n	800564a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005644:	f7fe fccc 	bl	8003fe0 <HAL_RCC_GetPCLK1Freq>
 8005648:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009a      	lsls	r2, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	4a22      	ldr	r2, [pc, #136]	@ (80056ec <UART_SetConfig+0x118>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	0119      	lsls	r1, r3, #4
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009a      	lsls	r2, r3, #2
 8005674:	441a      	add	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005680:	4b1a      	ldr	r3, [pc, #104]	@ (80056ec <UART_SetConfig+0x118>)
 8005682:	fba3 0302 	umull	r0, r3, r3, r2
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	2064      	movs	r0, #100	@ 0x64
 800568a:	fb00 f303 	mul.w	r3, r0, r3
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	3332      	adds	r3, #50	@ 0x32
 8005694:	4a15      	ldr	r2, [pc, #84]	@ (80056ec <UART_SetConfig+0x118>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056a0:	4419      	add	r1, r3
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009a      	lsls	r2, r3, #2
 80056ac:	441a      	add	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056b8:	4b0c      	ldr	r3, [pc, #48]	@ (80056ec <UART_SetConfig+0x118>)
 80056ba:	fba3 0302 	umull	r0, r3, r3, r2
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	2064      	movs	r0, #100	@ 0x64
 80056c2:	fb00 f303 	mul.w	r3, r0, r3
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	3332      	adds	r3, #50	@ 0x32
 80056cc:	4a07      	ldr	r2, [pc, #28]	@ (80056ec <UART_SetConfig+0x118>)
 80056ce:	fba2 2303 	umull	r2, r3, r2, r3
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	f003 020f 	and.w	r2, r3, #15
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	440a      	add	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40013800 	.word	0x40013800
 80056ec:	51eb851f 	.word	0x51eb851f

080056f0 <__NVIC_SetPriority>:
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	4603      	mov	r3, r0
 80056f8:	6039      	str	r1, [r7, #0]
 80056fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005700:	2b00      	cmp	r3, #0
 8005702:	db0a      	blt.n	800571a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	b2da      	uxtb	r2, r3
 8005708:	490c      	ldr	r1, [pc, #48]	@ (800573c <__NVIC_SetPriority+0x4c>)
 800570a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570e:	0112      	lsls	r2, r2, #4
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	440b      	add	r3, r1
 8005714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005718:	e00a      	b.n	8005730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	b2da      	uxtb	r2, r3
 800571e:	4908      	ldr	r1, [pc, #32]	@ (8005740 <__NVIC_SetPriority+0x50>)
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	3b04      	subs	r3, #4
 8005728:	0112      	lsls	r2, r2, #4
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	440b      	add	r3, r1
 800572e:	761a      	strb	r2, [r3, #24]
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000e100 	.word	0xe000e100
 8005740:	e000ed00 	.word	0xe000ed00

08005744 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005748:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <SysTick_Handler+0x1c>)
 800574a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800574c:	f001 fd38 	bl	80071c0 <xTaskGetSchedulerState>
 8005750:	4603      	mov	r3, r0
 8005752:	2b01      	cmp	r3, #1
 8005754:	d001      	beq.n	800575a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005756:	f002 fadf 	bl	8007d18 <xPortSysTickHandler>
  }
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	e000e010 	.word	0xe000e010

08005764 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005768:	2100      	movs	r1, #0
 800576a:	f06f 0004 	mvn.w	r0, #4
 800576e:	f7ff ffbf 	bl	80056f0 <__NVIC_SetPriority>
#endif
}
 8005772:	bf00      	nop
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800577e:	f3ef 8305 	mrs	r3, IPSR
 8005782:	603b      	str	r3, [r7, #0]
  return(result);
 8005784:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800578a:	f06f 0305 	mvn.w	r3, #5
 800578e:	607b      	str	r3, [r7, #4]
 8005790:	e00c      	b.n	80057ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005792:	4b09      	ldr	r3, [pc, #36]	@ (80057b8 <osKernelInitialize+0x40>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800579a:	4b07      	ldr	r3, [pc, #28]	@ (80057b8 <osKernelInitialize+0x40>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	e002      	b.n	80057ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80057a6:	f04f 33ff 	mov.w	r3, #4294967295
 80057aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057ac:	687b      	ldr	r3, [r7, #4]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	200005e0 	.word	0x200005e0

080057bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c2:	f3ef 8305 	mrs	r3, IPSR
 80057c6:	603b      	str	r3, [r7, #0]
  return(result);
 80057c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80057ce:	f06f 0305 	mvn.w	r3, #5
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	e010      	b.n	80057f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <osKernelStart+0x48>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d109      	bne.n	80057f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057de:	f7ff ffc1 	bl	8005764 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057e2:	4b08      	ldr	r3, [pc, #32]	@ (8005804 <osKernelStart+0x48>)
 80057e4:	2202      	movs	r2, #2
 80057e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80057e8:	f001 f88a 	bl	8006900 <vTaskStartScheduler>
      stat = osOK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	607b      	str	r3, [r7, #4]
 80057f0:	e002      	b.n	80057f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80057f2:	f04f 33ff 	mov.w	r3, #4294967295
 80057f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057f8:	687b      	ldr	r3, [r7, #4]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	200005e0 	.word	0x200005e0

08005808 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b08e      	sub	sp, #56	@ 0x38
 800580c:	af04      	add	r7, sp, #16
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005814:	2300      	movs	r3, #0
 8005816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005818:	f3ef 8305 	mrs	r3, IPSR
 800581c:	617b      	str	r3, [r7, #20]
  return(result);
 800581e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005820:	2b00      	cmp	r3, #0
 8005822:	d17e      	bne.n	8005922 <osThreadNew+0x11a>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d07b      	beq.n	8005922 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800582a:	2380      	movs	r3, #128	@ 0x80
 800582c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800582e:	2318      	movs	r3, #24
 8005830:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005836:	f04f 33ff 	mov.w	r3, #4294967295
 800583a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d045      	beq.n	80058ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <osThreadNew+0x48>
        name = attr->name;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <osThreadNew+0x6e>
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b38      	cmp	r3, #56	@ 0x38
 8005868:	d805      	bhi.n	8005876 <osThreadNew+0x6e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <osThreadNew+0x72>
        return (NULL);
 8005876:	2300      	movs	r3, #0
 8005878:	e054      	b.n	8005924 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00e      	beq.n	80058b0 <osThreadNew+0xa8>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2ba7      	cmp	r3, #167	@ 0xa7
 8005898:	d90a      	bls.n	80058b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d006      	beq.n	80058b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <osThreadNew+0xa8>
        mem = 1;
 80058aa:	2301      	movs	r3, #1
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	e010      	b.n	80058d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10c      	bne.n	80058d2 <osThreadNew+0xca>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d108      	bne.n	80058d2 <osThreadNew+0xca>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <osThreadNew+0xca>
          mem = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	e001      	b.n	80058d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d110      	bne.n	80058fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058e0:	9202      	str	r2, [sp, #8]
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	6a3a      	ldr	r2, [r7, #32]
 80058ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fe12 	bl	8006518 <xTaskCreateStatic>
 80058f4:	4603      	mov	r3, r0
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	e013      	b.n	8005922 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d110      	bne.n	8005922 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	b29a      	uxth	r2, r3
 8005904:	f107 0310 	add.w	r3, r7, #16
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fe60 	bl	80065d8 <xTaskCreate>
 8005918:	4603      	mov	r3, r0
 800591a:	2b01      	cmp	r3, #1
 800591c:	d001      	beq.n	8005922 <osThreadNew+0x11a>
            hTask = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005922:	693b      	ldr	r3, [r7, #16]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3728      	adds	r7, #40	@ 0x28
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005934:	f3ef 8305 	mrs	r3, IPSR
 8005938:	60bb      	str	r3, [r7, #8]
  return(result);
 800593a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <osDelay+0x1c>
    stat = osErrorISR;
 8005940:	f06f 0305 	mvn.w	r3, #5
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e007      	b.n	8005958 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 ff9e 	bl	8006894 <vTaskDelay>
    }
  }

  return (stat);
 8005958:	68fb      	ldr	r3, [r7, #12]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a06      	ldr	r2, [pc, #24]	@ (800598c <vApplicationGetIdleTaskMemory+0x28>)
 8005974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	4a05      	ldr	r2, [pc, #20]	@ (8005990 <vApplicationGetIdleTaskMemory+0x2c>)
 800597a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2280      	movs	r2, #128	@ 0x80
 8005980:	601a      	str	r2, [r3, #0]
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr
 800598c:	200005e4 	.word	0x200005e4
 8005990:	2000068c 	.word	0x2000068c

08005994 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4a07      	ldr	r2, [pc, #28]	@ (80059c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80059a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4a06      	ldr	r2, [pc, #24]	@ (80059c4 <vApplicationGetTimerTaskMemory+0x30>)
 80059aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059b2:	601a      	str	r2, [r3, #0]
}
 80059b4:	bf00      	nop
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	2000088c 	.word	0x2000088c
 80059c4:	20000934 	.word	0x20000934

080059c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f103 0208 	add.w	r2, r3, #8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f04f 32ff 	mov.w	r2, #4294967295
 80059e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f103 0208 	add.w	r2, r3, #8
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f103 0208 	add.w	r2, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr

08005a06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr

08005a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
}
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d103      	bne.n	8005a84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e00c      	b.n	8005a9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3308      	adds	r3, #8
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e002      	b.n	8005a92 <vListInsert+0x2e>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d2f6      	bcs.n	8005a8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]
}
 8005aca:	bf00      	nop
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6892      	ldr	r2, [r2, #8]
 8005aea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6852      	ldr	r2, [r2, #4]
 8005af4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d103      	bne.n	8005b08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	1e5a      	subs	r2, r3, #1
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
	...

08005b28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10b      	bne.n	8005b54 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b54:	f002 f862 	bl	8007c1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	441a      	add	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b84:	3b01      	subs	r3, #1
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	441a      	add	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	22ff      	movs	r2, #255	@ 0xff
 8005b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	22ff      	movs	r2, #255	@ 0xff
 8005ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d114      	bne.n	8005bd4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01a      	beq.n	8005be8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3310      	adds	r3, #16
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 f93c 	bl	8006e34 <xTaskRemoveFromEventList>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d012      	beq.n	8005be8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf8 <xQueueGenericReset+0xd0>)
 8005bc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	e009      	b.n	8005be8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3310      	adds	r3, #16
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff fef5 	bl	80059c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3324      	adds	r3, #36	@ 0x24
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fef0 	bl	80059c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005be8:	f002 f848 	bl	8007c7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bec:	2301      	movs	r3, #1
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08e      	sub	sp, #56	@ 0x38
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10b      	bne.n	8005c28 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	e7fd      	b.n	8005c24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10b      	bne.n	8005c46 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <xQueueGenericCreateStatic+0x56>
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <xQueueGenericCreateStatic+0x5a>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <xQueueGenericCreateStatic+0x5c>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	623b      	str	r3, [r7, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <xQueueGenericCreateStatic+0x84>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <xQueueGenericCreateStatic+0x88>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <xQueueGenericCreateStatic+0x8a>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	61fb      	str	r3, [r7, #28]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ca2:	2350      	movs	r3, #80	@ 0x50
 8005ca4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b50      	cmp	r3, #80	@ 0x50
 8005caa:	d00b      	beq.n	8005cc4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	61bb      	str	r3, [r7, #24]
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	e7fd      	b.n	8005cc0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cc4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00d      	beq.n	8005cec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cd8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f805 	bl	8005cf6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3730      	adds	r7, #48	@ 0x30
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e002      	b.n	8005d18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d24:	2101      	movs	r1, #1
 8005d26:	69b8      	ldr	r0, [r7, #24]
 8005d28:	f7ff fefe 	bl	8005b28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	78fa      	ldrb	r2, [r7, #3]
 8005d30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08e      	sub	sp, #56	@ 0x38
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10b      	bne.n	8005d70 <xQueueGenericSend+0x34>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d6a:	bf00      	nop
 8005d6c:	bf00      	nop
 8005d6e:	e7fd      	b.n	8005d6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <xQueueGenericSend+0x42>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <xQueueGenericSend+0x46>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <xQueueGenericSend+0x48>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10b      	bne.n	8005da0 <xQueueGenericSend+0x64>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	e7fd      	b.n	8005d9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d103      	bne.n	8005dae <xQueueGenericSend+0x72>
 8005da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <xQueueGenericSend+0x76>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <xQueueGenericSend+0x78>
 8005db2:	2300      	movs	r3, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10b      	bne.n	8005dd0 <xQueueGenericSend+0x94>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	623b      	str	r3, [r7, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	bf00      	nop
 8005dce:	e7fd      	b.n	8005dcc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dd0:	f001 f9f6 	bl	80071c0 <xTaskGetSchedulerState>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <xQueueGenericSend+0xa4>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <xQueueGenericSend+0xa8>
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <xQueueGenericSend+0xaa>
 8005de4:	2300      	movs	r3, #0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10b      	bne.n	8005e02 <xQueueGenericSend+0xc6>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	61fb      	str	r3, [r7, #28]
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	e7fd      	b.n	8005dfe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e02:	f001 ff0b 	bl	8007c1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <xQueueGenericSend+0xdc>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d129      	bne.n	8005e6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e1e:	f000 fa0f 	bl	8006240 <prvCopyDataToQueue>
 8005e22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d010      	beq.n	8005e4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2e:	3324      	adds	r3, #36	@ 0x24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 ffff 	bl	8006e34 <xTaskRemoveFromEventList>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d013      	beq.n	8005e64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8005f3c <xQueueGenericSend+0x200>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	e00a      	b.n	8005e64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e54:	4b39      	ldr	r3, [pc, #228]	@ (8005f3c <xQueueGenericSend+0x200>)
 8005e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e64:	f001 ff0a 	bl	8007c7c <vPortExitCritical>
				return pdPASS;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e063      	b.n	8005f34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e72:	f001 ff03 	bl	8007c7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e05c      	b.n	8005f34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e80:	f107 0314 	add.w	r3, r7, #20
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 f839 	bl	8006efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e8e:	f001 fef5 	bl	8007c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e92:	f000 fda5 	bl	80069e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e96:	f001 fec1 	bl	8007c1c <vPortEnterCritical>
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ea0:	b25b      	sxtb	r3, r3
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d103      	bne.n	8005eb0 <xQueueGenericSend+0x174>
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eb6:	b25b      	sxtb	r3, r3
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d103      	bne.n	8005ec6 <xQueueGenericSend+0x18a>
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec6:	f001 fed9 	bl	8007c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eca:	1d3a      	adds	r2, r7, #4
 8005ecc:	f107 0314 	add.w	r3, r7, #20
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f001 f828 	bl	8006f28 <xTaskCheckForTimeOut>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d124      	bne.n	8005f28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ede:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ee0:	f000 faa6 	bl	8006430 <prvIsQueueFull>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d018      	beq.n	8005f1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	3310      	adds	r3, #16
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 ff4c 	bl	8006d90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ef8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005efa:	f000 fa31 	bl	8006360 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005efe:	f000 fd7d 	bl	80069fc <xTaskResumeAll>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f47f af7c 	bne.w	8005e02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f3c <xQueueGenericSend+0x200>)
 8005f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	e772      	b.n	8005e02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f1e:	f000 fa1f 	bl	8006360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f22:	f000 fd6b 	bl	80069fc <xTaskResumeAll>
 8005f26:	e76c      	b.n	8005e02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f2a:	f000 fa19 	bl	8006360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f2e:	f000 fd65 	bl	80069fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3738      	adds	r7, #56	@ 0x38
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	e000ed04 	.word	0xe000ed04

08005f40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b090      	sub	sp, #64	@ 0x40
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10b      	bne.n	8005f70 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	e7fd      	b.n	8005f6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d103      	bne.n	8005f7e <xQueueGenericSendFromISR+0x3e>
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <xQueueGenericSendFromISR+0x42>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <xQueueGenericSendFromISR+0x44>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d103      	bne.n	8005fae <xQueueGenericSendFromISR+0x6e>
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <xQueueGenericSendFromISR+0x72>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <xQueueGenericSendFromISR+0x74>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10b      	bne.n	8005fd0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	623b      	str	r3, [r7, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	bf00      	nop
 8005fce:	e7fd      	b.n	8005fcc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fd0:	f001 fee6 	bl	8007da0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fd4:	f3ef 8211 	mrs	r2, BASEPRI
 8005fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	61fa      	str	r2, [r7, #28]
 8005fea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <xQueueGenericSendFromISR+0xc2>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d12f      	bne.n	8006062 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006004:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006008:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006010:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006018:	f000 f912 	bl	8006240 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800601c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d112      	bne.n	800604c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602a:	2b00      	cmp	r3, #0
 800602c:	d016      	beq.n	800605c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800602e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006030:	3324      	adds	r3, #36	@ 0x24
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fefe 	bl	8006e34 <xTaskRemoveFromEventList>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00e      	beq.n	800605c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00b      	beq.n	800605c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e007      	b.n	800605c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800604c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006050:	3301      	adds	r3, #1
 8006052:	b2db      	uxtb	r3, r3
 8006054:	b25a      	sxtb	r2, r3
 8006056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800605c:	2301      	movs	r3, #1
 800605e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006060:	e001      	b.n	8006066 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006062:	2300      	movs	r3, #0
 8006064:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006068:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006070:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006074:	4618      	mov	r0, r3
 8006076:	3740      	adds	r7, #64	@ 0x40
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	@ 0x30
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006088:	2300      	movs	r3, #0
 800608a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <xQueueReceive+0x32>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	623b      	str	r3, [r7, #32]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <xQueueReceive+0x40>
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <xQueueReceive+0x44>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <xQueueReceive+0x46>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10b      	bne.n	80060de <xQueueReceive+0x62>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	61fb      	str	r3, [r7, #28]
}
 80060d8:	bf00      	nop
 80060da:	bf00      	nop
 80060dc:	e7fd      	b.n	80060da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060de:	f001 f86f 	bl	80071c0 <xTaskGetSchedulerState>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d102      	bne.n	80060ee <xQueueReceive+0x72>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <xQueueReceive+0x76>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <xQueueReceive+0x78>
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10b      	bne.n	8006110 <xQueueReceive+0x94>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	61bb      	str	r3, [r7, #24]
}
 800610a:	bf00      	nop
 800610c:	bf00      	nop
 800610e:	e7fd      	b.n	800610c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006110:	f001 fd84 	bl	8007c1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006118:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01f      	beq.n	8006160 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006124:	f000 f8f6 	bl	8006314 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	1e5a      	subs	r2, r3, #1
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00f      	beq.n	8006158 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613a:	3310      	adds	r3, #16
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fe79 	bl	8006e34 <xTaskRemoveFromEventList>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006148:	4b3c      	ldr	r3, [pc, #240]	@ (800623c <xQueueReceive+0x1c0>)
 800614a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006158:	f001 fd90 	bl	8007c7c <vPortExitCritical>
				return pdPASS;
 800615c:	2301      	movs	r3, #1
 800615e:	e069      	b.n	8006234 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006166:	f001 fd89 	bl	8007c7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800616a:	2300      	movs	r3, #0
 800616c:	e062      	b.n	8006234 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006174:	f107 0310 	add.w	r3, r7, #16
 8006178:	4618      	mov	r0, r3
 800617a:	f000 febf 	bl	8006efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800617e:	2301      	movs	r3, #1
 8006180:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006182:	f001 fd7b 	bl	8007c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006186:	f000 fc2b 	bl	80069e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800618a:	f001 fd47 	bl	8007c1c <vPortEnterCritical>
 800618e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006194:	b25b      	sxtb	r3, r3
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619a:	d103      	bne.n	80061a4 <xQueueReceive+0x128>
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061aa:	b25b      	sxtb	r3, r3
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d103      	bne.n	80061ba <xQueueReceive+0x13e>
 80061b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061ba:	f001 fd5f 	bl	8007c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061be:	1d3a      	adds	r2, r7, #4
 80061c0:	f107 0310 	add.w	r3, r7, #16
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 feae 	bl	8006f28 <xTaskCheckForTimeOut>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d123      	bne.n	800621a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061d4:	f000 f916 	bl	8006404 <prvIsQueueEmpty>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d017      	beq.n	800620e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	3324      	adds	r3, #36	@ 0x24
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fdd2 	bl	8006d90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061ee:	f000 f8b7 	bl	8006360 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061f2:	f000 fc03 	bl	80069fc <xTaskResumeAll>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d189      	bne.n	8006110 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80061fc:	4b0f      	ldr	r3, [pc, #60]	@ (800623c <xQueueReceive+0x1c0>)
 80061fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	e780      	b.n	8006110 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800620e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006210:	f000 f8a6 	bl	8006360 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006214:	f000 fbf2 	bl	80069fc <xTaskResumeAll>
 8006218:	e77a      	b.n	8006110 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800621a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800621c:	f000 f8a0 	bl	8006360 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006220:	f000 fbec 	bl	80069fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006226:	f000 f8ed 	bl	8006404 <prvIsQueueEmpty>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	f43f af6f 	beq.w	8006110 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006232:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006234:	4618      	mov	r0, r3
 8006236:	3730      	adds	r7, #48	@ 0x30
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006254:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10d      	bne.n	800627a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d14d      	bne.n	8006302 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 ffc6 	bl	80071fc <xTaskPriorityDisinherit>
 8006270:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	e043      	b.n	8006302 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d119      	bne.n	80062b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6858      	ldr	r0, [r3, #4]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006288:	461a      	mov	r2, r3
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	f002 fc91 	bl	8008bb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006298:	441a      	add	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d32b      	bcc.n	8006302 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	e026      	b.n	8006302 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68d8      	ldr	r0, [r3, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062bc:	461a      	mov	r2, r3
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	f002 fc77 	bl	8008bb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062cc:	425b      	negs	r3, r3
 80062ce:	441a      	add	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d207      	bcs.n	80062f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	425b      	negs	r3, r3
 80062ea:	441a      	add	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d105      	bne.n	8006302 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	3b01      	subs	r3, #1
 8006300:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800630a:	697b      	ldr	r3, [r7, #20]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d018      	beq.n	8006358 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632e:	441a      	add	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	429a      	cmp	r2, r3
 800633e:	d303      	bcc.n	8006348 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68d9      	ldr	r1, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	461a      	mov	r2, r3
 8006352:	6838      	ldr	r0, [r7, #0]
 8006354:	f002 fc2d 	bl	8008bb2 <memcpy>
	}
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006368:	f001 fc58 	bl	8007c1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006372:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006374:	e011      	b.n	800639a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d012      	beq.n	80063a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3324      	adds	r3, #36	@ 0x24
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fd56 	bl	8006e34 <xTaskRemoveFromEventList>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800638e:	f000 fe2f 	bl	8006ff0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	3b01      	subs	r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800639a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	dce9      	bgt.n	8006376 <prvUnlockQueue+0x16>
 80063a2:	e000      	b.n	80063a6 <prvUnlockQueue+0x46>
					break;
 80063a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	22ff      	movs	r2, #255	@ 0xff
 80063aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80063ae:	f001 fc65 	bl	8007c7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063b2:	f001 fc33 	bl	8007c1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063be:	e011      	b.n	80063e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d012      	beq.n	80063ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3310      	adds	r3, #16
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fd31 	bl	8006e34 <xTaskRemoveFromEventList>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063d8:	f000 fe0a 	bl	8006ff0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	3b01      	subs	r3, #1
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	dce9      	bgt.n	80063c0 <prvUnlockQueue+0x60>
 80063ec:	e000      	b.n	80063f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	22ff      	movs	r2, #255	@ 0xff
 80063f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80063f8:	f001 fc40 	bl	8007c7c <vPortExitCritical>
}
 80063fc:	bf00      	nop
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800640c:	f001 fc06 	bl	8007c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006418:	2301      	movs	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	e001      	b.n	8006422 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006422:	f001 fc2b 	bl	8007c7c <vPortExitCritical>

	return xReturn;
 8006426:	68fb      	ldr	r3, [r7, #12]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006438:	f001 fbf0 	bl	8007c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006444:	429a      	cmp	r2, r3
 8006446:	d102      	bne.n	800644e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006448:	2301      	movs	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	e001      	b.n	8006452 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006452:	f001 fc13 	bl	8007c7c <vPortExitCritical>

	return xReturn;
 8006456:	68fb      	ldr	r3, [r7, #12]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e014      	b.n	800649a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006470:	4a0e      	ldr	r2, [pc, #56]	@ (80064ac <vQueueAddToRegistry+0x4c>)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800647c:	490b      	ldr	r1, [pc, #44]	@ (80064ac <vQueueAddToRegistry+0x4c>)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006486:	4a09      	ldr	r2, [pc, #36]	@ (80064ac <vQueueAddToRegistry+0x4c>)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4413      	add	r3, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006492:	e006      	b.n	80064a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b07      	cmp	r3, #7
 800649e:	d9e7      	bls.n	8006470 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr
 80064ac:	20000d34 	.word	0x20000d34

080064b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064c0:	f001 fbac 	bl	8007c1c <vPortEnterCritical>
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d103      	bne.n	80064da <vQueueWaitForMessageRestricted+0x2a>
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064e0:	b25b      	sxtb	r3, r3
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d103      	bne.n	80064f0 <vQueueWaitForMessageRestricted+0x40>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064f0:	f001 fbc4 	bl	8007c7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	3324      	adds	r3, #36	@ 0x24
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fc69 	bl	8006ddc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800650a:	6978      	ldr	r0, [r7, #20]
 800650c:	f7ff ff28 	bl	8006360 <prvUnlockQueue>
	}
 8006510:	bf00      	nop
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08e      	sub	sp, #56	@ 0x38
 800651c:	af04      	add	r7, sp, #16
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10b      	bne.n	8006544 <xTaskCreateStatic+0x2c>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	623b      	str	r3, [r7, #32]
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	e7fd      	b.n	8006540 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <xTaskCreateStatic+0x4a>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	61fb      	str	r3, [r7, #28]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006562:	23a8      	movs	r3, #168	@ 0xa8
 8006564:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2ba8      	cmp	r3, #168	@ 0xa8
 800656a:	d00b      	beq.n	8006584 <xTaskCreateStatic+0x6c>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	61bb      	str	r3, [r7, #24]
}
 800657e:	bf00      	nop
 8006580:	bf00      	nop
 8006582:	e7fd      	b.n	8006580 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006584:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01e      	beq.n	80065ca <xTaskCreateStatic+0xb2>
 800658c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01b      	beq.n	80065ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800659a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800659c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065a4:	2300      	movs	r3, #0
 80065a6:	9303      	str	r3, [sp, #12]
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	9302      	str	r3, [sp, #8]
 80065ac:	f107 0314 	add.w	r3, r7, #20
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f851 	bl	8006664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065c4:	f000 f8f6 	bl	80067b4 <prvAddNewTaskToReadyList>
 80065c8:	e001      	b.n	80065ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065ce:	697b      	ldr	r3, [r7, #20]
	}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3728      	adds	r7, #40	@ 0x28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	@ 0x30
 80065dc:	af04      	add	r7, sp, #16
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	4613      	mov	r3, r2
 80065e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065e8:	88fb      	ldrh	r3, [r7, #6]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 fc17 	bl	8007e20 <pvPortMalloc>
 80065f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00e      	beq.n	8006618 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065fa:	20a8      	movs	r0, #168	@ 0xa8
 80065fc:	f001 fc10 	bl	8007e20 <pvPortMalloc>
 8006600:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	631a      	str	r2, [r3, #48]	@ 0x30
 800660e:	e005      	b.n	800661c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006610:	6978      	ldr	r0, [r7, #20]
 8006612:	f001 fcd3 	bl	8007fbc <vPortFree>
 8006616:	e001      	b.n	800661c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d017      	beq.n	8006652 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	2300      	movs	r3, #0
 800662e:	9303      	str	r3, [sp, #12]
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	9302      	str	r3, [sp, #8]
 8006634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f80f 	bl	8006664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006646:	69f8      	ldr	r0, [r7, #28]
 8006648:	f000 f8b4 	bl	80067b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800664c:	2301      	movs	r3, #1
 800664e:	61bb      	str	r3, [r7, #24]
 8006650:	e002      	b.n	8006658 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006652:	f04f 33ff 	mov.w	r3, #4294967295
 8006656:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006658:	69bb      	ldr	r3, [r7, #24]
	}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	461a      	mov	r2, r3
 800667c:	21a5      	movs	r1, #165	@ 0xa5
 800667e:	f002 f91a 	bl	80088b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800668c:	3b01      	subs	r3, #1
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <prvInitialiseNewTask+0x5a>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	617b      	str	r3, [r7, #20]
}
 80066b8:	bf00      	nop
 80066ba:	bf00      	nop
 80066bc:	e7fd      	b.n	80066ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01f      	beq.n	8006704 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066c4:	2300      	movs	r3, #0
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	e012      	b.n	80066f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	7819      	ldrb	r1, [r3, #0]
 80066d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4413      	add	r3, r2
 80066d8:	3334      	adds	r3, #52	@ 0x34
 80066da:	460a      	mov	r2, r1
 80066dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	3301      	adds	r3, #1
 80066ee:	61fb      	str	r3, [r7, #28]
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2b0f      	cmp	r3, #15
 80066f4:	d9e9      	bls.n	80066ca <prvInitialiseNewTask+0x66>
 80066f6:	e000      	b.n	80066fa <prvInitialiseNewTask+0x96>
			{
				break;
 80066f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006702:	e003      	b.n	800670c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	2b37      	cmp	r3, #55	@ 0x37
 8006710:	d901      	bls.n	8006716 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006712:	2337      	movs	r3, #55	@ 0x37
 8006714:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800671a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006720:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	2200      	movs	r2, #0
 8006726:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672a:	3304      	adds	r3, #4
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff f96a 	bl	8005a06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	3318      	adds	r3, #24
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff f965 	bl	8005a06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006740:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006744:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006750:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	2200      	movs	r2, #0
 8006756:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	2200      	movs	r2, #0
 800675e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	3354      	adds	r3, #84	@ 0x54
 8006766:	224c      	movs	r2, #76	@ 0x4c
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f002 f8a3 	bl	80088b6 <memset>
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	4a0d      	ldr	r2, [pc, #52]	@ (80067a8 <prvInitialiseNewTask+0x144>)
 8006774:	659a      	str	r2, [r3, #88]	@ 0x58
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	4a0c      	ldr	r2, [pc, #48]	@ (80067ac <prvInitialiseNewTask+0x148>)
 800677a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	4a0c      	ldr	r2, [pc, #48]	@ (80067b0 <prvInitialiseNewTask+0x14c>)
 8006780:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	68f9      	ldr	r1, [r7, #12]
 8006786:	69b8      	ldr	r0, [r7, #24]
 8006788:	f001 f954 	bl	8007a34 <pxPortInitialiseStack>
 800678c:	4602      	mov	r2, r0
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800679c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800679e:	bf00      	nop
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20001fc8 	.word	0x20001fc8
 80067ac:	20002030 	.word	0x20002030
 80067b0:	20002098 	.word	0x20002098

080067b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067bc:	f001 fa2e 	bl	8007c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006878 <prvAddNewTaskToReadyList+0xc4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3301      	adds	r3, #1
 80067c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006878 <prvAddNewTaskToReadyList+0xc4>)
 80067c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067ca:	4b2c      	ldr	r3, [pc, #176]	@ (800687c <prvAddNewTaskToReadyList+0xc8>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067d2:	4a2a      	ldr	r2, [pc, #168]	@ (800687c <prvAddNewTaskToReadyList+0xc8>)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067d8:	4b27      	ldr	r3, [pc, #156]	@ (8006878 <prvAddNewTaskToReadyList+0xc4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d110      	bne.n	8006802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067e0:	f000 fc2a 	bl	8007038 <prvInitialiseTaskLists>
 80067e4:	e00d      	b.n	8006802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067e6:	4b26      	ldr	r3, [pc, #152]	@ (8006880 <prvAddNewTaskToReadyList+0xcc>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067ee:	4b23      	ldr	r3, [pc, #140]	@ (800687c <prvAddNewTaskToReadyList+0xc8>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d802      	bhi.n	8006802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067fc:	4a1f      	ldr	r2, [pc, #124]	@ (800687c <prvAddNewTaskToReadyList+0xc8>)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006802:	4b20      	ldr	r3, [pc, #128]	@ (8006884 <prvAddNewTaskToReadyList+0xd0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	4a1e      	ldr	r2, [pc, #120]	@ (8006884 <prvAddNewTaskToReadyList+0xd0>)
 800680a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800680c:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <prvAddNewTaskToReadyList+0xd0>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006818:	4b1b      	ldr	r3, [pc, #108]	@ (8006888 <prvAddNewTaskToReadyList+0xd4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d903      	bls.n	8006828 <prvAddNewTaskToReadyList+0x74>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006824:	4a18      	ldr	r2, [pc, #96]	@ (8006888 <prvAddNewTaskToReadyList+0xd4>)
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4a15      	ldr	r2, [pc, #84]	@ (800688c <prvAddNewTaskToReadyList+0xd8>)
 8006836:	441a      	add	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f7ff f8ed 	bl	8005a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006844:	f001 fa1a 	bl	8007c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006848:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <prvAddNewTaskToReadyList+0xcc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00e      	beq.n	800686e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006850:	4b0a      	ldr	r3, [pc, #40]	@ (800687c <prvAddNewTaskToReadyList+0xc8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	429a      	cmp	r2, r3
 800685c:	d207      	bcs.n	800686e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800685e:	4b0c      	ldr	r3, [pc, #48]	@ (8006890 <prvAddNewTaskToReadyList+0xdc>)
 8006860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20001248 	.word	0x20001248
 800687c:	20000d74 	.word	0x20000d74
 8006880:	20001254 	.word	0x20001254
 8006884:	20001264 	.word	0x20001264
 8006888:	20001250 	.word	0x20001250
 800688c:	20000d78 	.word	0x20000d78
 8006890:	e000ed04 	.word	0xe000ed04

08006894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d018      	beq.n	80068d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80068a6:	4b14      	ldr	r3, [pc, #80]	@ (80068f8 <vTaskDelay+0x64>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <vTaskDelay+0x32>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	60bb      	str	r3, [r7, #8]
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	e7fd      	b.n	80068c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068c6:	f000 f88b 	bl	80069e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068ca:	2100      	movs	r1, #0
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fd05 	bl	80072dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068d2:	f000 f893 	bl	80069fc <xTaskResumeAll>
 80068d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d107      	bne.n	80068ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80068de:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <vTaskDelay+0x68>)
 80068e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068ee:	bf00      	nop
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20001270 	.word	0x20001270
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	@ 0x28
 8006904:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800690e:	463a      	mov	r2, r7
 8006910:	1d39      	adds	r1, r7, #4
 8006912:	f107 0308 	add.w	r3, r7, #8
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff f824 	bl	8005964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	9202      	str	r2, [sp, #8]
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	2300      	movs	r3, #0
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	460a      	mov	r2, r1
 800692e:	4924      	ldr	r1, [pc, #144]	@ (80069c0 <vTaskStartScheduler+0xc0>)
 8006930:	4824      	ldr	r0, [pc, #144]	@ (80069c4 <vTaskStartScheduler+0xc4>)
 8006932:	f7ff fdf1 	bl	8006518 <xTaskCreateStatic>
 8006936:	4603      	mov	r3, r0
 8006938:	4a23      	ldr	r2, [pc, #140]	@ (80069c8 <vTaskStartScheduler+0xc8>)
 800693a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800693c:	4b22      	ldr	r3, [pc, #136]	@ (80069c8 <vTaskStartScheduler+0xc8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006944:	2301      	movs	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e001      	b.n	800694e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d102      	bne.n	800695a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006954:	f000 fd16 	bl	8007384 <xTimerCreateTimerTask>
 8006958:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d11b      	bne.n	8006998 <vTaskStartScheduler+0x98>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	613b      	str	r3, [r7, #16]
}
 8006972:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006974:	4b15      	ldr	r3, [pc, #84]	@ (80069cc <vTaskStartScheduler+0xcc>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3354      	adds	r3, #84	@ 0x54
 800697a:	4a15      	ldr	r2, [pc, #84]	@ (80069d0 <vTaskStartScheduler+0xd0>)
 800697c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800697e:	4b15      	ldr	r3, [pc, #84]	@ (80069d4 <vTaskStartScheduler+0xd4>)
 8006980:	f04f 32ff 	mov.w	r2, #4294967295
 8006984:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006986:	4b14      	ldr	r3, [pc, #80]	@ (80069d8 <vTaskStartScheduler+0xd8>)
 8006988:	2201      	movs	r2, #1
 800698a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800698c:	4b13      	ldr	r3, [pc, #76]	@ (80069dc <vTaskStartScheduler+0xdc>)
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006992:	f001 f8d1 	bl	8007b38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006996:	e00f      	b.n	80069b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699e:	d10b      	bne.n	80069b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	60fb      	str	r3, [r7, #12]
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <vTaskStartScheduler+0xb4>
}
 80069b8:	bf00      	nop
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	0800cab0 	.word	0x0800cab0
 80069c4:	08007009 	.word	0x08007009
 80069c8:	2000126c 	.word	0x2000126c
 80069cc:	20000d74 	.word	0x20000d74
 80069d0:	2000001c 	.word	0x2000001c
 80069d4:	20001268 	.word	0x20001268
 80069d8:	20001254 	.word	0x20001254
 80069dc:	2000124c 	.word	0x2000124c

080069e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069e4:	4b04      	ldr	r3, [pc, #16]	@ (80069f8 <vTaskSuspendAll+0x18>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3301      	adds	r3, #1
 80069ea:	4a03      	ldr	r2, [pc, #12]	@ (80069f8 <vTaskSuspendAll+0x18>)
 80069ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069ee:	bf00      	nop
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	20001270 	.word	0x20001270

080069fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a0a:	4b42      	ldr	r3, [pc, #264]	@ (8006b14 <xTaskResumeAll+0x118>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10b      	bne.n	8006a2a <xTaskResumeAll+0x2e>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	603b      	str	r3, [r7, #0]
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	e7fd      	b.n	8006a26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a2a:	f001 f8f7 	bl	8007c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a2e:	4b39      	ldr	r3, [pc, #228]	@ (8006b14 <xTaskResumeAll+0x118>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	4a37      	ldr	r2, [pc, #220]	@ (8006b14 <xTaskResumeAll+0x118>)
 8006a36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a38:	4b36      	ldr	r3, [pc, #216]	@ (8006b14 <xTaskResumeAll+0x118>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d162      	bne.n	8006b06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a40:	4b35      	ldr	r3, [pc, #212]	@ (8006b18 <xTaskResumeAll+0x11c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d05e      	beq.n	8006b06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a48:	e02f      	b.n	8006aaa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a4a:	4b34      	ldr	r3, [pc, #208]	@ (8006b1c <xTaskResumeAll+0x120>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3318      	adds	r3, #24
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff f83c 	bl	8005ad4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff f837 	bl	8005ad4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8006b20 <xTaskResumeAll+0x124>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d903      	bls.n	8006a7a <xTaskResumeAll+0x7e>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	4a2a      	ldr	r2, [pc, #168]	@ (8006b20 <xTaskResumeAll+0x124>)
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4a27      	ldr	r2, [pc, #156]	@ (8006b24 <xTaskResumeAll+0x128>)
 8006a88:	441a      	add	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f7fe ffc4 	bl	8005a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9a:	4b23      	ldr	r3, [pc, #140]	@ (8006b28 <xTaskResumeAll+0x12c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006aa4:	4b21      	ldr	r3, [pc, #132]	@ (8006b2c <xTaskResumeAll+0x130>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8006b1c <xTaskResumeAll+0x120>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1cb      	bne.n	8006a4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ab8:	f000 fb62 	bl	8007180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006abc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b30 <xTaskResumeAll+0x134>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d010      	beq.n	8006aea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ac8:	f000 f844 	bl	8006b54 <xTaskIncrementTick>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006ad2:	4b16      	ldr	r3, [pc, #88]	@ (8006b2c <xTaskResumeAll+0x130>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1f1      	bne.n	8006ac8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006ae4:	4b12      	ldr	r3, [pc, #72]	@ (8006b30 <xTaskResumeAll+0x134>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006aea:	4b10      	ldr	r3, [pc, #64]	@ (8006b2c <xTaskResumeAll+0x130>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d009      	beq.n	8006b06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006af2:	2301      	movs	r3, #1
 8006af4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006af6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b34 <xTaskResumeAll+0x138>)
 8006af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b06:	f001 f8b9 	bl	8007c7c <vPortExitCritical>

	return xAlreadyYielded;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20001270 	.word	0x20001270
 8006b18:	20001248 	.word	0x20001248
 8006b1c:	20001208 	.word	0x20001208
 8006b20:	20001250 	.word	0x20001250
 8006b24:	20000d78 	.word	0x20000d78
 8006b28:	20000d74 	.word	0x20000d74
 8006b2c:	2000125c 	.word	0x2000125c
 8006b30:	20001258 	.word	0x20001258
 8006b34:	e000ed04 	.word	0xe000ed04

08006b38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b3e:	4b04      	ldr	r3, [pc, #16]	@ (8006b50 <xTaskGetTickCount+0x18>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b44:	687b      	ldr	r3, [r7, #4]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr
 8006b50:	2000124c 	.word	0x2000124c

08006b54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8006c9c <xTaskIncrementTick+0x148>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f040 8090 	bne.w	8006c88 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b68:	4b4d      	ldr	r3, [pc, #308]	@ (8006ca0 <xTaskIncrementTick+0x14c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b70:	4a4b      	ldr	r2, [pc, #300]	@ (8006ca0 <xTaskIncrementTick+0x14c>)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d121      	bne.n	8006bc0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b7c:	4b49      	ldr	r3, [pc, #292]	@ (8006ca4 <xTaskIncrementTick+0x150>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	603b      	str	r3, [r7, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <xTaskIncrementTick+0x46>
 8006b9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ca4 <xTaskIncrementTick+0x150>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	4b40      	ldr	r3, [pc, #256]	@ (8006ca8 <xTaskIncrementTick+0x154>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ca4 <xTaskIncrementTick+0x150>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	4a3e      	ldr	r2, [pc, #248]	@ (8006ca8 <xTaskIncrementTick+0x154>)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8006cac <xTaskIncrementTick+0x158>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8006cac <xTaskIncrementTick+0x158>)
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	f000 fae0 	bl	8007180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8006cb0 <xTaskIncrementTick+0x15c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d349      	bcc.n	8006c5e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bca:	4b36      	ldr	r3, [pc, #216]	@ (8006ca4 <xTaskIncrementTick+0x150>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d104      	bne.n	8006bde <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd4:	4b36      	ldr	r3, [pc, #216]	@ (8006cb0 <xTaskIncrementTick+0x15c>)
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	601a      	str	r2, [r3, #0]
					break;
 8006bdc:	e03f      	b.n	8006c5e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bde:	4b31      	ldr	r3, [pc, #196]	@ (8006ca4 <xTaskIncrementTick+0x150>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d203      	bcs.n	8006bfe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bf6:	4a2e      	ldr	r2, [pc, #184]	@ (8006cb0 <xTaskIncrementTick+0x15c>)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bfc:	e02f      	b.n	8006c5e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	3304      	adds	r3, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe ff66 	bl	8005ad4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3318      	adds	r3, #24
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fe ff5d 	bl	8005ad4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c1e:	4b25      	ldr	r3, [pc, #148]	@ (8006cb4 <xTaskIncrementTick+0x160>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d903      	bls.n	8006c2e <xTaskIncrementTick+0xda>
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	4a22      	ldr	r2, [pc, #136]	@ (8006cb4 <xTaskIncrementTick+0x160>)
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006cb8 <xTaskIncrementTick+0x164>)
 8006c3c:	441a      	add	r2, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4619      	mov	r1, r3
 8006c44:	4610      	mov	r0, r2
 8006c46:	f7fe feea 	bl	8005a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cbc <xTaskIncrementTick+0x168>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d3b8      	bcc.n	8006bca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c5c:	e7b5      	b.n	8006bca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c5e:	4b17      	ldr	r3, [pc, #92]	@ (8006cbc <xTaskIncrementTick+0x168>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c64:	4914      	ldr	r1, [pc, #80]	@ (8006cb8 <xTaskIncrementTick+0x164>)
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d901      	bls.n	8006c7a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006c76:	2301      	movs	r3, #1
 8006c78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c7a:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <xTaskIncrementTick+0x16c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d007      	beq.n	8006c92 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006c82:	2301      	movs	r3, #1
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	e004      	b.n	8006c92 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c88:	4b0e      	ldr	r3, [pc, #56]	@ (8006cc4 <xTaskIncrementTick+0x170>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006cc4 <xTaskIncrementTick+0x170>)
 8006c90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c92:	697b      	ldr	r3, [r7, #20]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20001270 	.word	0x20001270
 8006ca0:	2000124c 	.word	0x2000124c
 8006ca4:	20001200 	.word	0x20001200
 8006ca8:	20001204 	.word	0x20001204
 8006cac:	20001260 	.word	0x20001260
 8006cb0:	20001268 	.word	0x20001268
 8006cb4:	20001250 	.word	0x20001250
 8006cb8:	20000d78 	.word	0x20000d78
 8006cbc:	20000d74 	.word	0x20000d74
 8006cc0:	2000125c 	.word	0x2000125c
 8006cc4:	20001258 	.word	0x20001258

08006cc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cce:	4b2a      	ldr	r3, [pc, #168]	@ (8006d78 <vTaskSwitchContext+0xb0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006cd6:	4b29      	ldr	r3, [pc, #164]	@ (8006d7c <vTaskSwitchContext+0xb4>)
 8006cd8:	2201      	movs	r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006cdc:	e047      	b.n	8006d6e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006cde:	4b27      	ldr	r3, [pc, #156]	@ (8006d7c <vTaskSwitchContext+0xb4>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce4:	4b26      	ldr	r3, [pc, #152]	@ (8006d80 <vTaskSwitchContext+0xb8>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	e011      	b.n	8006d10 <vTaskSwitchContext+0x48>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10b      	bne.n	8006d0a <vTaskSwitchContext+0x42>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	607b      	str	r3, [r7, #4]
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	e7fd      	b.n	8006d06 <vTaskSwitchContext+0x3e>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	491c      	ldr	r1, [pc, #112]	@ (8006d84 <vTaskSwitchContext+0xbc>)
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	440b      	add	r3, r1
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0e3      	beq.n	8006cec <vTaskSwitchContext+0x24>
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4a15      	ldr	r2, [pc, #84]	@ (8006d84 <vTaskSwitchContext+0xbc>)
 8006d30:	4413      	add	r3, r2
 8006d32:	60bb      	str	r3, [r7, #8]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	3308      	adds	r3, #8
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d104      	bne.n	8006d54 <vTaskSwitchContext+0x8c>
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	605a      	str	r2, [r3, #4]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8006d88 <vTaskSwitchContext+0xc0>)
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	4a08      	ldr	r2, [pc, #32]	@ (8006d80 <vTaskSwitchContext+0xb8>)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d64:	4b08      	ldr	r3, [pc, #32]	@ (8006d88 <vTaskSwitchContext+0xc0>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3354      	adds	r3, #84	@ 0x54
 8006d6a:	4a08      	ldr	r2, [pc, #32]	@ (8006d8c <vTaskSwitchContext+0xc4>)
 8006d6c:	6013      	str	r3, [r2, #0]
}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr
 8006d78:	20001270 	.word	0x20001270
 8006d7c:	2000125c 	.word	0x2000125c
 8006d80:	20001250 	.word	0x20001250
 8006d84:	20000d78 	.word	0x20000d78
 8006d88:	20000d74 	.word	0x20000d74
 8006d8c:	2000001c 	.word	0x2000001c

08006d90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10b      	bne.n	8006db8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60fb      	str	r3, [r7, #12]
}
 8006db2:	bf00      	nop
 8006db4:	bf00      	nop
 8006db6:	e7fd      	b.n	8006db4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006db8:	4b07      	ldr	r3, [pc, #28]	@ (8006dd8 <vTaskPlaceOnEventList+0x48>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3318      	adds	r3, #24
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fe fe4f 	bl	8005a64 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	6838      	ldr	r0, [r7, #0]
 8006dca:	f000 fa87 	bl	80072dc <prvAddCurrentTaskToDelayedList>
}
 8006dce:	bf00      	nop
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000d74 	.word	0x20000d74

08006ddc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10b      	bne.n	8006e06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	617b      	str	r3, [r7, #20]
}
 8006e00:	bf00      	nop
 8006e02:	bf00      	nop
 8006e04:	e7fd      	b.n	8006e02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e06:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3318      	adds	r3, #24
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7fe fe05 	bl	8005a1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	68b8      	ldr	r0, [r7, #8]
 8006e24:	f000 fa5a 	bl	80072dc <prvAddCurrentTaskToDelayedList>
	}
 8006e28:	bf00      	nop
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20000d74 	.word	0x20000d74

08006e34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	60fb      	str	r3, [r7, #12]
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	3318      	adds	r3, #24
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fe34 	bl	8005ad4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee4 <xTaskRemoveFromEventList+0xb0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d11d      	bne.n	8006eb0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe fe2b 	bl	8005ad4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e82:	4b19      	ldr	r3, [pc, #100]	@ (8006ee8 <xTaskRemoveFromEventList+0xb4>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d903      	bls.n	8006e92 <xTaskRemoveFromEventList+0x5e>
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	4a16      	ldr	r2, [pc, #88]	@ (8006ee8 <xTaskRemoveFromEventList+0xb4>)
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4a13      	ldr	r2, [pc, #76]	@ (8006eec <xTaskRemoveFromEventList+0xb8>)
 8006ea0:	441a      	add	r2, r3
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7fe fdb8 	bl	8005a1e <vListInsertEnd>
 8006eae:	e005      	b.n	8006ebc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	3318      	adds	r3, #24
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	480e      	ldr	r0, [pc, #56]	@ (8006ef0 <xTaskRemoveFromEventList+0xbc>)
 8006eb8:	f7fe fdb1 	bl	8005a1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <xTaskRemoveFromEventList+0xc0>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d905      	bls.n	8006ed6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ece:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef8 <xTaskRemoveFromEventList+0xc4>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e001      	b.n	8006eda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006eda:	697b      	ldr	r3, [r7, #20]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20001270 	.word	0x20001270
 8006ee8:	20001250 	.word	0x20001250
 8006eec:	20000d78 	.word	0x20000d78
 8006ef0:	20001208 	.word	0x20001208
 8006ef4:	20000d74 	.word	0x20000d74
 8006ef8:	2000125c 	.word	0x2000125c

08006efc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f04:	4b06      	ldr	r3, [pc, #24]	@ (8006f20 <vTaskInternalSetTimeOutState+0x24>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f0c:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <vTaskInternalSetTimeOutState+0x28>)
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	605a      	str	r2, [r3, #4]
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20001260 	.word	0x20001260
 8006f24:	2000124c 	.word	0x2000124c

08006f28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10b      	bne.n	8006f50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	613b      	str	r3, [r7, #16]
}
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
 8006f4e:	e7fd      	b.n	8006f4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006f6e:	f000 fe55 	bl	8007c1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f72:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe8 <xTaskCheckForTimeOut+0xc0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d102      	bne.n	8006f92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	e023      	b.n	8006fda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4b15      	ldr	r3, [pc, #84]	@ (8006fec <xTaskCheckForTimeOut+0xc4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d007      	beq.n	8006fae <xTaskCheckForTimeOut+0x86>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d302      	bcc.n	8006fae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	61fb      	str	r3, [r7, #28]
 8006fac:	e015      	b.n	8006fda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d20b      	bcs.n	8006fd0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	1ad2      	subs	r2, r2, r3
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff ff99 	bl	8006efc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	e004      	b.n	8006fda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fda:	f000 fe4f 	bl	8007c7c <vPortExitCritical>

	return xReturn;
 8006fde:	69fb      	ldr	r3, [r7, #28]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3720      	adds	r7, #32
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	2000124c 	.word	0x2000124c
 8006fec:	20001260 	.word	0x20001260

08006ff0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ff4:	4b03      	ldr	r3, [pc, #12]	@ (8007004 <vTaskMissedYield+0x14>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	2000125c 	.word	0x2000125c

08007008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007010:	f000 f852 	bl	80070b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007014:	4b06      	ldr	r3, [pc, #24]	@ (8007030 <prvIdleTask+0x28>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d9f9      	bls.n	8007010 <prvIdleTask+0x8>
			{
				taskYIELD();
 800701c:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <prvIdleTask+0x2c>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800702c:	e7f0      	b.n	8007010 <prvIdleTask+0x8>
 800702e:	bf00      	nop
 8007030:	20000d78 	.word	0x20000d78
 8007034:	e000ed04 	.word	0xe000ed04

08007038 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800703e:	2300      	movs	r3, #0
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	e00c      	b.n	800705e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4a12      	ldr	r2, [pc, #72]	@ (8007098 <prvInitialiseTaskLists+0x60>)
 8007050:	4413      	add	r3, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fcb8 	bl	80059c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3301      	adds	r3, #1
 800705c:	607b      	str	r3, [r7, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b37      	cmp	r3, #55	@ 0x37
 8007062:	d9ef      	bls.n	8007044 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007064:	480d      	ldr	r0, [pc, #52]	@ (800709c <prvInitialiseTaskLists+0x64>)
 8007066:	f7fe fcaf 	bl	80059c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800706a:	480d      	ldr	r0, [pc, #52]	@ (80070a0 <prvInitialiseTaskLists+0x68>)
 800706c:	f7fe fcac 	bl	80059c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007070:	480c      	ldr	r0, [pc, #48]	@ (80070a4 <prvInitialiseTaskLists+0x6c>)
 8007072:	f7fe fca9 	bl	80059c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007076:	480c      	ldr	r0, [pc, #48]	@ (80070a8 <prvInitialiseTaskLists+0x70>)
 8007078:	f7fe fca6 	bl	80059c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800707c:	480b      	ldr	r0, [pc, #44]	@ (80070ac <prvInitialiseTaskLists+0x74>)
 800707e:	f7fe fca3 	bl	80059c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007082:	4b0b      	ldr	r3, [pc, #44]	@ (80070b0 <prvInitialiseTaskLists+0x78>)
 8007084:	4a05      	ldr	r2, [pc, #20]	@ (800709c <prvInitialiseTaskLists+0x64>)
 8007086:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007088:	4b0a      	ldr	r3, [pc, #40]	@ (80070b4 <prvInitialiseTaskLists+0x7c>)
 800708a:	4a05      	ldr	r2, [pc, #20]	@ (80070a0 <prvInitialiseTaskLists+0x68>)
 800708c:	601a      	str	r2, [r3, #0]
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20000d78 	.word	0x20000d78
 800709c:	200011d8 	.word	0x200011d8
 80070a0:	200011ec 	.word	0x200011ec
 80070a4:	20001208 	.word	0x20001208
 80070a8:	2000121c 	.word	0x2000121c
 80070ac:	20001234 	.word	0x20001234
 80070b0:	20001200 	.word	0x20001200
 80070b4:	20001204 	.word	0x20001204

080070b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070be:	e019      	b.n	80070f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070c0:	f000 fdac 	bl	8007c1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c4:	4b10      	ldr	r3, [pc, #64]	@ (8007108 <prvCheckTasksWaitingTermination+0x50>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fcff 	bl	8005ad4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070d6:	4b0d      	ldr	r3, [pc, #52]	@ (800710c <prvCheckTasksWaitingTermination+0x54>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3b01      	subs	r3, #1
 80070dc:	4a0b      	ldr	r2, [pc, #44]	@ (800710c <prvCheckTasksWaitingTermination+0x54>)
 80070de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007110 <prvCheckTasksWaitingTermination+0x58>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007110 <prvCheckTasksWaitingTermination+0x58>)
 80070e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070ea:	f000 fdc7 	bl	8007c7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f810 	bl	8007114 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070f4:	4b06      	ldr	r3, [pc, #24]	@ (8007110 <prvCheckTasksWaitingTermination+0x58>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e1      	bne.n	80070c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	2000121c 	.word	0x2000121c
 800710c:	20001248 	.word	0x20001248
 8007110:	20001230 	.word	0x20001230

08007114 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3354      	adds	r3, #84	@ 0x54
 8007120:	4618      	mov	r0, r3
 8007122:	f001 fc85 	bl	8008a30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800712c:	2b00      	cmp	r3, #0
 800712e:	d108      	bne.n	8007142 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007134:	4618      	mov	r0, r3
 8007136:	f000 ff41 	bl	8007fbc <vPortFree>
				vPortFree( pxTCB );
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 ff3e 	bl	8007fbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007140:	e019      	b.n	8007176 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007148:	2b01      	cmp	r3, #1
 800714a:	d103      	bne.n	8007154 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 ff35 	bl	8007fbc <vPortFree>
	}
 8007152:	e010      	b.n	8007176 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800715a:	2b02      	cmp	r3, #2
 800715c:	d00b      	beq.n	8007176 <prvDeleteTCB+0x62>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	60fb      	str	r3, [r7, #12]
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	e7fd      	b.n	8007172 <prvDeleteTCB+0x5e>
	}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007186:	4b0c      	ldr	r3, [pc, #48]	@ (80071b8 <prvResetNextTaskUnblockTime+0x38>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007190:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <prvResetNextTaskUnblockTime+0x3c>)
 8007192:	f04f 32ff 	mov.w	r2, #4294967295
 8007196:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007198:	e008      	b.n	80071ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800719a:	4b07      	ldr	r3, [pc, #28]	@ (80071b8 <prvResetNextTaskUnblockTime+0x38>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	4a04      	ldr	r2, [pc, #16]	@ (80071bc <prvResetNextTaskUnblockTime+0x3c>)
 80071aa:	6013      	str	r3, [r2, #0]
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20001200 	.word	0x20001200
 80071bc:	20001268 	.word	0x20001268

080071c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071c6:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <xTaskGetSchedulerState+0x34>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d102      	bne.n	80071d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071ce:	2301      	movs	r3, #1
 80071d0:	607b      	str	r3, [r7, #4]
 80071d2:	e008      	b.n	80071e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071d4:	4b08      	ldr	r3, [pc, #32]	@ (80071f8 <xTaskGetSchedulerState+0x38>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d102      	bne.n	80071e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071dc:	2302      	movs	r3, #2
 80071de:	607b      	str	r3, [r7, #4]
 80071e0:	e001      	b.n	80071e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071e2:	2300      	movs	r3, #0
 80071e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071e6:	687b      	ldr	r3, [r7, #4]
	}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20001254 	.word	0x20001254
 80071f8:	20001270 	.word	0x20001270

080071fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007208:	2300      	movs	r3, #0
 800720a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d058      	beq.n	80072c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007212:	4b2f      	ldr	r3, [pc, #188]	@ (80072d0 <xTaskPriorityDisinherit+0xd4>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	429a      	cmp	r2, r3
 800721a:	d00b      	beq.n	8007234 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	60fb      	str	r3, [r7, #12]
}
 800722e:	bf00      	nop
 8007230:	bf00      	nop
 8007232:	e7fd      	b.n	8007230 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10b      	bne.n	8007254 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	60bb      	str	r3, [r7, #8]
}
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	e7fd      	b.n	8007250 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007258:	1e5a      	subs	r2, r3, #1
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007266:	429a      	cmp	r2, r3
 8007268:	d02c      	beq.n	80072c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800726e:	2b00      	cmp	r3, #0
 8007270:	d128      	bne.n	80072c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3304      	adds	r3, #4
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fc2c 	bl	8005ad4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007288:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007294:	4b0f      	ldr	r3, [pc, #60]	@ (80072d4 <xTaskPriorityDisinherit+0xd8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d903      	bls.n	80072a4 <xTaskPriorityDisinherit+0xa8>
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	4a0c      	ldr	r2, [pc, #48]	@ (80072d4 <xTaskPriorityDisinherit+0xd8>)
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4a09      	ldr	r2, [pc, #36]	@ (80072d8 <xTaskPriorityDisinherit+0xdc>)
 80072b2:	441a      	add	r2, r3
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f7fe fbaf 	bl	8005a1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072c0:	2301      	movs	r3, #1
 80072c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072c4:	697b      	ldr	r3, [r7, #20]
	}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000d74 	.word	0x20000d74
 80072d4:	20001250 	.word	0x20001250
 80072d8:	20000d78 	.word	0x20000d78

080072dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072e6:	4b21      	ldr	r3, [pc, #132]	@ (800736c <prvAddCurrentTaskToDelayedList+0x90>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072ec:	4b20      	ldr	r3, [pc, #128]	@ (8007370 <prvAddCurrentTaskToDelayedList+0x94>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3304      	adds	r3, #4
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe fbee 	bl	8005ad4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d10a      	bne.n	8007316 <prvAddCurrentTaskToDelayedList+0x3a>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007306:	4b1a      	ldr	r3, [pc, #104]	@ (8007370 <prvAddCurrentTaskToDelayedList+0x94>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3304      	adds	r3, #4
 800730c:	4619      	mov	r1, r3
 800730e:	4819      	ldr	r0, [pc, #100]	@ (8007374 <prvAddCurrentTaskToDelayedList+0x98>)
 8007310:	f7fe fb85 	bl	8005a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007314:	e026      	b.n	8007364 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4413      	add	r3, r2
 800731c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800731e:	4b14      	ldr	r3, [pc, #80]	@ (8007370 <prvAddCurrentTaskToDelayedList+0x94>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	429a      	cmp	r2, r3
 800732c:	d209      	bcs.n	8007342 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800732e:	4b12      	ldr	r3, [pc, #72]	@ (8007378 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	4b0f      	ldr	r3, [pc, #60]	@ (8007370 <prvAddCurrentTaskToDelayedList+0x94>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3304      	adds	r3, #4
 8007338:	4619      	mov	r1, r3
 800733a:	4610      	mov	r0, r2
 800733c:	f7fe fb92 	bl	8005a64 <vListInsert>
}
 8007340:	e010      	b.n	8007364 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007342:	4b0e      	ldr	r3, [pc, #56]	@ (800737c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	4b0a      	ldr	r3, [pc, #40]	@ (8007370 <prvAddCurrentTaskToDelayedList+0x94>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3304      	adds	r3, #4
 800734c:	4619      	mov	r1, r3
 800734e:	4610      	mov	r0, r2
 8007350:	f7fe fb88 	bl	8005a64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007354:	4b0a      	ldr	r3, [pc, #40]	@ (8007380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	429a      	cmp	r2, r3
 800735c:	d202      	bcs.n	8007364 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800735e:	4a08      	ldr	r2, [pc, #32]	@ (8007380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	6013      	str	r3, [r2, #0]
}
 8007364:	bf00      	nop
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	2000124c 	.word	0x2000124c
 8007370:	20000d74 	.word	0x20000d74
 8007374:	20001234 	.word	0x20001234
 8007378:	20001204 	.word	0x20001204
 800737c:	20001200 	.word	0x20001200
 8007380:	20001268 	.word	0x20001268

08007384 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08a      	sub	sp, #40	@ 0x28
 8007388:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800738e:	f000 fb11 	bl	80079b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007392:	4b1d      	ldr	r3, [pc, #116]	@ (8007408 <xTimerCreateTimerTask+0x84>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d021      	beq.n	80073de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073a2:	1d3a      	adds	r2, r7, #4
 80073a4:	f107 0108 	add.w	r1, r7, #8
 80073a8:	f107 030c 	add.w	r3, r7, #12
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe faf1 	bl	8005994 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	9202      	str	r2, [sp, #8]
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	2302      	movs	r3, #2
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	2300      	movs	r3, #0
 80073c2:	460a      	mov	r2, r1
 80073c4:	4911      	ldr	r1, [pc, #68]	@ (800740c <xTimerCreateTimerTask+0x88>)
 80073c6:	4812      	ldr	r0, [pc, #72]	@ (8007410 <xTimerCreateTimerTask+0x8c>)
 80073c8:	f7ff f8a6 	bl	8006518 <xTaskCreateStatic>
 80073cc:	4603      	mov	r3, r0
 80073ce:	4a11      	ldr	r2, [pc, #68]	@ (8007414 <xTimerCreateTimerTask+0x90>)
 80073d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073d2:	4b10      	ldr	r3, [pc, #64]	@ (8007414 <xTimerCreateTimerTask+0x90>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073da:	2301      	movs	r3, #1
 80073dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10b      	bne.n	80073fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	613b      	str	r3, [r7, #16]
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80073fc:	697b      	ldr	r3, [r7, #20]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	200012a4 	.word	0x200012a4
 800740c:	0800cab8 	.word	0x0800cab8
 8007410:	08007551 	.word	0x08007551
 8007414:	200012a8 	.word	0x200012a8

08007418 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08a      	sub	sp, #40	@ 0x28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007426:	2300      	movs	r3, #0
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10b      	bne.n	8007448 <xTimerGenericCommand+0x30>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	623b      	str	r3, [r7, #32]
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007448:	4b19      	ldr	r3, [pc, #100]	@ (80074b0 <xTimerGenericCommand+0x98>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d02a      	beq.n	80074a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b05      	cmp	r3, #5
 8007460:	dc18      	bgt.n	8007494 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007462:	f7ff fead 	bl	80071c0 <xTaskGetSchedulerState>
 8007466:	4603      	mov	r3, r0
 8007468:	2b02      	cmp	r3, #2
 800746a:	d109      	bne.n	8007480 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800746c:	4b10      	ldr	r3, [pc, #64]	@ (80074b0 <xTimerGenericCommand+0x98>)
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	f107 0110 	add.w	r1, r7, #16
 8007474:	2300      	movs	r3, #0
 8007476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007478:	f7fe fc60 	bl	8005d3c <xQueueGenericSend>
 800747c:	6278      	str	r0, [r7, #36]	@ 0x24
 800747e:	e012      	b.n	80074a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007480:	4b0b      	ldr	r3, [pc, #44]	@ (80074b0 <xTimerGenericCommand+0x98>)
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	f107 0110 	add.w	r1, r7, #16
 8007488:	2300      	movs	r3, #0
 800748a:	2200      	movs	r2, #0
 800748c:	f7fe fc56 	bl	8005d3c <xQueueGenericSend>
 8007490:	6278      	str	r0, [r7, #36]	@ 0x24
 8007492:	e008      	b.n	80074a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007494:	4b06      	ldr	r3, [pc, #24]	@ (80074b0 <xTimerGenericCommand+0x98>)
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	f107 0110 	add.w	r1, r7, #16
 800749c:	2300      	movs	r3, #0
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	f7fe fd4e 	bl	8005f40 <xQueueGenericSendFromISR>
 80074a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3728      	adds	r7, #40	@ 0x28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	200012a4 	.word	0x200012a4

080074b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074be:	4b23      	ldr	r3, [pc, #140]	@ (800754c <prvProcessExpiredTimer+0x98>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fe fb01 	bl	8005ad4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d023      	beq.n	8007528 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	699a      	ldr	r2, [r3, #24]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	18d1      	adds	r1, r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	6978      	ldr	r0, [r7, #20]
 80074ee:	f000 f8d3 	bl	8007698 <prvInsertTimerInActiveList>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d020      	beq.n	800753a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074f8:	2300      	movs	r3, #0
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	2300      	movs	r3, #0
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	2100      	movs	r1, #0
 8007502:	6978      	ldr	r0, [r7, #20]
 8007504:	f7ff ff88 	bl	8007418 <xTimerGenericCommand>
 8007508:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d114      	bne.n	800753a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	60fb      	str	r3, [r7, #12]
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	b2da      	uxtb	r2, r3
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	6978      	ldr	r0, [r7, #20]
 8007540:	4798      	blx	r3
}
 8007542:	bf00      	nop
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	2000129c 	.word	0x2000129c

08007550 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007558:	f107 0308 	add.w	r3, r7, #8
 800755c:	4618      	mov	r0, r3
 800755e:	f000 f859 	bl	8007614 <prvGetNextExpireTime>
 8007562:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4619      	mov	r1, r3
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f805 	bl	8007578 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800756e:	f000 f8d5 	bl	800771c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007572:	bf00      	nop
 8007574:	e7f0      	b.n	8007558 <prvTimerTask+0x8>
	...

08007578 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007582:	f7ff fa2d 	bl	80069e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007586:	f107 0308 	add.w	r3, r7, #8
 800758a:	4618      	mov	r0, r3
 800758c:	f000 f864 	bl	8007658 <prvSampleTimeNow>
 8007590:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d130      	bne.n	80075fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <prvProcessTimerOrBlockTask+0x3c>
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d806      	bhi.n	80075b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075a6:	f7ff fa29 	bl	80069fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7ff ff81 	bl	80074b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075b2:	e024      	b.n	80075fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d008      	beq.n	80075cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075ba:	4b13      	ldr	r3, [pc, #76]	@ (8007608 <prvProcessTimerOrBlockTask+0x90>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <prvProcessTimerOrBlockTask+0x50>
 80075c4:	2301      	movs	r3, #1
 80075c6:	e000      	b.n	80075ca <prvProcessTimerOrBlockTask+0x52>
 80075c8:	2300      	movs	r3, #0
 80075ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075cc:	4b0f      	ldr	r3, [pc, #60]	@ (800760c <prvProcessTimerOrBlockTask+0x94>)
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	4619      	mov	r1, r3
 80075da:	f7fe ff69 	bl	80064b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075de:	f7ff fa0d 	bl	80069fc <xTaskResumeAll>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80075e8:	4b09      	ldr	r3, [pc, #36]	@ (8007610 <prvProcessTimerOrBlockTask+0x98>)
 80075ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	f3bf 8f6f 	isb	sy
}
 80075f8:	e001      	b.n	80075fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80075fa:	f7ff f9ff 	bl	80069fc <xTaskResumeAll>
}
 80075fe:	bf00      	nop
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	200012a0 	.word	0x200012a0
 800760c:	200012a4 	.word	0x200012a4
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800761c:	4b0d      	ldr	r3, [pc, #52]	@ (8007654 <prvGetNextExpireTime+0x40>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <prvGetNextExpireTime+0x16>
 8007626:	2201      	movs	r2, #1
 8007628:	e000      	b.n	800762c <prvGetNextExpireTime+0x18>
 800762a:	2200      	movs	r2, #0
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d105      	bne.n	8007644 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007638:	4b06      	ldr	r3, [pc, #24]	@ (8007654 <prvGetNextExpireTime+0x40>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	e001      	b.n	8007648 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007648:	68fb      	ldr	r3, [r7, #12]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr
 8007654:	2000129c 	.word	0x2000129c

08007658 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007660:	f7ff fa6a 	bl	8006b38 <xTaskGetTickCount>
 8007664:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007666:	4b0b      	ldr	r3, [pc, #44]	@ (8007694 <prvSampleTimeNow+0x3c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	429a      	cmp	r2, r3
 800766e:	d205      	bcs.n	800767c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007670:	f000 f93a 	bl	80078e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e002      	b.n	8007682 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007682:	4a04      	ldr	r2, [pc, #16]	@ (8007694 <prvSampleTimeNow+0x3c>)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007688:	68fb      	ldr	r3, [r7, #12]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200012ac 	.word	0x200012ac

08007698 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d812      	bhi.n	80076e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	1ad2      	subs	r2, r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d302      	bcc.n	80076d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076cc:	2301      	movs	r3, #1
 80076ce:	617b      	str	r3, [r7, #20]
 80076d0:	e01b      	b.n	800770a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076d2:	4b10      	ldr	r3, [pc, #64]	@ (8007714 <prvInsertTimerInActiveList+0x7c>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3304      	adds	r3, #4
 80076da:	4619      	mov	r1, r3
 80076dc:	4610      	mov	r0, r2
 80076de:	f7fe f9c1 	bl	8005a64 <vListInsert>
 80076e2:	e012      	b.n	800770a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d206      	bcs.n	80076fa <prvInsertTimerInActiveList+0x62>
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d302      	bcc.n	80076fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	e007      	b.n	800770a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076fa:	4b07      	ldr	r3, [pc, #28]	@ (8007718 <prvInsertTimerInActiveList+0x80>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3304      	adds	r3, #4
 8007702:	4619      	mov	r1, r3
 8007704:	4610      	mov	r0, r2
 8007706:	f7fe f9ad 	bl	8005a64 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800770a:	697b      	ldr	r3, [r7, #20]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	200012a0 	.word	0x200012a0
 8007718:	2000129c 	.word	0x2000129c

0800771c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08e      	sub	sp, #56	@ 0x38
 8007720:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007722:	e0ce      	b.n	80078c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	da19      	bge.n	800775e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800772a:	1d3b      	adds	r3, r7, #4
 800772c:	3304      	adds	r3, #4
 800772e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10b      	bne.n	800774e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	61fb      	str	r3, [r7, #28]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800774e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007754:	6850      	ldr	r0, [r2, #4]
 8007756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007758:	6892      	ldr	r2, [r2, #8]
 800775a:	4611      	mov	r1, r2
 800775c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f2c0 80ae 	blt.w	80078c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d004      	beq.n	800777c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007774:	3304      	adds	r3, #4
 8007776:	4618      	mov	r0, r3
 8007778:	f7fe f9ac 	bl	8005ad4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800777c:	463b      	mov	r3, r7
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff ff6a 	bl	8007658 <prvSampleTimeNow>
 8007784:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b09      	cmp	r3, #9
 800778a:	f200 8097 	bhi.w	80078bc <prvProcessReceivedCommands+0x1a0>
 800778e:	a201      	add	r2, pc, #4	@ (adr r2, 8007794 <prvProcessReceivedCommands+0x78>)
 8007790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007794:	080077bd 	.word	0x080077bd
 8007798:	080077bd 	.word	0x080077bd
 800779c:	080077bd 	.word	0x080077bd
 80077a0:	08007833 	.word	0x08007833
 80077a4:	08007847 	.word	0x08007847
 80077a8:	08007893 	.word	0x08007893
 80077ac:	080077bd 	.word	0x080077bd
 80077b0:	080077bd 	.word	0x080077bd
 80077b4:	08007833 	.word	0x08007833
 80077b8:	08007847 	.word	0x08007847
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077c2:	f043 0301 	orr.w	r3, r3, #1
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	18d1      	adds	r1, r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077dc:	f7ff ff5c 	bl	8007698 <prvInsertTimerInActiveList>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d06c      	beq.n	80078c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d061      	beq.n	80078c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	441a      	add	r2, r3
 8007804:	2300      	movs	r3, #0
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	2300      	movs	r3, #0
 800780a:	2100      	movs	r1, #0
 800780c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800780e:	f7ff fe03 	bl	8007418 <xTimerGenericCommand>
 8007812:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d152      	bne.n	80078c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	61bb      	str	r3, [r7, #24]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007834:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	b2da      	uxtb	r2, r3
 800783e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007840:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007844:	e03d      	b.n	80078c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800784c:	f043 0301 	orr.w	r3, r3, #1
 8007850:	b2da      	uxtb	r2, r3
 8007852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007854:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10b      	bne.n	800787e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	617b      	str	r3, [r7, #20]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800787e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	18d1      	adds	r1, r2, r3
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800788a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800788c:	f7ff ff04 	bl	8007698 <prvInsertTimerInActiveList>
					break;
 8007890:	e017      	b.n	80078c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80078a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078a2:	f000 fb8b 	bl	8007fbc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078a6:	e00c      	b.n	80078c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80078ba:	e002      	b.n	80078c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80078bc:	bf00      	nop
 80078be:	e000      	b.n	80078c2 <prvProcessReceivedCommands+0x1a6>
					break;
 80078c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078c2:	4b08      	ldr	r3, [pc, #32]	@ (80078e4 <prvProcessReceivedCommands+0x1c8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	1d39      	adds	r1, r7, #4
 80078c8:	2200      	movs	r2, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fbd6 	bl	800607c <xQueueReceive>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f47f af26 	bne.w	8007724 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	3730      	adds	r7, #48	@ 0x30
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	200012a4 	.word	0x200012a4

080078e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078ee:	e049      	b.n	8007984 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078f0:	4b2e      	ldr	r3, [pc, #184]	@ (80079ac <prvSwitchTimerLists+0xc4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fa:	4b2c      	ldr	r3, [pc, #176]	@ (80079ac <prvSwitchTimerLists+0xc4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3304      	adds	r3, #4
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe f8e3 	bl	8005ad4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d02f      	beq.n	8007984 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4413      	add	r3, r2
 800792c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	429a      	cmp	r2, r3
 8007934:	d90e      	bls.n	8007954 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007942:	4b1a      	ldr	r3, [pc, #104]	@ (80079ac <prvSwitchTimerLists+0xc4>)
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3304      	adds	r3, #4
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f7fe f889 	bl	8005a64 <vListInsert>
 8007952:	e017      	b.n	8007984 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007954:	2300      	movs	r3, #0
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	2300      	movs	r3, #0
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	2100      	movs	r1, #0
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff fd5a 	bl	8007418 <xTimerGenericCommand>
 8007964:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	603b      	str	r3, [r7, #0]
}
 800797e:	bf00      	nop
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007984:	4b09      	ldr	r3, [pc, #36]	@ (80079ac <prvSwitchTimerLists+0xc4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1b0      	bne.n	80078f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800798e:	4b07      	ldr	r3, [pc, #28]	@ (80079ac <prvSwitchTimerLists+0xc4>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007994:	4b06      	ldr	r3, [pc, #24]	@ (80079b0 <prvSwitchTimerLists+0xc8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a04      	ldr	r2, [pc, #16]	@ (80079ac <prvSwitchTimerLists+0xc4>)
 800799a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800799c:	4a04      	ldr	r2, [pc, #16]	@ (80079b0 <prvSwitchTimerLists+0xc8>)
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	6013      	str	r3, [r2, #0]
}
 80079a2:	bf00      	nop
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	2000129c 	.word	0x2000129c
 80079b0:	200012a0 	.word	0x200012a0

080079b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079ba:	f000 f92f 	bl	8007c1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079be:	4b15      	ldr	r3, [pc, #84]	@ (8007a14 <prvCheckForValidListAndQueue+0x60>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d120      	bne.n	8007a08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079c6:	4814      	ldr	r0, [pc, #80]	@ (8007a18 <prvCheckForValidListAndQueue+0x64>)
 80079c8:	f7fd fffe 	bl	80059c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079cc:	4813      	ldr	r0, [pc, #76]	@ (8007a1c <prvCheckForValidListAndQueue+0x68>)
 80079ce:	f7fd fffb 	bl	80059c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079d2:	4b13      	ldr	r3, [pc, #76]	@ (8007a20 <prvCheckForValidListAndQueue+0x6c>)
 80079d4:	4a10      	ldr	r2, [pc, #64]	@ (8007a18 <prvCheckForValidListAndQueue+0x64>)
 80079d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079d8:	4b12      	ldr	r3, [pc, #72]	@ (8007a24 <prvCheckForValidListAndQueue+0x70>)
 80079da:	4a10      	ldr	r2, [pc, #64]	@ (8007a1c <prvCheckForValidListAndQueue+0x68>)
 80079dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079de:	2300      	movs	r3, #0
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	4b11      	ldr	r3, [pc, #68]	@ (8007a28 <prvCheckForValidListAndQueue+0x74>)
 80079e4:	4a11      	ldr	r2, [pc, #68]	@ (8007a2c <prvCheckForValidListAndQueue+0x78>)
 80079e6:	2110      	movs	r1, #16
 80079e8:	200a      	movs	r0, #10
 80079ea:	f7fe f907 	bl	8005bfc <xQueueGenericCreateStatic>
 80079ee:	4603      	mov	r3, r0
 80079f0:	4a08      	ldr	r2, [pc, #32]	@ (8007a14 <prvCheckForValidListAndQueue+0x60>)
 80079f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079f4:	4b07      	ldr	r3, [pc, #28]	@ (8007a14 <prvCheckForValidListAndQueue+0x60>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079fc:	4b05      	ldr	r3, [pc, #20]	@ (8007a14 <prvCheckForValidListAndQueue+0x60>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	490b      	ldr	r1, [pc, #44]	@ (8007a30 <prvCheckForValidListAndQueue+0x7c>)
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe fd2c 	bl	8006460 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a08:	f000 f938 	bl	8007c7c <vPortExitCritical>
}
 8007a0c:	bf00      	nop
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	200012a4 	.word	0x200012a4
 8007a18:	20001274 	.word	0x20001274
 8007a1c:	20001288 	.word	0x20001288
 8007a20:	2000129c 	.word	0x2000129c
 8007a24:	200012a0 	.word	0x200012a0
 8007a28:	20001350 	.word	0x20001350
 8007a2c:	200012b0 	.word	0x200012b0
 8007a30:	0800cac0 	.word	0x0800cac0

08007a34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3b04      	subs	r3, #4
 8007a44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3b04      	subs	r3, #4
 8007a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f023 0201 	bic.w	r2, r3, #1
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3b04      	subs	r3, #4
 8007a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a64:	4a08      	ldr	r2, [pc, #32]	@ (8007a88 <pxPortInitialiseStack+0x54>)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3b14      	subs	r3, #20
 8007a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3b20      	subs	r3, #32
 8007a7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bc80      	pop	{r7}
 8007a86:	4770      	bx	lr
 8007a88:	08007a8d 	.word	0x08007a8d

08007a8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a96:	4b12      	ldr	r3, [pc, #72]	@ (8007ae0 <prvTaskExitError+0x54>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d00b      	beq.n	8007ab8 <prvTaskExitError+0x2c>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	60fb      	str	r3, [r7, #12]
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	e7fd      	b.n	8007ab4 <prvTaskExitError+0x28>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	60bb      	str	r3, [r7, #8]
}
 8007aca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007acc:	bf00      	nop
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0fc      	beq.n	8007ace <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bc80      	pop	{r7}
 8007ade:	4770      	bx	lr
 8007ae0:	2000000c 	.word	0x2000000c
	...

08007af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007af0:	4b07      	ldr	r3, [pc, #28]	@ (8007b10 <pxCurrentTCBConst2>)
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	6808      	ldr	r0, [r1, #0]
 8007af6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007afa:	f380 8809 	msr	PSP, r0
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f04f 0000 	mov.w	r0, #0
 8007b06:	f380 8811 	msr	BASEPRI, r0
 8007b0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007b0e:	4770      	bx	lr

08007b10 <pxCurrentTCBConst2>:
 8007b10:	20000d74 	.word	0x20000d74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop

08007b18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b18:	4806      	ldr	r0, [pc, #24]	@ (8007b34 <prvPortStartFirstTask+0x1c>)
 8007b1a:	6800      	ldr	r0, [r0, #0]
 8007b1c:	6800      	ldr	r0, [r0, #0]
 8007b1e:	f380 8808 	msr	MSP, r0
 8007b22:	b662      	cpsie	i
 8007b24:	b661      	cpsie	f
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	df00      	svc	0
 8007b30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b32:	bf00      	nop
 8007b34:	e000ed08 	.word	0xe000ed08

08007b38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b3e:	4b32      	ldr	r3, [pc, #200]	@ (8007c08 <xPortStartScheduler+0xd0>)
 8007b40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	22ff      	movs	r2, #255	@ 0xff
 8007b4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	4b2a      	ldr	r3, [pc, #168]	@ (8007c0c <xPortStartScheduler+0xd4>)
 8007b64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b66:	4b2a      	ldr	r3, [pc, #168]	@ (8007c10 <xPortStartScheduler+0xd8>)
 8007b68:	2207      	movs	r2, #7
 8007b6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b6c:	e009      	b.n	8007b82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b6e:	4b28      	ldr	r3, [pc, #160]	@ (8007c10 <xPortStartScheduler+0xd8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	4a26      	ldr	r2, [pc, #152]	@ (8007c10 <xPortStartScheduler+0xd8>)
 8007b76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b82:	78fb      	ldrb	r3, [r7, #3]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b8a:	2b80      	cmp	r3, #128	@ 0x80
 8007b8c:	d0ef      	beq.n	8007b6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b8e:	4b20      	ldr	r3, [pc, #128]	@ (8007c10 <xPortStartScheduler+0xd8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f1c3 0307 	rsb	r3, r3, #7
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d00b      	beq.n	8007bb2 <xPortStartScheduler+0x7a>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	60bb      	str	r3, [r7, #8]
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	e7fd      	b.n	8007bae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bb2:	4b17      	ldr	r3, [pc, #92]	@ (8007c10 <xPortStartScheduler+0xd8>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	4a15      	ldr	r2, [pc, #84]	@ (8007c10 <xPortStartScheduler+0xd8>)
 8007bba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bbc:	4b14      	ldr	r3, [pc, #80]	@ (8007c10 <xPortStartScheduler+0xd8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bc4:	4a12      	ldr	r2, [pc, #72]	@ (8007c10 <xPortStartScheduler+0xd8>)
 8007bc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bd0:	4b10      	ldr	r3, [pc, #64]	@ (8007c14 <xPortStartScheduler+0xdc>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8007c14 <xPortStartScheduler+0xdc>)
 8007bd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007bda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <xPortStartScheduler+0xdc>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a0c      	ldr	r2, [pc, #48]	@ (8007c14 <xPortStartScheduler+0xdc>)
 8007be2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007be6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007be8:	f000 f8b8 	bl	8007d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bec:	4b0a      	ldr	r3, [pc, #40]	@ (8007c18 <xPortStartScheduler+0xe0>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bf2:	f7ff ff91 	bl	8007b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bf6:	f7ff f867 	bl	8006cc8 <vTaskSwitchContext>
	prvTaskExitError();
 8007bfa:	f7ff ff47 	bl	8007a8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	e000e400 	.word	0xe000e400
 8007c0c:	200013a0 	.word	0x200013a0
 8007c10:	200013a4 	.word	0x200013a4
 8007c14:	e000ed20 	.word	0xe000ed20
 8007c18:	2000000c 	.word	0x2000000c

08007c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	607b      	str	r3, [r7, #4]
}
 8007c34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c36:	4b0f      	ldr	r3, [pc, #60]	@ (8007c74 <vPortEnterCritical+0x58>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8007c74 <vPortEnterCritical+0x58>)
 8007c3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c40:	4b0c      	ldr	r3, [pc, #48]	@ (8007c74 <vPortEnterCritical+0x58>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d110      	bne.n	8007c6a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c48:	4b0b      	ldr	r3, [pc, #44]	@ (8007c78 <vPortEnterCritical+0x5c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00b      	beq.n	8007c6a <vPortEnterCritical+0x4e>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	603b      	str	r3, [r7, #0]
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <vPortEnterCritical+0x4a>
	}
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bc80      	pop	{r7}
 8007c72:	4770      	bx	lr
 8007c74:	2000000c 	.word	0x2000000c
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c82:	4b12      	ldr	r3, [pc, #72]	@ (8007ccc <vPortExitCritical+0x50>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10b      	bne.n	8007ca2 <vPortExitCritical+0x26>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	607b      	str	r3, [r7, #4]
}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <vPortExitCritical+0x50>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	4a08      	ldr	r2, [pc, #32]	@ (8007ccc <vPortExitCritical+0x50>)
 8007caa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cac:	4b07      	ldr	r3, [pc, #28]	@ (8007ccc <vPortExitCritical+0x50>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d105      	bne.n	8007cc0 <vPortExitCritical+0x44>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f383 8811 	msr	BASEPRI, r3
}
 8007cbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	2000000c 	.word	0x2000000c

08007cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cd0:	f3ef 8009 	mrs	r0, PSP
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <pxCurrentTCBConst>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ce0:	6010      	str	r0, [r2, #0]
 8007ce2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007ce6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007cea:	f380 8811 	msr	BASEPRI, r0
 8007cee:	f7fe ffeb 	bl	8006cc8 <vTaskSwitchContext>
 8007cf2:	f04f 0000 	mov.w	r0, #0
 8007cf6:	f380 8811 	msr	BASEPRI, r0
 8007cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007cfe:	6819      	ldr	r1, [r3, #0]
 8007d00:	6808      	ldr	r0, [r1, #0]
 8007d02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d06:	f380 8809 	msr	PSP, r0
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	4770      	bx	lr

08007d10 <pxCurrentTCBConst>:
 8007d10:	20000d74 	.word	0x20000d74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	607b      	str	r3, [r7, #4]
}
 8007d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d32:	f7fe ff0f 	bl	8006b54 <xTaskIncrementTick>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d3c:	4b06      	ldr	r3, [pc, #24]	@ (8007d58 <xPortSysTickHandler+0x40>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f383 8811 	msr	BASEPRI, r3
}
 8007d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d60:	4b0a      	ldr	r3, [pc, #40]	@ (8007d8c <vPortSetupTimerInterrupt+0x30>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d66:	4b0a      	ldr	r3, [pc, #40]	@ (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d6c:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <vPortSetupTimerInterrupt+0x38>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a09      	ldr	r2, [pc, #36]	@ (8007d98 <vPortSetupTimerInterrupt+0x3c>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	099b      	lsrs	r3, r3, #6
 8007d78:	4a08      	ldr	r2, [pc, #32]	@ (8007d9c <vPortSetupTimerInterrupt+0x40>)
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d7e:	4b03      	ldr	r3, [pc, #12]	@ (8007d8c <vPortSetupTimerInterrupt+0x30>)
 8007d80:	2207      	movs	r2, #7
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bc80      	pop	{r7}
 8007d8a:	4770      	bx	lr
 8007d8c:	e000e010 	.word	0xe000e010
 8007d90:	e000e018 	.word	0xe000e018
 8007d94:	20000000 	.word	0x20000000
 8007d98:	10624dd3 	.word	0x10624dd3
 8007d9c:	e000e014 	.word	0xe000e014

08007da0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007da6:	f3ef 8305 	mrs	r3, IPSR
 8007daa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b0f      	cmp	r3, #15
 8007db0:	d915      	bls.n	8007dde <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007db2:	4a17      	ldr	r2, [pc, #92]	@ (8007e10 <vPortValidateInterruptPriority+0x70>)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dbc:	4b15      	ldr	r3, [pc, #84]	@ (8007e14 <vPortValidateInterruptPriority+0x74>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	7afa      	ldrb	r2, [r7, #11]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d20b      	bcs.n	8007dde <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	607b      	str	r3, [r7, #4]
}
 8007dd8:	bf00      	nop
 8007dda:	bf00      	nop
 8007ddc:	e7fd      	b.n	8007dda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dde:	4b0e      	ldr	r3, [pc, #56]	@ (8007e18 <vPortValidateInterruptPriority+0x78>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007de6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <vPortValidateInterruptPriority+0x7c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d90b      	bls.n	8007e06 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	603b      	str	r3, [r7, #0]
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	e7fd      	b.n	8007e02 <vPortValidateInterruptPriority+0x62>
	}
 8007e06:	bf00      	nop
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc80      	pop	{r7}
 8007e0e:	4770      	bx	lr
 8007e10:	e000e3f0 	.word	0xe000e3f0
 8007e14:	200013a0 	.word	0x200013a0
 8007e18:	e000ed0c 	.word	0xe000ed0c
 8007e1c:	200013a4 	.word	0x200013a4

08007e20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08a      	sub	sp, #40	@ 0x28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e2c:	f7fe fdd8 	bl	80069e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e30:	4b5c      	ldr	r3, [pc, #368]	@ (8007fa4 <pvPortMalloc+0x184>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e38:	f000 f924 	bl	8008084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fa8 <pvPortMalloc+0x188>)
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4013      	ands	r3, r2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f040 8095 	bne.w	8007f74 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01e      	beq.n	8007e8e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e50:	2208      	movs	r2, #8
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4413      	add	r3, r2
 8007e56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d015      	beq.n	8007e8e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f023 0307 	bic.w	r3, r3, #7
 8007e68:	3308      	adds	r3, #8
 8007e6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f003 0307 	and.w	r3, r3, #7
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <pvPortMalloc+0x6e>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	617b      	str	r3, [r7, #20]
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	e7fd      	b.n	8007e8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d06f      	beq.n	8007f74 <pvPortMalloc+0x154>
 8007e94:	4b45      	ldr	r3, [pc, #276]	@ (8007fac <pvPortMalloc+0x18c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d86a      	bhi.n	8007f74 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e9e:	4b44      	ldr	r3, [pc, #272]	@ (8007fb0 <pvPortMalloc+0x190>)
 8007ea0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ea2:	4b43      	ldr	r3, [pc, #268]	@ (8007fb0 <pvPortMalloc+0x190>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ea8:	e004      	b.n	8007eb4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d903      	bls.n	8007ec6 <pvPortMalloc+0xa6>
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1f1      	bne.n	8007eaa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ec6:	4b37      	ldr	r3, [pc, #220]	@ (8007fa4 <pvPortMalloc+0x184>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d051      	beq.n	8007f74 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	4413      	add	r3, r2
 8007ed8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	1ad2      	subs	r2, r2, r3
 8007eea:	2308      	movs	r3, #8
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d920      	bls.n	8007f34 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	f003 0307 	and.w	r3, r3, #7
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <pvPortMalloc+0xfc>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	613b      	str	r3, [r7, #16]
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	e7fd      	b.n	8007f18 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	1ad2      	subs	r2, r2, r3
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f2e:	69b8      	ldr	r0, [r7, #24]
 8007f30:	f000 f90a 	bl	8008148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f34:	4b1d      	ldr	r3, [pc, #116]	@ (8007fac <pvPortMalloc+0x18c>)
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007fac <pvPortMalloc+0x18c>)
 8007f40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f42:	4b1a      	ldr	r3, [pc, #104]	@ (8007fac <pvPortMalloc+0x18c>)
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	4b1b      	ldr	r3, [pc, #108]	@ (8007fb4 <pvPortMalloc+0x194>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d203      	bcs.n	8007f56 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f4e:	4b17      	ldr	r3, [pc, #92]	@ (8007fac <pvPortMalloc+0x18c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a18      	ldr	r2, [pc, #96]	@ (8007fb4 <pvPortMalloc+0x194>)
 8007f54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	4b13      	ldr	r3, [pc, #76]	@ (8007fa8 <pvPortMalloc+0x188>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f6a:	4b13      	ldr	r3, [pc, #76]	@ (8007fb8 <pvPortMalloc+0x198>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	4a11      	ldr	r2, [pc, #68]	@ (8007fb8 <pvPortMalloc+0x198>)
 8007f72:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f74:	f7fe fd42 	bl	80069fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00b      	beq.n	8007f9a <pvPortMalloc+0x17a>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60fb      	str	r3, [r7, #12]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <pvPortMalloc+0x176>
	return pvReturn;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3728      	adds	r7, #40	@ 0x28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20001fb0 	.word	0x20001fb0
 8007fa8:	20001fc4 	.word	0x20001fc4
 8007fac:	20001fb4 	.word	0x20001fb4
 8007fb0:	20001fa8 	.word	0x20001fa8
 8007fb4:	20001fb8 	.word	0x20001fb8
 8007fb8:	20001fbc 	.word	0x20001fbc

08007fbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d04f      	beq.n	800806e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fce:	2308      	movs	r3, #8
 8007fd0:	425b      	negs	r3, r3
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	4b25      	ldr	r3, [pc, #148]	@ (8008078 <vPortFree+0xbc>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10b      	bne.n	8008002 <vPortFree+0x46>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	60fb      	str	r3, [r7, #12]
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	e7fd      	b.n	8007ffe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00b      	beq.n	8008022 <vPortFree+0x66>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	60bb      	str	r3, [r7, #8]
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	e7fd      	b.n	800801e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	4b14      	ldr	r3, [pc, #80]	@ (8008078 <vPortFree+0xbc>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4013      	ands	r3, r2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01e      	beq.n	800806e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d11a      	bne.n	800806e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	4b0e      	ldr	r3, [pc, #56]	@ (8008078 <vPortFree+0xbc>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	43db      	mvns	r3, r3
 8008042:	401a      	ands	r2, r3
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008048:	f7fe fcca 	bl	80069e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	4b0a      	ldr	r3, [pc, #40]	@ (800807c <vPortFree+0xc0>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4413      	add	r3, r2
 8008056:	4a09      	ldr	r2, [pc, #36]	@ (800807c <vPortFree+0xc0>)
 8008058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800805a:	6938      	ldr	r0, [r7, #16]
 800805c:	f000 f874 	bl	8008148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008060:	4b07      	ldr	r3, [pc, #28]	@ (8008080 <vPortFree+0xc4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3301      	adds	r3, #1
 8008066:	4a06      	ldr	r2, [pc, #24]	@ (8008080 <vPortFree+0xc4>)
 8008068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800806a:	f7fe fcc7 	bl	80069fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800806e:	bf00      	nop
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20001fc4 	.word	0x20001fc4
 800807c:	20001fb4 	.word	0x20001fb4
 8008080:	20001fc0 	.word	0x20001fc0

08008084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800808a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800808e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008090:	4b27      	ldr	r3, [pc, #156]	@ (8008130 <prvHeapInit+0xac>)
 8008092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00c      	beq.n	80080b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3307      	adds	r3, #7
 80080a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f023 0307 	bic.w	r3, r3, #7
 80080aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008130 <prvHeapInit+0xac>)
 80080b4:	4413      	add	r3, r2
 80080b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008134 <prvHeapInit+0xb0>)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008134 <prvHeapInit+0xb0>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	4413      	add	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080d0:	2208      	movs	r2, #8
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	1a9b      	subs	r3, r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0307 	bic.w	r3, r3, #7
 80080de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4a15      	ldr	r2, [pc, #84]	@ (8008138 <prvHeapInit+0xb4>)
 80080e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080e6:	4b14      	ldr	r3, [pc, #80]	@ (8008138 <prvHeapInit+0xb4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080ee:	4b12      	ldr	r3, [pc, #72]	@ (8008138 <prvHeapInit+0xb4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008104:	4b0c      	ldr	r3, [pc, #48]	@ (8008138 <prvHeapInit+0xb4>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4a0a      	ldr	r2, [pc, #40]	@ (800813c <prvHeapInit+0xb8>)
 8008112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4a09      	ldr	r2, [pc, #36]	@ (8008140 <prvHeapInit+0xbc>)
 800811a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800811c:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <prvHeapInit+0xc0>)
 800811e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008122:	601a      	str	r2, [r3, #0]
}
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	200013a8 	.word	0x200013a8
 8008134:	20001fa8 	.word	0x20001fa8
 8008138:	20001fb0 	.word	0x20001fb0
 800813c:	20001fb8 	.word	0x20001fb8
 8008140:	20001fb4 	.word	0x20001fb4
 8008144:	20001fc4 	.word	0x20001fc4

08008148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008150:	4b27      	ldr	r3, [pc, #156]	@ (80081f0 <prvInsertBlockIntoFreeList+0xa8>)
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e002      	b.n	800815c <prvInsertBlockIntoFreeList+0x14>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d8f7      	bhi.n	8008156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	4413      	add	r3, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d108      	bne.n	800818a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	441a      	add	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	441a      	add	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d118      	bne.n	80081d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4b14      	ldr	r3, [pc, #80]	@ (80081f4 <prvInsertBlockIntoFreeList+0xac>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d00d      	beq.n	80081c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	441a      	add	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	e008      	b.n	80081d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081c6:	4b0b      	ldr	r3, [pc, #44]	@ (80081f4 <prvInsertBlockIntoFreeList+0xac>)
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e003      	b.n	80081d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d002      	beq.n	80081e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr
 80081f0:	20001fa8 	.word	0x20001fa8
 80081f4:	20001fb0 	.word	0x20001fb0

080081f8 <_scanf_float>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	b087      	sub	sp, #28
 80081fe:	9303      	str	r3, [sp, #12]
 8008200:	688b      	ldr	r3, [r1, #8]
 8008202:	4691      	mov	r9, r2
 8008204:	1e5a      	subs	r2, r3, #1
 8008206:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800820a:	bf82      	ittt	hi
 800820c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008210:	eb03 0b05 	addhi.w	fp, r3, r5
 8008214:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008218:	460a      	mov	r2, r1
 800821a:	f04f 0500 	mov.w	r5, #0
 800821e:	bf88      	it	hi
 8008220:	608b      	strhi	r3, [r1, #8]
 8008222:	680b      	ldr	r3, [r1, #0]
 8008224:	4680      	mov	r8, r0
 8008226:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800822a:	f842 3b1c 	str.w	r3, [r2], #28
 800822e:	460c      	mov	r4, r1
 8008230:	bf98      	it	ls
 8008232:	f04f 0b00 	movls.w	fp, #0
 8008236:	4616      	mov	r6, r2
 8008238:	46aa      	mov	sl, r5
 800823a:	462f      	mov	r7, r5
 800823c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008240:	9201      	str	r2, [sp, #4]
 8008242:	9502      	str	r5, [sp, #8]
 8008244:	68a2      	ldr	r2, [r4, #8]
 8008246:	b15a      	cbz	r2, 8008260 <_scanf_float+0x68>
 8008248:	f8d9 3000 	ldr.w	r3, [r9]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2b4e      	cmp	r3, #78	@ 0x4e
 8008250:	d862      	bhi.n	8008318 <_scanf_float+0x120>
 8008252:	2b40      	cmp	r3, #64	@ 0x40
 8008254:	d83a      	bhi.n	80082cc <_scanf_float+0xd4>
 8008256:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800825a:	b2c8      	uxtb	r0, r1
 800825c:	280e      	cmp	r0, #14
 800825e:	d938      	bls.n	80082d2 <_scanf_float+0xda>
 8008260:	b11f      	cbz	r7, 800826a <_scanf_float+0x72>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800826e:	f1ba 0f01 	cmp.w	sl, #1
 8008272:	f200 8114 	bhi.w	800849e <_scanf_float+0x2a6>
 8008276:	9b01      	ldr	r3, [sp, #4]
 8008278:	429e      	cmp	r6, r3
 800827a:	f200 8105 	bhi.w	8008488 <_scanf_float+0x290>
 800827e:	2001      	movs	r0, #1
 8008280:	b007      	add	sp, #28
 8008282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008286:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800828a:	2a0d      	cmp	r2, #13
 800828c:	d8e8      	bhi.n	8008260 <_scanf_float+0x68>
 800828e:	a101      	add	r1, pc, #4	@ (adr r1, 8008294 <_scanf_float+0x9c>)
 8008290:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008294:	080083dd 	.word	0x080083dd
 8008298:	08008261 	.word	0x08008261
 800829c:	08008261 	.word	0x08008261
 80082a0:	08008261 	.word	0x08008261
 80082a4:	08008439 	.word	0x08008439
 80082a8:	08008413 	.word	0x08008413
 80082ac:	08008261 	.word	0x08008261
 80082b0:	08008261 	.word	0x08008261
 80082b4:	080083eb 	.word	0x080083eb
 80082b8:	08008261 	.word	0x08008261
 80082bc:	08008261 	.word	0x08008261
 80082c0:	08008261 	.word	0x08008261
 80082c4:	08008261 	.word	0x08008261
 80082c8:	080083a7 	.word	0x080083a7
 80082cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80082d0:	e7db      	b.n	800828a <_scanf_float+0x92>
 80082d2:	290e      	cmp	r1, #14
 80082d4:	d8c4      	bhi.n	8008260 <_scanf_float+0x68>
 80082d6:	a001      	add	r0, pc, #4	@ (adr r0, 80082dc <_scanf_float+0xe4>)
 80082d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082dc:	08008397 	.word	0x08008397
 80082e0:	08008261 	.word	0x08008261
 80082e4:	08008397 	.word	0x08008397
 80082e8:	08008427 	.word	0x08008427
 80082ec:	08008261 	.word	0x08008261
 80082f0:	08008339 	.word	0x08008339
 80082f4:	0800837d 	.word	0x0800837d
 80082f8:	0800837d 	.word	0x0800837d
 80082fc:	0800837d 	.word	0x0800837d
 8008300:	0800837d 	.word	0x0800837d
 8008304:	0800837d 	.word	0x0800837d
 8008308:	0800837d 	.word	0x0800837d
 800830c:	0800837d 	.word	0x0800837d
 8008310:	0800837d 	.word	0x0800837d
 8008314:	0800837d 	.word	0x0800837d
 8008318:	2b6e      	cmp	r3, #110	@ 0x6e
 800831a:	d809      	bhi.n	8008330 <_scanf_float+0x138>
 800831c:	2b60      	cmp	r3, #96	@ 0x60
 800831e:	d8b2      	bhi.n	8008286 <_scanf_float+0x8e>
 8008320:	2b54      	cmp	r3, #84	@ 0x54
 8008322:	d07b      	beq.n	800841c <_scanf_float+0x224>
 8008324:	2b59      	cmp	r3, #89	@ 0x59
 8008326:	d19b      	bne.n	8008260 <_scanf_float+0x68>
 8008328:	2d07      	cmp	r5, #7
 800832a:	d199      	bne.n	8008260 <_scanf_float+0x68>
 800832c:	2508      	movs	r5, #8
 800832e:	e02f      	b.n	8008390 <_scanf_float+0x198>
 8008330:	2b74      	cmp	r3, #116	@ 0x74
 8008332:	d073      	beq.n	800841c <_scanf_float+0x224>
 8008334:	2b79      	cmp	r3, #121	@ 0x79
 8008336:	e7f6      	b.n	8008326 <_scanf_float+0x12e>
 8008338:	6821      	ldr	r1, [r4, #0]
 800833a:	05c8      	lsls	r0, r1, #23
 800833c:	d51e      	bpl.n	800837c <_scanf_float+0x184>
 800833e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008342:	6021      	str	r1, [r4, #0]
 8008344:	3701      	adds	r7, #1
 8008346:	f1bb 0f00 	cmp.w	fp, #0
 800834a:	d003      	beq.n	8008354 <_scanf_float+0x15c>
 800834c:	3201      	adds	r2, #1
 800834e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008352:	60a2      	str	r2, [r4, #8]
 8008354:	68a3      	ldr	r3, [r4, #8]
 8008356:	3b01      	subs	r3, #1
 8008358:	60a3      	str	r3, [r4, #8]
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	3301      	adds	r3, #1
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008364:	3b01      	subs	r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	f8c9 3004 	str.w	r3, [r9, #4]
 800836c:	f340 8083 	ble.w	8008476 <_scanf_float+0x27e>
 8008370:	f8d9 3000 	ldr.w	r3, [r9]
 8008374:	3301      	adds	r3, #1
 8008376:	f8c9 3000 	str.w	r3, [r9]
 800837a:	e763      	b.n	8008244 <_scanf_float+0x4c>
 800837c:	eb1a 0105 	adds.w	r1, sl, r5
 8008380:	f47f af6e 	bne.w	8008260 <_scanf_float+0x68>
 8008384:	460d      	mov	r5, r1
 8008386:	468a      	mov	sl, r1
 8008388:	6822      	ldr	r2, [r4, #0]
 800838a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800838e:	6022      	str	r2, [r4, #0]
 8008390:	f806 3b01 	strb.w	r3, [r6], #1
 8008394:	e7de      	b.n	8008354 <_scanf_float+0x15c>
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	0610      	lsls	r0, r2, #24
 800839a:	f57f af61 	bpl.w	8008260 <_scanf_float+0x68>
 800839e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80083a2:	6022      	str	r2, [r4, #0]
 80083a4:	e7f4      	b.n	8008390 <_scanf_float+0x198>
 80083a6:	f1ba 0f00 	cmp.w	sl, #0
 80083aa:	d10c      	bne.n	80083c6 <_scanf_float+0x1ce>
 80083ac:	b977      	cbnz	r7, 80083cc <_scanf_float+0x1d4>
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80083b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80083b8:	d108      	bne.n	80083cc <_scanf_float+0x1d4>
 80083ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083be:	f04f 0a01 	mov.w	sl, #1
 80083c2:	6022      	str	r2, [r4, #0]
 80083c4:	e7e4      	b.n	8008390 <_scanf_float+0x198>
 80083c6:	f1ba 0f02 	cmp.w	sl, #2
 80083ca:	d051      	beq.n	8008470 <_scanf_float+0x278>
 80083cc:	2d01      	cmp	r5, #1
 80083ce:	d002      	beq.n	80083d6 <_scanf_float+0x1de>
 80083d0:	2d04      	cmp	r5, #4
 80083d2:	f47f af45 	bne.w	8008260 <_scanf_float+0x68>
 80083d6:	3501      	adds	r5, #1
 80083d8:	b2ed      	uxtb	r5, r5
 80083da:	e7d9      	b.n	8008390 <_scanf_float+0x198>
 80083dc:	f1ba 0f01 	cmp.w	sl, #1
 80083e0:	f47f af3e 	bne.w	8008260 <_scanf_float+0x68>
 80083e4:	f04f 0a02 	mov.w	sl, #2
 80083e8:	e7d2      	b.n	8008390 <_scanf_float+0x198>
 80083ea:	b975      	cbnz	r5, 800840a <_scanf_float+0x212>
 80083ec:	2f00      	cmp	r7, #0
 80083ee:	f47f af38 	bne.w	8008262 <_scanf_float+0x6a>
 80083f2:	6822      	ldr	r2, [r4, #0]
 80083f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80083f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80083fc:	f040 80ff 	bne.w	80085fe <_scanf_float+0x406>
 8008400:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008404:	2501      	movs	r5, #1
 8008406:	6022      	str	r2, [r4, #0]
 8008408:	e7c2      	b.n	8008390 <_scanf_float+0x198>
 800840a:	2d03      	cmp	r5, #3
 800840c:	d0e3      	beq.n	80083d6 <_scanf_float+0x1de>
 800840e:	2d05      	cmp	r5, #5
 8008410:	e7df      	b.n	80083d2 <_scanf_float+0x1da>
 8008412:	2d02      	cmp	r5, #2
 8008414:	f47f af24 	bne.w	8008260 <_scanf_float+0x68>
 8008418:	2503      	movs	r5, #3
 800841a:	e7b9      	b.n	8008390 <_scanf_float+0x198>
 800841c:	2d06      	cmp	r5, #6
 800841e:	f47f af1f 	bne.w	8008260 <_scanf_float+0x68>
 8008422:	2507      	movs	r5, #7
 8008424:	e7b4      	b.n	8008390 <_scanf_float+0x198>
 8008426:	6822      	ldr	r2, [r4, #0]
 8008428:	0591      	lsls	r1, r2, #22
 800842a:	f57f af19 	bpl.w	8008260 <_scanf_float+0x68>
 800842e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	9702      	str	r7, [sp, #8]
 8008436:	e7ab      	b.n	8008390 <_scanf_float+0x198>
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800843e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008442:	d005      	beq.n	8008450 <_scanf_float+0x258>
 8008444:	0550      	lsls	r0, r2, #21
 8008446:	f57f af0b 	bpl.w	8008260 <_scanf_float+0x68>
 800844a:	2f00      	cmp	r7, #0
 800844c:	f000 80d7 	beq.w	80085fe <_scanf_float+0x406>
 8008450:	0591      	lsls	r1, r2, #22
 8008452:	bf58      	it	pl
 8008454:	9902      	ldrpl	r1, [sp, #8]
 8008456:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800845a:	bf58      	it	pl
 800845c:	1a79      	subpl	r1, r7, r1
 800845e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008462:	f04f 0700 	mov.w	r7, #0
 8008466:	bf58      	it	pl
 8008468:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800846c:	6022      	str	r2, [r4, #0]
 800846e:	e78f      	b.n	8008390 <_scanf_float+0x198>
 8008470:	f04f 0a03 	mov.w	sl, #3
 8008474:	e78c      	b.n	8008390 <_scanf_float+0x198>
 8008476:	4649      	mov	r1, r9
 8008478:	4640      	mov	r0, r8
 800847a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800847e:	4798      	blx	r3
 8008480:	2800      	cmp	r0, #0
 8008482:	f43f aedf 	beq.w	8008244 <_scanf_float+0x4c>
 8008486:	e6eb      	b.n	8008260 <_scanf_float+0x68>
 8008488:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800848c:	464a      	mov	r2, r9
 800848e:	4640      	mov	r0, r8
 8008490:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008494:	4798      	blx	r3
 8008496:	6923      	ldr	r3, [r4, #16]
 8008498:	3b01      	subs	r3, #1
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	e6eb      	b.n	8008276 <_scanf_float+0x7e>
 800849e:	1e6b      	subs	r3, r5, #1
 80084a0:	2b06      	cmp	r3, #6
 80084a2:	d824      	bhi.n	80084ee <_scanf_float+0x2f6>
 80084a4:	2d02      	cmp	r5, #2
 80084a6:	d836      	bhi.n	8008516 <_scanf_float+0x31e>
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	429e      	cmp	r6, r3
 80084ac:	f67f aee7 	bls.w	800827e <_scanf_float+0x86>
 80084b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084b4:	464a      	mov	r2, r9
 80084b6:	4640      	mov	r0, r8
 80084b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084bc:	4798      	blx	r3
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	6123      	str	r3, [r4, #16]
 80084c4:	e7f0      	b.n	80084a8 <_scanf_float+0x2b0>
 80084c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084ca:	464a      	mov	r2, r9
 80084cc:	4640      	mov	r0, r8
 80084ce:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80084d2:	4798      	blx	r3
 80084d4:	6923      	ldr	r3, [r4, #16]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084de:	fa5f fa8a 	uxtb.w	sl, sl
 80084e2:	f1ba 0f02 	cmp.w	sl, #2
 80084e6:	d1ee      	bne.n	80084c6 <_scanf_float+0x2ce>
 80084e8:	3d03      	subs	r5, #3
 80084ea:	b2ed      	uxtb	r5, r5
 80084ec:	1b76      	subs	r6, r6, r5
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	05da      	lsls	r2, r3, #23
 80084f2:	d530      	bpl.n	8008556 <_scanf_float+0x35e>
 80084f4:	055b      	lsls	r3, r3, #21
 80084f6:	d511      	bpl.n	800851c <_scanf_float+0x324>
 80084f8:	9b01      	ldr	r3, [sp, #4]
 80084fa:	429e      	cmp	r6, r3
 80084fc:	f67f aebf 	bls.w	800827e <_scanf_float+0x86>
 8008500:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008504:	464a      	mov	r2, r9
 8008506:	4640      	mov	r0, r8
 8008508:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800850c:	4798      	blx	r3
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	3b01      	subs	r3, #1
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	e7f0      	b.n	80084f8 <_scanf_float+0x300>
 8008516:	46aa      	mov	sl, r5
 8008518:	46b3      	mov	fp, r6
 800851a:	e7de      	b.n	80084da <_scanf_float+0x2e2>
 800851c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	2965      	cmp	r1, #101	@ 0x65
 8008524:	f103 33ff 	add.w	r3, r3, #4294967295
 8008528:	f106 35ff 	add.w	r5, r6, #4294967295
 800852c:	6123      	str	r3, [r4, #16]
 800852e:	d00c      	beq.n	800854a <_scanf_float+0x352>
 8008530:	2945      	cmp	r1, #69	@ 0x45
 8008532:	d00a      	beq.n	800854a <_scanf_float+0x352>
 8008534:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008538:	464a      	mov	r2, r9
 800853a:	4640      	mov	r0, r8
 800853c:	4798      	blx	r3
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008544:	3b01      	subs	r3, #1
 8008546:	1eb5      	subs	r5, r6, #2
 8008548:	6123      	str	r3, [r4, #16]
 800854a:	464a      	mov	r2, r9
 800854c:	4640      	mov	r0, r8
 800854e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008552:	4798      	blx	r3
 8008554:	462e      	mov	r6, r5
 8008556:	6822      	ldr	r2, [r4, #0]
 8008558:	f012 0210 	ands.w	r2, r2, #16
 800855c:	d001      	beq.n	8008562 <_scanf_float+0x36a>
 800855e:	2000      	movs	r0, #0
 8008560:	e68e      	b.n	8008280 <_scanf_float+0x88>
 8008562:	7032      	strb	r2, [r6, #0]
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800856a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800856e:	d125      	bne.n	80085bc <_scanf_float+0x3c4>
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	429f      	cmp	r7, r3
 8008574:	d00a      	beq.n	800858c <_scanf_float+0x394>
 8008576:	1bda      	subs	r2, r3, r7
 8008578:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800857c:	429e      	cmp	r6, r3
 800857e:	bf28      	it	cs
 8008580:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008584:	4630      	mov	r0, r6
 8008586:	491f      	ldr	r1, [pc, #124]	@ (8008604 <_scanf_float+0x40c>)
 8008588:	f000 f902 	bl	8008790 <siprintf>
 800858c:	2200      	movs	r2, #0
 800858e:	4640      	mov	r0, r8
 8008590:	9901      	ldr	r1, [sp, #4]
 8008592:	f001 fa39 	bl	8009a08 <_strtod_r>
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	6825      	ldr	r5, [r4, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f015 0f02 	tst.w	r5, #2
 80085a0:	4606      	mov	r6, r0
 80085a2:	460f      	mov	r7, r1
 80085a4:	f103 0204 	add.w	r2, r3, #4
 80085a8:	d015      	beq.n	80085d6 <_scanf_float+0x3de>
 80085aa:	9903      	ldr	r1, [sp, #12]
 80085ac:	600a      	str	r2, [r1, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	e9c3 6700 	strd	r6, r7, [r3]
 80085b4:	68e3      	ldr	r3, [r4, #12]
 80085b6:	3301      	adds	r3, #1
 80085b8:	60e3      	str	r3, [r4, #12]
 80085ba:	e7d0      	b.n	800855e <_scanf_float+0x366>
 80085bc:	9b04      	ldr	r3, [sp, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d0e4      	beq.n	800858c <_scanf_float+0x394>
 80085c2:	9905      	ldr	r1, [sp, #20]
 80085c4:	230a      	movs	r3, #10
 80085c6:	4640      	mov	r0, r8
 80085c8:	3101      	adds	r1, #1
 80085ca:	f001 fa9d 	bl	8009b08 <_strtol_r>
 80085ce:	9b04      	ldr	r3, [sp, #16]
 80085d0:	9e05      	ldr	r6, [sp, #20]
 80085d2:	1ac2      	subs	r2, r0, r3
 80085d4:	e7d0      	b.n	8008578 <_scanf_float+0x380>
 80085d6:	076d      	lsls	r5, r5, #29
 80085d8:	d4e7      	bmi.n	80085aa <_scanf_float+0x3b2>
 80085da:	9d03      	ldr	r5, [sp, #12]
 80085dc:	602a      	str	r2, [r5, #0]
 80085de:	681d      	ldr	r5, [r3, #0]
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	f7f8 fa1c 	bl	8000a20 <__aeabi_dcmpun>
 80085e8:	b120      	cbz	r0, 80085f4 <_scanf_float+0x3fc>
 80085ea:	4807      	ldr	r0, [pc, #28]	@ (8008608 <_scanf_float+0x410>)
 80085ec:	f000 faf0 	bl	8008bd0 <nanf>
 80085f0:	6028      	str	r0, [r5, #0]
 80085f2:	e7df      	b.n	80085b4 <_scanf_float+0x3bc>
 80085f4:	4630      	mov	r0, r6
 80085f6:	4639      	mov	r1, r7
 80085f8:	f7f8 fa48 	bl	8000a8c <__aeabi_d2f>
 80085fc:	e7f8      	b.n	80085f0 <_scanf_float+0x3f8>
 80085fe:	2700      	movs	r7, #0
 8008600:	e633      	b.n	800826a <_scanf_float+0x72>
 8008602:	bf00      	nop
 8008604:	0800cb46 	.word	0x0800cb46
 8008608:	0800cbf7 	.word	0x0800cbf7

0800860c <std>:
 800860c:	2300      	movs	r3, #0
 800860e:	b510      	push	{r4, lr}
 8008610:	4604      	mov	r4, r0
 8008612:	e9c0 3300 	strd	r3, r3, [r0]
 8008616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800861a:	6083      	str	r3, [r0, #8]
 800861c:	8181      	strh	r1, [r0, #12]
 800861e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008620:	81c2      	strh	r2, [r0, #14]
 8008622:	6183      	str	r3, [r0, #24]
 8008624:	4619      	mov	r1, r3
 8008626:	2208      	movs	r2, #8
 8008628:	305c      	adds	r0, #92	@ 0x5c
 800862a:	f000 f944 	bl	80088b6 <memset>
 800862e:	4b0d      	ldr	r3, [pc, #52]	@ (8008664 <std+0x58>)
 8008630:	6224      	str	r4, [r4, #32]
 8008632:	6263      	str	r3, [r4, #36]	@ 0x24
 8008634:	4b0c      	ldr	r3, [pc, #48]	@ (8008668 <std+0x5c>)
 8008636:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008638:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <std+0x60>)
 800863a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800863c:	4b0c      	ldr	r3, [pc, #48]	@ (8008670 <std+0x64>)
 800863e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008640:	4b0c      	ldr	r3, [pc, #48]	@ (8008674 <std+0x68>)
 8008642:	429c      	cmp	r4, r3
 8008644:	d006      	beq.n	8008654 <std+0x48>
 8008646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800864a:	4294      	cmp	r4, r2
 800864c:	d002      	beq.n	8008654 <std+0x48>
 800864e:	33d0      	adds	r3, #208	@ 0xd0
 8008650:	429c      	cmp	r4, r3
 8008652:	d105      	bne.n	8008660 <std+0x54>
 8008654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800865c:	f000 baa6 	b.w	8008bac <__retarget_lock_init_recursive>
 8008660:	bd10      	pop	{r4, pc}
 8008662:	bf00      	nop
 8008664:	0800882d 	.word	0x0800882d
 8008668:	08008853 	.word	0x08008853
 800866c:	0800888b 	.word	0x0800888b
 8008670:	080088af 	.word	0x080088af
 8008674:	20001fc8 	.word	0x20001fc8

08008678 <stdio_exit_handler>:
 8008678:	4a02      	ldr	r2, [pc, #8]	@ (8008684 <stdio_exit_handler+0xc>)
 800867a:	4903      	ldr	r1, [pc, #12]	@ (8008688 <stdio_exit_handler+0x10>)
 800867c:	4803      	ldr	r0, [pc, #12]	@ (800868c <stdio_exit_handler+0x14>)
 800867e:	f000 b869 	b.w	8008754 <_fwalk_sglue>
 8008682:	bf00      	nop
 8008684:	20000010 	.word	0x20000010
 8008688:	0800a811 	.word	0x0800a811
 800868c:	20000020 	.word	0x20000020

08008690 <cleanup_stdio>:
 8008690:	6841      	ldr	r1, [r0, #4]
 8008692:	4b0c      	ldr	r3, [pc, #48]	@ (80086c4 <cleanup_stdio+0x34>)
 8008694:	b510      	push	{r4, lr}
 8008696:	4299      	cmp	r1, r3
 8008698:	4604      	mov	r4, r0
 800869a:	d001      	beq.n	80086a0 <cleanup_stdio+0x10>
 800869c:	f002 f8b8 	bl	800a810 <_fflush_r>
 80086a0:	68a1      	ldr	r1, [r4, #8]
 80086a2:	4b09      	ldr	r3, [pc, #36]	@ (80086c8 <cleanup_stdio+0x38>)
 80086a4:	4299      	cmp	r1, r3
 80086a6:	d002      	beq.n	80086ae <cleanup_stdio+0x1e>
 80086a8:	4620      	mov	r0, r4
 80086aa:	f002 f8b1 	bl	800a810 <_fflush_r>
 80086ae:	68e1      	ldr	r1, [r4, #12]
 80086b0:	4b06      	ldr	r3, [pc, #24]	@ (80086cc <cleanup_stdio+0x3c>)
 80086b2:	4299      	cmp	r1, r3
 80086b4:	d004      	beq.n	80086c0 <cleanup_stdio+0x30>
 80086b6:	4620      	mov	r0, r4
 80086b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086bc:	f002 b8a8 	b.w	800a810 <_fflush_r>
 80086c0:	bd10      	pop	{r4, pc}
 80086c2:	bf00      	nop
 80086c4:	20001fc8 	.word	0x20001fc8
 80086c8:	20002030 	.word	0x20002030
 80086cc:	20002098 	.word	0x20002098

080086d0 <global_stdio_init.part.0>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008700 <global_stdio_init.part.0+0x30>)
 80086d4:	4c0b      	ldr	r4, [pc, #44]	@ (8008704 <global_stdio_init.part.0+0x34>)
 80086d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008708 <global_stdio_init.part.0+0x38>)
 80086d8:	4620      	mov	r0, r4
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	2104      	movs	r1, #4
 80086de:	2200      	movs	r2, #0
 80086e0:	f7ff ff94 	bl	800860c <std>
 80086e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80086e8:	2201      	movs	r2, #1
 80086ea:	2109      	movs	r1, #9
 80086ec:	f7ff ff8e 	bl	800860c <std>
 80086f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086f4:	2202      	movs	r2, #2
 80086f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086fa:	2112      	movs	r1, #18
 80086fc:	f7ff bf86 	b.w	800860c <std>
 8008700:	20002100 	.word	0x20002100
 8008704:	20001fc8 	.word	0x20001fc8
 8008708:	08008679 	.word	0x08008679

0800870c <__sfp_lock_acquire>:
 800870c:	4801      	ldr	r0, [pc, #4]	@ (8008714 <__sfp_lock_acquire+0x8>)
 800870e:	f000 ba4e 	b.w	8008bae <__retarget_lock_acquire_recursive>
 8008712:	bf00      	nop
 8008714:	20002109 	.word	0x20002109

08008718 <__sfp_lock_release>:
 8008718:	4801      	ldr	r0, [pc, #4]	@ (8008720 <__sfp_lock_release+0x8>)
 800871a:	f000 ba49 	b.w	8008bb0 <__retarget_lock_release_recursive>
 800871e:	bf00      	nop
 8008720:	20002109 	.word	0x20002109

08008724 <__sinit>:
 8008724:	b510      	push	{r4, lr}
 8008726:	4604      	mov	r4, r0
 8008728:	f7ff fff0 	bl	800870c <__sfp_lock_acquire>
 800872c:	6a23      	ldr	r3, [r4, #32]
 800872e:	b11b      	cbz	r3, 8008738 <__sinit+0x14>
 8008730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008734:	f7ff bff0 	b.w	8008718 <__sfp_lock_release>
 8008738:	4b04      	ldr	r3, [pc, #16]	@ (800874c <__sinit+0x28>)
 800873a:	6223      	str	r3, [r4, #32]
 800873c:	4b04      	ldr	r3, [pc, #16]	@ (8008750 <__sinit+0x2c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1f5      	bne.n	8008730 <__sinit+0xc>
 8008744:	f7ff ffc4 	bl	80086d0 <global_stdio_init.part.0>
 8008748:	e7f2      	b.n	8008730 <__sinit+0xc>
 800874a:	bf00      	nop
 800874c:	08008691 	.word	0x08008691
 8008750:	20002100 	.word	0x20002100

08008754 <_fwalk_sglue>:
 8008754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008758:	4607      	mov	r7, r0
 800875a:	4688      	mov	r8, r1
 800875c:	4614      	mov	r4, r2
 800875e:	2600      	movs	r6, #0
 8008760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008764:	f1b9 0901 	subs.w	r9, r9, #1
 8008768:	d505      	bpl.n	8008776 <_fwalk_sglue+0x22>
 800876a:	6824      	ldr	r4, [r4, #0]
 800876c:	2c00      	cmp	r4, #0
 800876e:	d1f7      	bne.n	8008760 <_fwalk_sglue+0xc>
 8008770:	4630      	mov	r0, r6
 8008772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d907      	bls.n	800878c <_fwalk_sglue+0x38>
 800877c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008780:	3301      	adds	r3, #1
 8008782:	d003      	beq.n	800878c <_fwalk_sglue+0x38>
 8008784:	4629      	mov	r1, r5
 8008786:	4638      	mov	r0, r7
 8008788:	47c0      	blx	r8
 800878a:	4306      	orrs	r6, r0
 800878c:	3568      	adds	r5, #104	@ 0x68
 800878e:	e7e9      	b.n	8008764 <_fwalk_sglue+0x10>

08008790 <siprintf>:
 8008790:	b40e      	push	{r1, r2, r3}
 8008792:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008796:	b510      	push	{r4, lr}
 8008798:	2400      	movs	r4, #0
 800879a:	b09d      	sub	sp, #116	@ 0x74
 800879c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800879e:	9002      	str	r0, [sp, #8]
 80087a0:	9006      	str	r0, [sp, #24]
 80087a2:	9107      	str	r1, [sp, #28]
 80087a4:	9104      	str	r1, [sp, #16]
 80087a6:	4809      	ldr	r0, [pc, #36]	@ (80087cc <siprintf+0x3c>)
 80087a8:	4909      	ldr	r1, [pc, #36]	@ (80087d0 <siprintf+0x40>)
 80087aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ae:	9105      	str	r1, [sp, #20]
 80087b0:	6800      	ldr	r0, [r0, #0]
 80087b2:	a902      	add	r1, sp, #8
 80087b4:	9301      	str	r3, [sp, #4]
 80087b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80087b8:	f001 fa04 	bl	8009bc4 <_svfiprintf_r>
 80087bc:	9b02      	ldr	r3, [sp, #8]
 80087be:	701c      	strb	r4, [r3, #0]
 80087c0:	b01d      	add	sp, #116	@ 0x74
 80087c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c6:	b003      	add	sp, #12
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	2000001c 	.word	0x2000001c
 80087d0:	ffff0208 	.word	0xffff0208

080087d4 <siscanf>:
 80087d4:	b40e      	push	{r1, r2, r3}
 80087d6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80087da:	b570      	push	{r4, r5, r6, lr}
 80087dc:	2500      	movs	r5, #0
 80087de:	b09d      	sub	sp, #116	@ 0x74
 80087e0:	ac21      	add	r4, sp, #132	@ 0x84
 80087e2:	f854 6b04 	ldr.w	r6, [r4], #4
 80087e6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80087ea:	951b      	str	r5, [sp, #108]	@ 0x6c
 80087ec:	9002      	str	r0, [sp, #8]
 80087ee:	9006      	str	r0, [sp, #24]
 80087f0:	f7f7 fcb8 	bl	8000164 <strlen>
 80087f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008824 <siscanf+0x50>)
 80087f6:	9003      	str	r0, [sp, #12]
 80087f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80087fe:	9007      	str	r0, [sp, #28]
 8008800:	4809      	ldr	r0, [pc, #36]	@ (8008828 <siscanf+0x54>)
 8008802:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008806:	4632      	mov	r2, r6
 8008808:	4623      	mov	r3, r4
 800880a:	a902      	add	r1, sp, #8
 800880c:	6800      	ldr	r0, [r0, #0]
 800880e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008810:	9514      	str	r5, [sp, #80]	@ 0x50
 8008812:	9401      	str	r4, [sp, #4]
 8008814:	f001 fb2c 	bl	8009e70 <__ssvfiscanf_r>
 8008818:	b01d      	add	sp, #116	@ 0x74
 800881a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800881e:	b003      	add	sp, #12
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	0800884f 	.word	0x0800884f
 8008828:	2000001c 	.word	0x2000001c

0800882c <__sread>:
 800882c:	b510      	push	{r4, lr}
 800882e:	460c      	mov	r4, r1
 8008830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008834:	f000 f96c 	bl	8008b10 <_read_r>
 8008838:	2800      	cmp	r0, #0
 800883a:	bfab      	itete	ge
 800883c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800883e:	89a3      	ldrhlt	r3, [r4, #12]
 8008840:	181b      	addge	r3, r3, r0
 8008842:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008846:	bfac      	ite	ge
 8008848:	6563      	strge	r3, [r4, #84]	@ 0x54
 800884a:	81a3      	strhlt	r3, [r4, #12]
 800884c:	bd10      	pop	{r4, pc}

0800884e <__seofread>:
 800884e:	2000      	movs	r0, #0
 8008850:	4770      	bx	lr

08008852 <__swrite>:
 8008852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008856:	461f      	mov	r7, r3
 8008858:	898b      	ldrh	r3, [r1, #12]
 800885a:	4605      	mov	r5, r0
 800885c:	05db      	lsls	r3, r3, #23
 800885e:	460c      	mov	r4, r1
 8008860:	4616      	mov	r6, r2
 8008862:	d505      	bpl.n	8008870 <__swrite+0x1e>
 8008864:	2302      	movs	r3, #2
 8008866:	2200      	movs	r2, #0
 8008868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886c:	f000 f93e 	bl	8008aec <_lseek_r>
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	4632      	mov	r2, r6
 8008874:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008878:	81a3      	strh	r3, [r4, #12]
 800887a:	4628      	mov	r0, r5
 800887c:	463b      	mov	r3, r7
 800887e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008886:	f000 b955 	b.w	8008b34 <_write_r>

0800888a <__sseek>:
 800888a:	b510      	push	{r4, lr}
 800888c:	460c      	mov	r4, r1
 800888e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008892:	f000 f92b 	bl	8008aec <_lseek_r>
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	bf15      	itete	ne
 800889c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800889e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088a6:	81a3      	strheq	r3, [r4, #12]
 80088a8:	bf18      	it	ne
 80088aa:	81a3      	strhne	r3, [r4, #12]
 80088ac:	bd10      	pop	{r4, pc}

080088ae <__sclose>:
 80088ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b2:	f000 b8ad 	b.w	8008a10 <_close_r>

080088b6 <memset>:
 80088b6:	4603      	mov	r3, r0
 80088b8:	4402      	add	r2, r0
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d100      	bne.n	80088c0 <memset+0xa>
 80088be:	4770      	bx	lr
 80088c0:	f803 1b01 	strb.w	r1, [r3], #1
 80088c4:	e7f9      	b.n	80088ba <memset+0x4>

080088c6 <strchr>:
 80088c6:	4603      	mov	r3, r0
 80088c8:	b2c9      	uxtb	r1, r1
 80088ca:	4618      	mov	r0, r3
 80088cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d0:	b112      	cbz	r2, 80088d8 <strchr+0x12>
 80088d2:	428a      	cmp	r2, r1
 80088d4:	d1f9      	bne.n	80088ca <strchr+0x4>
 80088d6:	4770      	bx	lr
 80088d8:	2900      	cmp	r1, #0
 80088da:	bf18      	it	ne
 80088dc:	2000      	movne	r0, #0
 80088de:	4770      	bx	lr

080088e0 <strncmp>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	b16a      	cbz	r2, 8008900 <strncmp+0x20>
 80088e4:	3901      	subs	r1, #1
 80088e6:	1884      	adds	r4, r0, r2
 80088e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d103      	bne.n	80088fc <strncmp+0x1c>
 80088f4:	42a0      	cmp	r0, r4
 80088f6:	d001      	beq.n	80088fc <strncmp+0x1c>
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	d1f5      	bne.n	80088e8 <strncmp+0x8>
 80088fc:	1ad0      	subs	r0, r2, r3
 80088fe:	bd10      	pop	{r4, pc}
 8008900:	4610      	mov	r0, r2
 8008902:	e7fc      	b.n	80088fe <strncmp+0x1e>

08008904 <strncpy>:
 8008904:	4603      	mov	r3, r0
 8008906:	b510      	push	{r4, lr}
 8008908:	3901      	subs	r1, #1
 800890a:	b132      	cbz	r2, 800891a <strncpy+0x16>
 800890c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008910:	3a01      	subs	r2, #1
 8008912:	f803 4b01 	strb.w	r4, [r3], #1
 8008916:	2c00      	cmp	r4, #0
 8008918:	d1f7      	bne.n	800890a <strncpy+0x6>
 800891a:	2100      	movs	r1, #0
 800891c:	441a      	add	r2, r3
 800891e:	4293      	cmp	r3, r2
 8008920:	d100      	bne.n	8008924 <strncpy+0x20>
 8008922:	bd10      	pop	{r4, pc}
 8008924:	f803 1b01 	strb.w	r1, [r3], #1
 8008928:	e7f9      	b.n	800891e <strncpy+0x1a>
	...

0800892c <strtok>:
 800892c:	4b16      	ldr	r3, [pc, #88]	@ (8008988 <strtok+0x5c>)
 800892e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008932:	681f      	ldr	r7, [r3, #0]
 8008934:	4605      	mov	r5, r0
 8008936:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008938:	460e      	mov	r6, r1
 800893a:	b9ec      	cbnz	r4, 8008978 <strtok+0x4c>
 800893c:	2050      	movs	r0, #80	@ 0x50
 800893e:	f000 f9b1 	bl	8008ca4 <malloc>
 8008942:	4602      	mov	r2, r0
 8008944:	6478      	str	r0, [r7, #68]	@ 0x44
 8008946:	b920      	cbnz	r0, 8008952 <strtok+0x26>
 8008948:	215b      	movs	r1, #91	@ 0x5b
 800894a:	4b10      	ldr	r3, [pc, #64]	@ (800898c <strtok+0x60>)
 800894c:	4810      	ldr	r0, [pc, #64]	@ (8008990 <strtok+0x64>)
 800894e:	f000 f943 	bl	8008bd8 <__assert_func>
 8008952:	e9c0 4400 	strd	r4, r4, [r0]
 8008956:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800895a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800895e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008962:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008966:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800896a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800896e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008972:	6184      	str	r4, [r0, #24]
 8008974:	7704      	strb	r4, [r0, #28]
 8008976:	6244      	str	r4, [r0, #36]	@ 0x24
 8008978:	4631      	mov	r1, r6
 800897a:	4628      	mov	r0, r5
 800897c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800897e:	2301      	movs	r3, #1
 8008980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008984:	f000 b806 	b.w	8008994 <__strtok_r>
 8008988:	2000001c 	.word	0x2000001c
 800898c:	0800cb4b 	.word	0x0800cb4b
 8008990:	0800cb62 	.word	0x0800cb62

08008994 <__strtok_r>:
 8008994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008996:	4604      	mov	r4, r0
 8008998:	b908      	cbnz	r0, 800899e <__strtok_r+0xa>
 800899a:	6814      	ldr	r4, [r2, #0]
 800899c:	b144      	cbz	r4, 80089b0 <__strtok_r+0x1c>
 800899e:	460f      	mov	r7, r1
 80089a0:	4620      	mov	r0, r4
 80089a2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80089a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80089aa:	b91e      	cbnz	r6, 80089b4 <__strtok_r+0x20>
 80089ac:	b965      	cbnz	r5, 80089c8 <__strtok_r+0x34>
 80089ae:	6015      	str	r5, [r2, #0]
 80089b0:	2000      	movs	r0, #0
 80089b2:	e005      	b.n	80089c0 <__strtok_r+0x2c>
 80089b4:	42b5      	cmp	r5, r6
 80089b6:	d1f6      	bne.n	80089a6 <__strtok_r+0x12>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f0      	bne.n	800899e <__strtok_r+0xa>
 80089bc:	6014      	str	r4, [r2, #0]
 80089be:	7003      	strb	r3, [r0, #0]
 80089c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c2:	461c      	mov	r4, r3
 80089c4:	e00c      	b.n	80089e0 <__strtok_r+0x4c>
 80089c6:	b91d      	cbnz	r5, 80089d0 <__strtok_r+0x3c>
 80089c8:	460e      	mov	r6, r1
 80089ca:	4627      	mov	r7, r4
 80089cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089d0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80089d4:	42ab      	cmp	r3, r5
 80089d6:	d1f6      	bne.n	80089c6 <__strtok_r+0x32>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0f2      	beq.n	80089c2 <__strtok_r+0x2e>
 80089dc:	2300      	movs	r3, #0
 80089de:	703b      	strb	r3, [r7, #0]
 80089e0:	6014      	str	r4, [r2, #0]
 80089e2:	e7ed      	b.n	80089c0 <__strtok_r+0x2c>

080089e4 <strstr>:
 80089e4:	780a      	ldrb	r2, [r1, #0]
 80089e6:	b570      	push	{r4, r5, r6, lr}
 80089e8:	b96a      	cbnz	r2, 8008a06 <strstr+0x22>
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d109      	bne.n	8008a04 <strstr+0x20>
 80089f0:	460c      	mov	r4, r1
 80089f2:	4605      	mov	r5, r0
 80089f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0f6      	beq.n	80089ea <strstr+0x6>
 80089fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008a00:	429e      	cmp	r6, r3
 8008a02:	d0f7      	beq.n	80089f4 <strstr+0x10>
 8008a04:	3001      	adds	r0, #1
 8008a06:	7803      	ldrb	r3, [r0, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1ef      	bne.n	80089ec <strstr+0x8>
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	e7ec      	b.n	80089ea <strstr+0x6>

08008a10 <_close_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	2300      	movs	r3, #0
 8008a14:	4d05      	ldr	r5, [pc, #20]	@ (8008a2c <_close_r+0x1c>)
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	f7f9 fdf7 	bl	800260e <_close>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_close_r+0x1a>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_close_r+0x1a>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	20002104 	.word	0x20002104

08008a30 <_reclaim_reent>:
 8008a30:	4b2d      	ldr	r3, [pc, #180]	@ (8008ae8 <_reclaim_reent+0xb8>)
 8008a32:	b570      	push	{r4, r5, r6, lr}
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4604      	mov	r4, r0
 8008a38:	4283      	cmp	r3, r0
 8008a3a:	d053      	beq.n	8008ae4 <_reclaim_reent+0xb4>
 8008a3c:	69c3      	ldr	r3, [r0, #28]
 8008a3e:	b31b      	cbz	r3, 8008a88 <_reclaim_reent+0x58>
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	b163      	cbz	r3, 8008a5e <_reclaim_reent+0x2e>
 8008a44:	2500      	movs	r5, #0
 8008a46:	69e3      	ldr	r3, [r4, #28]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	5959      	ldr	r1, [r3, r5]
 8008a4c:	b9b1      	cbnz	r1, 8008a7c <_reclaim_reent+0x4c>
 8008a4e:	3504      	adds	r5, #4
 8008a50:	2d80      	cmp	r5, #128	@ 0x80
 8008a52:	d1f8      	bne.n	8008a46 <_reclaim_reent+0x16>
 8008a54:	69e3      	ldr	r3, [r4, #28]
 8008a56:	4620      	mov	r0, r4
 8008a58:	68d9      	ldr	r1, [r3, #12]
 8008a5a:	f000 f8db 	bl	8008c14 <_free_r>
 8008a5e:	69e3      	ldr	r3, [r4, #28]
 8008a60:	6819      	ldr	r1, [r3, #0]
 8008a62:	b111      	cbz	r1, 8008a6a <_reclaim_reent+0x3a>
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 f8d5 	bl	8008c14 <_free_r>
 8008a6a:	69e3      	ldr	r3, [r4, #28]
 8008a6c:	689d      	ldr	r5, [r3, #8]
 8008a6e:	b15d      	cbz	r5, 8008a88 <_reclaim_reent+0x58>
 8008a70:	4629      	mov	r1, r5
 8008a72:	4620      	mov	r0, r4
 8008a74:	682d      	ldr	r5, [r5, #0]
 8008a76:	f000 f8cd 	bl	8008c14 <_free_r>
 8008a7a:	e7f8      	b.n	8008a6e <_reclaim_reent+0x3e>
 8008a7c:	680e      	ldr	r6, [r1, #0]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 f8c8 	bl	8008c14 <_free_r>
 8008a84:	4631      	mov	r1, r6
 8008a86:	e7e1      	b.n	8008a4c <_reclaim_reent+0x1c>
 8008a88:	6961      	ldr	r1, [r4, #20]
 8008a8a:	b111      	cbz	r1, 8008a92 <_reclaim_reent+0x62>
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 f8c1 	bl	8008c14 <_free_r>
 8008a92:	69e1      	ldr	r1, [r4, #28]
 8008a94:	b111      	cbz	r1, 8008a9c <_reclaim_reent+0x6c>
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 f8bc 	bl	8008c14 <_free_r>
 8008a9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008a9e:	b111      	cbz	r1, 8008aa6 <_reclaim_reent+0x76>
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 f8b7 	bl	8008c14 <_free_r>
 8008aa6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aa8:	b111      	cbz	r1, 8008ab0 <_reclaim_reent+0x80>
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 f8b2 	bl	8008c14 <_free_r>
 8008ab0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008ab2:	b111      	cbz	r1, 8008aba <_reclaim_reent+0x8a>
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f000 f8ad 	bl	8008c14 <_free_r>
 8008aba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008abc:	b111      	cbz	r1, 8008ac4 <_reclaim_reent+0x94>
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 f8a8 	bl	8008c14 <_free_r>
 8008ac4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008ac6:	b111      	cbz	r1, 8008ace <_reclaim_reent+0x9e>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 f8a3 	bl	8008c14 <_free_r>
 8008ace:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008ad0:	b111      	cbz	r1, 8008ad8 <_reclaim_reent+0xa8>
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 f89e 	bl	8008c14 <_free_r>
 8008ad8:	6a23      	ldr	r3, [r4, #32]
 8008ada:	b11b      	cbz	r3, 8008ae4 <_reclaim_reent+0xb4>
 8008adc:	4620      	mov	r0, r4
 8008ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ae2:	4718      	bx	r3
 8008ae4:	bd70      	pop	{r4, r5, r6, pc}
 8008ae6:	bf00      	nop
 8008ae8:	2000001c 	.word	0x2000001c

08008aec <_lseek_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	4611      	mov	r1, r2
 8008af4:	2200      	movs	r2, #0
 8008af6:	4d05      	ldr	r5, [pc, #20]	@ (8008b0c <_lseek_r+0x20>)
 8008af8:	602a      	str	r2, [r5, #0]
 8008afa:	461a      	mov	r2, r3
 8008afc:	f7f9 fdab 	bl	8002656 <_lseek>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_lseek_r+0x1e>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_lseek_r+0x1e>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	20002104 	.word	0x20002104

08008b10 <_read_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4d05      	ldr	r5, [pc, #20]	@ (8008b30 <_read_r+0x20>)
 8008b1c:	602a      	str	r2, [r5, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f7f9 fd3c 	bl	800259c <_read>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_read_r+0x1e>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_read_r+0x1e>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	20002104 	.word	0x20002104

08008b34 <_write_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	4d05      	ldr	r5, [pc, #20]	@ (8008b54 <_write_r+0x20>)
 8008b40:	602a      	str	r2, [r5, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	f7f9 fd47 	bl	80025d6 <_write>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_write_r+0x1e>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_write_r+0x1e>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	20002104 	.word	0x20002104

08008b58 <__errno>:
 8008b58:	4b01      	ldr	r3, [pc, #4]	@ (8008b60 <__errno+0x8>)
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	2000001c 	.word	0x2000001c

08008b64 <__libc_init_array>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	2600      	movs	r6, #0
 8008b68:	4d0c      	ldr	r5, [pc, #48]	@ (8008b9c <__libc_init_array+0x38>)
 8008b6a:	4c0d      	ldr	r4, [pc, #52]	@ (8008ba0 <__libc_init_array+0x3c>)
 8008b6c:	1b64      	subs	r4, r4, r5
 8008b6e:	10a4      	asrs	r4, r4, #2
 8008b70:	42a6      	cmp	r6, r4
 8008b72:	d109      	bne.n	8008b88 <__libc_init_array+0x24>
 8008b74:	f003 fa8c 	bl	800c090 <_init>
 8008b78:	2600      	movs	r6, #0
 8008b7a:	4d0a      	ldr	r5, [pc, #40]	@ (8008ba4 <__libc_init_array+0x40>)
 8008b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8008ba8 <__libc_init_array+0x44>)
 8008b7e:	1b64      	subs	r4, r4, r5
 8008b80:	10a4      	asrs	r4, r4, #2
 8008b82:	42a6      	cmp	r6, r4
 8008b84:	d105      	bne.n	8008b92 <__libc_init_array+0x2e>
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b8c:	4798      	blx	r3
 8008b8e:	3601      	adds	r6, #1
 8008b90:	e7ee      	b.n	8008b70 <__libc_init_array+0xc>
 8008b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b96:	4798      	blx	r3
 8008b98:	3601      	adds	r6, #1
 8008b9a:	e7f2      	b.n	8008b82 <__libc_init_array+0x1e>
 8008b9c:	0800cf80 	.word	0x0800cf80
 8008ba0:	0800cf80 	.word	0x0800cf80
 8008ba4:	0800cf80 	.word	0x0800cf80
 8008ba8:	0800cf84 	.word	0x0800cf84

08008bac <__retarget_lock_init_recursive>:
 8008bac:	4770      	bx	lr

08008bae <__retarget_lock_acquire_recursive>:
 8008bae:	4770      	bx	lr

08008bb0 <__retarget_lock_release_recursive>:
 8008bb0:	4770      	bx	lr

08008bb2 <memcpy>:
 8008bb2:	440a      	add	r2, r1
 8008bb4:	4291      	cmp	r1, r2
 8008bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bba:	d100      	bne.n	8008bbe <memcpy+0xc>
 8008bbc:	4770      	bx	lr
 8008bbe:	b510      	push	{r4, lr}
 8008bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bc4:	4291      	cmp	r1, r2
 8008bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bca:	d1f9      	bne.n	8008bc0 <memcpy+0xe>
 8008bcc:	bd10      	pop	{r4, pc}
	...

08008bd0 <nanf>:
 8008bd0:	4800      	ldr	r0, [pc, #0]	@ (8008bd4 <nanf+0x4>)
 8008bd2:	4770      	bx	lr
 8008bd4:	7fc00000 	.word	0x7fc00000

08008bd8 <__assert_func>:
 8008bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bda:	4614      	mov	r4, r2
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4b09      	ldr	r3, [pc, #36]	@ (8008c04 <__assert_func+0x2c>)
 8008be0:	4605      	mov	r5, r0
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68d8      	ldr	r0, [r3, #12]
 8008be6:	b14c      	cbz	r4, 8008bfc <__assert_func+0x24>
 8008be8:	4b07      	ldr	r3, [pc, #28]	@ (8008c08 <__assert_func+0x30>)
 8008bea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bee:	9100      	str	r1, [sp, #0]
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	4906      	ldr	r1, [pc, #24]	@ (8008c0c <__assert_func+0x34>)
 8008bf4:	f001 fe34 	bl	800a860 <fiprintf>
 8008bf8:	f001 fef4 	bl	800a9e4 <abort>
 8008bfc:	4b04      	ldr	r3, [pc, #16]	@ (8008c10 <__assert_func+0x38>)
 8008bfe:	461c      	mov	r4, r3
 8008c00:	e7f3      	b.n	8008bea <__assert_func+0x12>
 8008c02:	bf00      	nop
 8008c04:	2000001c 	.word	0x2000001c
 8008c08:	0800cbbc 	.word	0x0800cbbc
 8008c0c:	0800cbc9 	.word	0x0800cbc9
 8008c10:	0800cbf7 	.word	0x0800cbf7

08008c14 <_free_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4605      	mov	r5, r0
 8008c18:	2900      	cmp	r1, #0
 8008c1a:	d040      	beq.n	8008c9e <_free_r+0x8a>
 8008c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c20:	1f0c      	subs	r4, r1, #4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	bfb8      	it	lt
 8008c26:	18e4      	addlt	r4, r4, r3
 8008c28:	f000 f8e6 	bl	8008df8 <__malloc_lock>
 8008c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ca0 <_free_r+0x8c>)
 8008c2e:	6813      	ldr	r3, [r2, #0]
 8008c30:	b933      	cbnz	r3, 8008c40 <_free_r+0x2c>
 8008c32:	6063      	str	r3, [r4, #4]
 8008c34:	6014      	str	r4, [r2, #0]
 8008c36:	4628      	mov	r0, r5
 8008c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c3c:	f000 b8e2 	b.w	8008e04 <__malloc_unlock>
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	d908      	bls.n	8008c56 <_free_r+0x42>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	1821      	adds	r1, r4, r0
 8008c48:	428b      	cmp	r3, r1
 8008c4a:	bf01      	itttt	eq
 8008c4c:	6819      	ldreq	r1, [r3, #0]
 8008c4e:	685b      	ldreq	r3, [r3, #4]
 8008c50:	1809      	addeq	r1, r1, r0
 8008c52:	6021      	streq	r1, [r4, #0]
 8008c54:	e7ed      	b.n	8008c32 <_free_r+0x1e>
 8008c56:	461a      	mov	r2, r3
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	b10b      	cbz	r3, 8008c60 <_free_r+0x4c>
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	d9fa      	bls.n	8008c56 <_free_r+0x42>
 8008c60:	6811      	ldr	r1, [r2, #0]
 8008c62:	1850      	adds	r0, r2, r1
 8008c64:	42a0      	cmp	r0, r4
 8008c66:	d10b      	bne.n	8008c80 <_free_r+0x6c>
 8008c68:	6820      	ldr	r0, [r4, #0]
 8008c6a:	4401      	add	r1, r0
 8008c6c:	1850      	adds	r0, r2, r1
 8008c6e:	4283      	cmp	r3, r0
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	d1e0      	bne.n	8008c36 <_free_r+0x22>
 8008c74:	6818      	ldr	r0, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	4408      	add	r0, r1
 8008c7a:	6010      	str	r0, [r2, #0]
 8008c7c:	6053      	str	r3, [r2, #4]
 8008c7e:	e7da      	b.n	8008c36 <_free_r+0x22>
 8008c80:	d902      	bls.n	8008c88 <_free_r+0x74>
 8008c82:	230c      	movs	r3, #12
 8008c84:	602b      	str	r3, [r5, #0]
 8008c86:	e7d6      	b.n	8008c36 <_free_r+0x22>
 8008c88:	6820      	ldr	r0, [r4, #0]
 8008c8a:	1821      	adds	r1, r4, r0
 8008c8c:	428b      	cmp	r3, r1
 8008c8e:	bf01      	itttt	eq
 8008c90:	6819      	ldreq	r1, [r3, #0]
 8008c92:	685b      	ldreq	r3, [r3, #4]
 8008c94:	1809      	addeq	r1, r1, r0
 8008c96:	6021      	streq	r1, [r4, #0]
 8008c98:	6063      	str	r3, [r4, #4]
 8008c9a:	6054      	str	r4, [r2, #4]
 8008c9c:	e7cb      	b.n	8008c36 <_free_r+0x22>
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	20002110 	.word	0x20002110

08008ca4 <malloc>:
 8008ca4:	4b02      	ldr	r3, [pc, #8]	@ (8008cb0 <malloc+0xc>)
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	f000 b825 	b.w	8008cf8 <_malloc_r>
 8008cae:	bf00      	nop
 8008cb0:	2000001c 	.word	0x2000001c

08008cb4 <sbrk_aligned>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8008cf4 <sbrk_aligned+0x40>)
 8008cb8:	460c      	mov	r4, r1
 8008cba:	6831      	ldr	r1, [r6, #0]
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	b911      	cbnz	r1, 8008cc6 <sbrk_aligned+0x12>
 8008cc0:	f001 fe6c 	bl	800a99c <_sbrk_r>
 8008cc4:	6030      	str	r0, [r6, #0]
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f001 fe67 	bl	800a99c <_sbrk_r>
 8008cce:	1c43      	adds	r3, r0, #1
 8008cd0:	d103      	bne.n	8008cda <sbrk_aligned+0x26>
 8008cd2:	f04f 34ff 	mov.w	r4, #4294967295
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	bd70      	pop	{r4, r5, r6, pc}
 8008cda:	1cc4      	adds	r4, r0, #3
 8008cdc:	f024 0403 	bic.w	r4, r4, #3
 8008ce0:	42a0      	cmp	r0, r4
 8008ce2:	d0f8      	beq.n	8008cd6 <sbrk_aligned+0x22>
 8008ce4:	1a21      	subs	r1, r4, r0
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f001 fe58 	bl	800a99c <_sbrk_r>
 8008cec:	3001      	adds	r0, #1
 8008cee:	d1f2      	bne.n	8008cd6 <sbrk_aligned+0x22>
 8008cf0:	e7ef      	b.n	8008cd2 <sbrk_aligned+0x1e>
 8008cf2:	bf00      	nop
 8008cf4:	2000210c 	.word	0x2000210c

08008cf8 <_malloc_r>:
 8008cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cfc:	1ccd      	adds	r5, r1, #3
 8008cfe:	f025 0503 	bic.w	r5, r5, #3
 8008d02:	3508      	adds	r5, #8
 8008d04:	2d0c      	cmp	r5, #12
 8008d06:	bf38      	it	cc
 8008d08:	250c      	movcc	r5, #12
 8008d0a:	2d00      	cmp	r5, #0
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	db01      	blt.n	8008d14 <_malloc_r+0x1c>
 8008d10:	42a9      	cmp	r1, r5
 8008d12:	d904      	bls.n	8008d1e <_malloc_r+0x26>
 8008d14:	230c      	movs	r3, #12
 8008d16:	6033      	str	r3, [r6, #0]
 8008d18:	2000      	movs	r0, #0
 8008d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008df4 <_malloc_r+0xfc>
 8008d22:	f000 f869 	bl	8008df8 <__malloc_lock>
 8008d26:	f8d8 3000 	ldr.w	r3, [r8]
 8008d2a:	461c      	mov	r4, r3
 8008d2c:	bb44      	cbnz	r4, 8008d80 <_malloc_r+0x88>
 8008d2e:	4629      	mov	r1, r5
 8008d30:	4630      	mov	r0, r6
 8008d32:	f7ff ffbf 	bl	8008cb4 <sbrk_aligned>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	4604      	mov	r4, r0
 8008d3a:	d158      	bne.n	8008dee <_malloc_r+0xf6>
 8008d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8008d40:	4627      	mov	r7, r4
 8008d42:	2f00      	cmp	r7, #0
 8008d44:	d143      	bne.n	8008dce <_malloc_r+0xd6>
 8008d46:	2c00      	cmp	r4, #0
 8008d48:	d04b      	beq.n	8008de2 <_malloc_r+0xea>
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	4639      	mov	r1, r7
 8008d4e:	4630      	mov	r0, r6
 8008d50:	eb04 0903 	add.w	r9, r4, r3
 8008d54:	f001 fe22 	bl	800a99c <_sbrk_r>
 8008d58:	4581      	cmp	r9, r0
 8008d5a:	d142      	bne.n	8008de2 <_malloc_r+0xea>
 8008d5c:	6821      	ldr	r1, [r4, #0]
 8008d5e:	4630      	mov	r0, r6
 8008d60:	1a6d      	subs	r5, r5, r1
 8008d62:	4629      	mov	r1, r5
 8008d64:	f7ff ffa6 	bl	8008cb4 <sbrk_aligned>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d03a      	beq.n	8008de2 <_malloc_r+0xea>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	442b      	add	r3, r5
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	f8d8 3000 	ldr.w	r3, [r8]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	bb62      	cbnz	r2, 8008dd4 <_malloc_r+0xdc>
 8008d7a:	f8c8 7000 	str.w	r7, [r8]
 8008d7e:	e00f      	b.n	8008da0 <_malloc_r+0xa8>
 8008d80:	6822      	ldr	r2, [r4, #0]
 8008d82:	1b52      	subs	r2, r2, r5
 8008d84:	d420      	bmi.n	8008dc8 <_malloc_r+0xd0>
 8008d86:	2a0b      	cmp	r2, #11
 8008d88:	d917      	bls.n	8008dba <_malloc_r+0xc2>
 8008d8a:	1961      	adds	r1, r4, r5
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	6025      	str	r5, [r4, #0]
 8008d90:	bf18      	it	ne
 8008d92:	6059      	strne	r1, [r3, #4]
 8008d94:	6863      	ldr	r3, [r4, #4]
 8008d96:	bf08      	it	eq
 8008d98:	f8c8 1000 	streq.w	r1, [r8]
 8008d9c:	5162      	str	r2, [r4, r5]
 8008d9e:	604b      	str	r3, [r1, #4]
 8008da0:	4630      	mov	r0, r6
 8008da2:	f000 f82f 	bl	8008e04 <__malloc_unlock>
 8008da6:	f104 000b 	add.w	r0, r4, #11
 8008daa:	1d23      	adds	r3, r4, #4
 8008dac:	f020 0007 	bic.w	r0, r0, #7
 8008db0:	1ac2      	subs	r2, r0, r3
 8008db2:	bf1c      	itt	ne
 8008db4:	1a1b      	subne	r3, r3, r0
 8008db6:	50a3      	strne	r3, [r4, r2]
 8008db8:	e7af      	b.n	8008d1a <_malloc_r+0x22>
 8008dba:	6862      	ldr	r2, [r4, #4]
 8008dbc:	42a3      	cmp	r3, r4
 8008dbe:	bf0c      	ite	eq
 8008dc0:	f8c8 2000 	streq.w	r2, [r8]
 8008dc4:	605a      	strne	r2, [r3, #4]
 8008dc6:	e7eb      	b.n	8008da0 <_malloc_r+0xa8>
 8008dc8:	4623      	mov	r3, r4
 8008dca:	6864      	ldr	r4, [r4, #4]
 8008dcc:	e7ae      	b.n	8008d2c <_malloc_r+0x34>
 8008dce:	463c      	mov	r4, r7
 8008dd0:	687f      	ldr	r7, [r7, #4]
 8008dd2:	e7b6      	b.n	8008d42 <_malloc_r+0x4a>
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	d1fb      	bne.n	8008dd4 <_malloc_r+0xdc>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	6053      	str	r3, [r2, #4]
 8008de0:	e7de      	b.n	8008da0 <_malloc_r+0xa8>
 8008de2:	230c      	movs	r3, #12
 8008de4:	4630      	mov	r0, r6
 8008de6:	6033      	str	r3, [r6, #0]
 8008de8:	f000 f80c 	bl	8008e04 <__malloc_unlock>
 8008dec:	e794      	b.n	8008d18 <_malloc_r+0x20>
 8008dee:	6005      	str	r5, [r0, #0]
 8008df0:	e7d6      	b.n	8008da0 <_malloc_r+0xa8>
 8008df2:	bf00      	nop
 8008df4:	20002110 	.word	0x20002110

08008df8 <__malloc_lock>:
 8008df8:	4801      	ldr	r0, [pc, #4]	@ (8008e00 <__malloc_lock+0x8>)
 8008dfa:	f7ff bed8 	b.w	8008bae <__retarget_lock_acquire_recursive>
 8008dfe:	bf00      	nop
 8008e00:	20002108 	.word	0x20002108

08008e04 <__malloc_unlock>:
 8008e04:	4801      	ldr	r0, [pc, #4]	@ (8008e0c <__malloc_unlock+0x8>)
 8008e06:	f7ff bed3 	b.w	8008bb0 <__retarget_lock_release_recursive>
 8008e0a:	bf00      	nop
 8008e0c:	20002108 	.word	0x20002108

08008e10 <sulp>:
 8008e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e14:	460f      	mov	r7, r1
 8008e16:	4690      	mov	r8, r2
 8008e18:	f002 fca4 	bl	800b764 <__ulp>
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	460d      	mov	r5, r1
 8008e20:	f1b8 0f00 	cmp.w	r8, #0
 8008e24:	d011      	beq.n	8008e4a <sulp+0x3a>
 8008e26:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008e2a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	dd0b      	ble.n	8008e4a <sulp+0x3a>
 8008e32:	2400      	movs	r4, #0
 8008e34:	051b      	lsls	r3, r3, #20
 8008e36:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e3a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e3e:	4622      	mov	r2, r4
 8008e40:	462b      	mov	r3, r5
 8008e42:	f7f7 fb53 	bl	80004ec <__aeabi_dmul>
 8008e46:	4604      	mov	r4, r0
 8008e48:	460d      	mov	r5, r1
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e52:	0000      	movs	r0, r0
 8008e54:	0000      	movs	r0, r0
	...

08008e58 <_strtod_l>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	b09f      	sub	sp, #124	@ 0x7c
 8008e5e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e60:	2200      	movs	r2, #0
 8008e62:	460c      	mov	r4, r1
 8008e64:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e66:	f04f 0a00 	mov.w	sl, #0
 8008e6a:	f04f 0b00 	mov.w	fp, #0
 8008e6e:	460a      	mov	r2, r1
 8008e70:	9005      	str	r0, [sp, #20]
 8008e72:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e74:	7811      	ldrb	r1, [r2, #0]
 8008e76:	292b      	cmp	r1, #43	@ 0x2b
 8008e78:	d048      	beq.n	8008f0c <_strtod_l+0xb4>
 8008e7a:	d836      	bhi.n	8008eea <_strtod_l+0x92>
 8008e7c:	290d      	cmp	r1, #13
 8008e7e:	d830      	bhi.n	8008ee2 <_strtod_l+0x8a>
 8008e80:	2908      	cmp	r1, #8
 8008e82:	d830      	bhi.n	8008ee6 <_strtod_l+0x8e>
 8008e84:	2900      	cmp	r1, #0
 8008e86:	d039      	beq.n	8008efc <_strtod_l+0xa4>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008e8e:	782a      	ldrb	r2, [r5, #0]
 8008e90:	2a30      	cmp	r2, #48	@ 0x30
 8008e92:	f040 80b0 	bne.w	8008ff6 <_strtod_l+0x19e>
 8008e96:	786a      	ldrb	r2, [r5, #1]
 8008e98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e9c:	2a58      	cmp	r2, #88	@ 0x58
 8008e9e:	d16c      	bne.n	8008f7a <_strtod_l+0x122>
 8008ea0:	9302      	str	r3, [sp, #8]
 8008ea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ea4:	4a8f      	ldr	r2, [pc, #572]	@ (80090e4 <_strtod_l+0x28c>)
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	ab1a      	add	r3, sp, #104	@ 0x68
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	9805      	ldr	r0, [sp, #20]
 8008eae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008eb0:	a919      	add	r1, sp, #100	@ 0x64
 8008eb2:	f001 fe07 	bl	800aac4 <__gethex>
 8008eb6:	f010 060f 	ands.w	r6, r0, #15
 8008eba:	4604      	mov	r4, r0
 8008ebc:	d005      	beq.n	8008eca <_strtod_l+0x72>
 8008ebe:	2e06      	cmp	r6, #6
 8008ec0:	d126      	bne.n	8008f10 <_strtod_l+0xb8>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ec8:	930e      	str	r3, [sp, #56]	@ 0x38
 8008eca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f040 8582 	bne.w	80099d6 <_strtod_l+0xb7e>
 8008ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ed4:	b1bb      	cbz	r3, 8008f06 <_strtod_l+0xae>
 8008ed6:	4650      	mov	r0, sl
 8008ed8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008edc:	b01f      	add	sp, #124	@ 0x7c
 8008ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee2:	2920      	cmp	r1, #32
 8008ee4:	d1d0      	bne.n	8008e88 <_strtod_l+0x30>
 8008ee6:	3201      	adds	r2, #1
 8008ee8:	e7c3      	b.n	8008e72 <_strtod_l+0x1a>
 8008eea:	292d      	cmp	r1, #45	@ 0x2d
 8008eec:	d1cc      	bne.n	8008e88 <_strtod_l+0x30>
 8008eee:	2101      	movs	r1, #1
 8008ef0:	910e      	str	r1, [sp, #56]	@ 0x38
 8008ef2:	1c51      	adds	r1, r2, #1
 8008ef4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ef6:	7852      	ldrb	r2, [r2, #1]
 8008ef8:	2a00      	cmp	r2, #0
 8008efa:	d1c7      	bne.n	8008e8c <_strtod_l+0x34>
 8008efc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008efe:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f040 8566 	bne.w	80099d2 <_strtod_l+0xb7a>
 8008f06:	4650      	mov	r0, sl
 8008f08:	4659      	mov	r1, fp
 8008f0a:	e7e7      	b.n	8008edc <_strtod_l+0x84>
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	e7ef      	b.n	8008ef0 <_strtod_l+0x98>
 8008f10:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f12:	b13a      	cbz	r2, 8008f24 <_strtod_l+0xcc>
 8008f14:	2135      	movs	r1, #53	@ 0x35
 8008f16:	a81c      	add	r0, sp, #112	@ 0x70
 8008f18:	f002 fd14 	bl	800b944 <__copybits>
 8008f1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f1e:	9805      	ldr	r0, [sp, #20]
 8008f20:	f002 f8f4 	bl	800b10c <_Bfree>
 8008f24:	3e01      	subs	r6, #1
 8008f26:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f28:	2e04      	cmp	r6, #4
 8008f2a:	d806      	bhi.n	8008f3a <_strtod_l+0xe2>
 8008f2c:	e8df f006 	tbb	[pc, r6]
 8008f30:	201d0314 	.word	0x201d0314
 8008f34:	14          	.byte	0x14
 8008f35:	00          	.byte	0x00
 8008f36:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f3a:	05e1      	lsls	r1, r4, #23
 8008f3c:	bf48      	it	mi
 8008f3e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f42:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f46:	0d1b      	lsrs	r3, r3, #20
 8008f48:	051b      	lsls	r3, r3, #20
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1bd      	bne.n	8008eca <_strtod_l+0x72>
 8008f4e:	f7ff fe03 	bl	8008b58 <__errno>
 8008f52:	2322      	movs	r3, #34	@ 0x22
 8008f54:	6003      	str	r3, [r0, #0]
 8008f56:	e7b8      	b.n	8008eca <_strtod_l+0x72>
 8008f58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f64:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f68:	e7e7      	b.n	8008f3a <_strtod_l+0xe2>
 8008f6a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80090e8 <_strtod_l+0x290>
 8008f6e:	e7e4      	b.n	8008f3a <_strtod_l+0xe2>
 8008f70:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f74:	f04f 3aff 	mov.w	sl, #4294967295
 8008f78:	e7df      	b.n	8008f3a <_strtod_l+0xe2>
 8008f7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f80:	785b      	ldrb	r3, [r3, #1]
 8008f82:	2b30      	cmp	r3, #48	@ 0x30
 8008f84:	d0f9      	beq.n	8008f7a <_strtod_l+0x122>
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d09f      	beq.n	8008eca <_strtod_l+0x72>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	2700      	movs	r7, #0
 8008f8e:	220a      	movs	r2, #10
 8008f90:	46b9      	mov	r9, r7
 8008f92:	9308      	str	r3, [sp, #32]
 8008f94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f96:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008f98:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f9a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008f9c:	7805      	ldrb	r5, [r0, #0]
 8008f9e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008fa2:	b2d9      	uxtb	r1, r3
 8008fa4:	2909      	cmp	r1, #9
 8008fa6:	d928      	bls.n	8008ffa <_strtod_l+0x1a2>
 8008fa8:	2201      	movs	r2, #1
 8008faa:	4950      	ldr	r1, [pc, #320]	@ (80090ec <_strtod_l+0x294>)
 8008fac:	f7ff fc98 	bl	80088e0 <strncmp>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d032      	beq.n	800901a <_strtod_l+0x1c2>
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4603      	mov	r3, r0
 8008fba:	464d      	mov	r5, r9
 8008fbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fbe:	2a65      	cmp	r2, #101	@ 0x65
 8008fc0:	d001      	beq.n	8008fc6 <_strtod_l+0x16e>
 8008fc2:	2a45      	cmp	r2, #69	@ 0x45
 8008fc4:	d114      	bne.n	8008ff0 <_strtod_l+0x198>
 8008fc6:	b91d      	cbnz	r5, 8008fd0 <_strtod_l+0x178>
 8008fc8:	9a08      	ldr	r2, [sp, #32]
 8008fca:	4302      	orrs	r2, r0
 8008fcc:	d096      	beq.n	8008efc <_strtod_l+0xa4>
 8008fce:	2500      	movs	r5, #0
 8008fd0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008fd2:	1c62      	adds	r2, r4, #1
 8008fd4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fd6:	7862      	ldrb	r2, [r4, #1]
 8008fd8:	2a2b      	cmp	r2, #43	@ 0x2b
 8008fda:	d07a      	beq.n	80090d2 <_strtod_l+0x27a>
 8008fdc:	2a2d      	cmp	r2, #45	@ 0x2d
 8008fde:	d07e      	beq.n	80090de <_strtod_l+0x286>
 8008fe0:	f04f 0c00 	mov.w	ip, #0
 8008fe4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008fe8:	2909      	cmp	r1, #9
 8008fea:	f240 8085 	bls.w	80090f8 <_strtod_l+0x2a0>
 8008fee:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ff0:	f04f 0800 	mov.w	r8, #0
 8008ff4:	e0a5      	b.n	8009142 <_strtod_l+0x2ea>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e7c8      	b.n	8008f8c <_strtod_l+0x134>
 8008ffa:	f1b9 0f08 	cmp.w	r9, #8
 8008ffe:	bfd8      	it	le
 8009000:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009002:	f100 0001 	add.w	r0, r0, #1
 8009006:	bfd6      	itet	le
 8009008:	fb02 3301 	mlale	r3, r2, r1, r3
 800900c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009010:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009012:	f109 0901 	add.w	r9, r9, #1
 8009016:	9019      	str	r0, [sp, #100]	@ 0x64
 8009018:	e7bf      	b.n	8008f9a <_strtod_l+0x142>
 800901a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800901c:	1c5a      	adds	r2, r3, #1
 800901e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009020:	785a      	ldrb	r2, [r3, #1]
 8009022:	f1b9 0f00 	cmp.w	r9, #0
 8009026:	d03b      	beq.n	80090a0 <_strtod_l+0x248>
 8009028:	464d      	mov	r5, r9
 800902a:	900a      	str	r0, [sp, #40]	@ 0x28
 800902c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009030:	2b09      	cmp	r3, #9
 8009032:	d912      	bls.n	800905a <_strtod_l+0x202>
 8009034:	2301      	movs	r3, #1
 8009036:	e7c2      	b.n	8008fbe <_strtod_l+0x166>
 8009038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800903a:	3001      	adds	r0, #1
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009040:	785a      	ldrb	r2, [r3, #1]
 8009042:	2a30      	cmp	r2, #48	@ 0x30
 8009044:	d0f8      	beq.n	8009038 <_strtod_l+0x1e0>
 8009046:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800904a:	2b08      	cmp	r3, #8
 800904c:	f200 84c8 	bhi.w	80099e0 <_strtod_l+0xb88>
 8009050:	900a      	str	r0, [sp, #40]	@ 0x28
 8009052:	2000      	movs	r0, #0
 8009054:	4605      	mov	r5, r0
 8009056:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009058:	930c      	str	r3, [sp, #48]	@ 0x30
 800905a:	3a30      	subs	r2, #48	@ 0x30
 800905c:	f100 0301 	add.w	r3, r0, #1
 8009060:	d018      	beq.n	8009094 <_strtod_l+0x23c>
 8009062:	462e      	mov	r6, r5
 8009064:	f04f 0e0a 	mov.w	lr, #10
 8009068:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800906a:	4419      	add	r1, r3
 800906c:	910a      	str	r1, [sp, #40]	@ 0x28
 800906e:	1c71      	adds	r1, r6, #1
 8009070:	eba1 0c05 	sub.w	ip, r1, r5
 8009074:	4563      	cmp	r3, ip
 8009076:	dc15      	bgt.n	80090a4 <_strtod_l+0x24c>
 8009078:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800907c:	182b      	adds	r3, r5, r0
 800907e:	2b08      	cmp	r3, #8
 8009080:	f105 0501 	add.w	r5, r5, #1
 8009084:	4405      	add	r5, r0
 8009086:	dc1a      	bgt.n	80090be <_strtod_l+0x266>
 8009088:	230a      	movs	r3, #10
 800908a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800908c:	fb03 2301 	mla	r3, r3, r1, r2
 8009090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009092:	2300      	movs	r3, #0
 8009094:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009096:	4618      	mov	r0, r3
 8009098:	1c51      	adds	r1, r2, #1
 800909a:	9119      	str	r1, [sp, #100]	@ 0x64
 800909c:	7852      	ldrb	r2, [r2, #1]
 800909e:	e7c5      	b.n	800902c <_strtod_l+0x1d4>
 80090a0:	4648      	mov	r0, r9
 80090a2:	e7ce      	b.n	8009042 <_strtod_l+0x1ea>
 80090a4:	2e08      	cmp	r6, #8
 80090a6:	dc05      	bgt.n	80090b4 <_strtod_l+0x25c>
 80090a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80090aa:	fb0e f606 	mul.w	r6, lr, r6
 80090ae:	960b      	str	r6, [sp, #44]	@ 0x2c
 80090b0:	460e      	mov	r6, r1
 80090b2:	e7dc      	b.n	800906e <_strtod_l+0x216>
 80090b4:	2910      	cmp	r1, #16
 80090b6:	bfd8      	it	le
 80090b8:	fb0e f707 	mulle.w	r7, lr, r7
 80090bc:	e7f8      	b.n	80090b0 <_strtod_l+0x258>
 80090be:	2b0f      	cmp	r3, #15
 80090c0:	bfdc      	itt	le
 80090c2:	230a      	movle	r3, #10
 80090c4:	fb03 2707 	mlale	r7, r3, r7, r2
 80090c8:	e7e3      	b.n	8009092 <_strtod_l+0x23a>
 80090ca:	2300      	movs	r3, #0
 80090cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80090ce:	2301      	movs	r3, #1
 80090d0:	e77a      	b.n	8008fc8 <_strtod_l+0x170>
 80090d2:	f04f 0c00 	mov.w	ip, #0
 80090d6:	1ca2      	adds	r2, r4, #2
 80090d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80090da:	78a2      	ldrb	r2, [r4, #2]
 80090dc:	e782      	b.n	8008fe4 <_strtod_l+0x18c>
 80090de:	f04f 0c01 	mov.w	ip, #1
 80090e2:	e7f8      	b.n	80090d6 <_strtod_l+0x27e>
 80090e4:	0800cd3c 	.word	0x0800cd3c
 80090e8:	7ff00000 	.word	0x7ff00000
 80090ec:	0800cbf8 	.word	0x0800cbf8
 80090f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090f2:	1c51      	adds	r1, r2, #1
 80090f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80090f6:	7852      	ldrb	r2, [r2, #1]
 80090f8:	2a30      	cmp	r2, #48	@ 0x30
 80090fa:	d0f9      	beq.n	80090f0 <_strtod_l+0x298>
 80090fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009100:	2908      	cmp	r1, #8
 8009102:	f63f af75 	bhi.w	8008ff0 <_strtod_l+0x198>
 8009106:	f04f 080a 	mov.w	r8, #10
 800910a:	3a30      	subs	r2, #48	@ 0x30
 800910c:	9209      	str	r2, [sp, #36]	@ 0x24
 800910e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009110:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009112:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009114:	1c56      	adds	r6, r2, #1
 8009116:	9619      	str	r6, [sp, #100]	@ 0x64
 8009118:	7852      	ldrb	r2, [r2, #1]
 800911a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800911e:	f1be 0f09 	cmp.w	lr, #9
 8009122:	d939      	bls.n	8009198 <_strtod_l+0x340>
 8009124:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009126:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800912a:	1a76      	subs	r6, r6, r1
 800912c:	2e08      	cmp	r6, #8
 800912e:	dc03      	bgt.n	8009138 <_strtod_l+0x2e0>
 8009130:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009132:	4588      	cmp	r8, r1
 8009134:	bfa8      	it	ge
 8009136:	4688      	movge	r8, r1
 8009138:	f1bc 0f00 	cmp.w	ip, #0
 800913c:	d001      	beq.n	8009142 <_strtod_l+0x2ea>
 800913e:	f1c8 0800 	rsb	r8, r8, #0
 8009142:	2d00      	cmp	r5, #0
 8009144:	d14e      	bne.n	80091e4 <_strtod_l+0x38c>
 8009146:	9908      	ldr	r1, [sp, #32]
 8009148:	4308      	orrs	r0, r1
 800914a:	f47f aebe 	bne.w	8008eca <_strtod_l+0x72>
 800914e:	2b00      	cmp	r3, #0
 8009150:	f47f aed4 	bne.w	8008efc <_strtod_l+0xa4>
 8009154:	2a69      	cmp	r2, #105	@ 0x69
 8009156:	d028      	beq.n	80091aa <_strtod_l+0x352>
 8009158:	dc25      	bgt.n	80091a6 <_strtod_l+0x34e>
 800915a:	2a49      	cmp	r2, #73	@ 0x49
 800915c:	d025      	beq.n	80091aa <_strtod_l+0x352>
 800915e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009160:	f47f aecc 	bne.w	8008efc <_strtod_l+0xa4>
 8009164:	4999      	ldr	r1, [pc, #612]	@ (80093cc <_strtod_l+0x574>)
 8009166:	a819      	add	r0, sp, #100	@ 0x64
 8009168:	f001 fece 	bl	800af08 <__match>
 800916c:	2800      	cmp	r0, #0
 800916e:	f43f aec5 	beq.w	8008efc <_strtod_l+0xa4>
 8009172:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	2b28      	cmp	r3, #40	@ 0x28
 8009178:	d12e      	bne.n	80091d8 <_strtod_l+0x380>
 800917a:	4995      	ldr	r1, [pc, #596]	@ (80093d0 <_strtod_l+0x578>)
 800917c:	aa1c      	add	r2, sp, #112	@ 0x70
 800917e:	a819      	add	r0, sp, #100	@ 0x64
 8009180:	f001 fed6 	bl	800af30 <__hexnan>
 8009184:	2805      	cmp	r0, #5
 8009186:	d127      	bne.n	80091d8 <_strtod_l+0x380>
 8009188:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800918a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800918e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009192:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009196:	e698      	b.n	8008eca <_strtod_l+0x72>
 8009198:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800919a:	fb08 2101 	mla	r1, r8, r1, r2
 800919e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80091a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80091a4:	e7b5      	b.n	8009112 <_strtod_l+0x2ba>
 80091a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80091a8:	e7da      	b.n	8009160 <_strtod_l+0x308>
 80091aa:	498a      	ldr	r1, [pc, #552]	@ (80093d4 <_strtod_l+0x57c>)
 80091ac:	a819      	add	r0, sp, #100	@ 0x64
 80091ae:	f001 feab 	bl	800af08 <__match>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f43f aea2 	beq.w	8008efc <_strtod_l+0xa4>
 80091b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091ba:	4987      	ldr	r1, [pc, #540]	@ (80093d8 <_strtod_l+0x580>)
 80091bc:	3b01      	subs	r3, #1
 80091be:	a819      	add	r0, sp, #100	@ 0x64
 80091c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80091c2:	f001 fea1 	bl	800af08 <__match>
 80091c6:	b910      	cbnz	r0, 80091ce <_strtod_l+0x376>
 80091c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091ca:	3301      	adds	r3, #1
 80091cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80091ce:	f04f 0a00 	mov.w	sl, #0
 80091d2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80093dc <_strtod_l+0x584>
 80091d6:	e678      	b.n	8008eca <_strtod_l+0x72>
 80091d8:	4881      	ldr	r0, [pc, #516]	@ (80093e0 <_strtod_l+0x588>)
 80091da:	f001 fbfd 	bl	800a9d8 <nan>
 80091de:	4682      	mov	sl, r0
 80091e0:	468b      	mov	fp, r1
 80091e2:	e672      	b.n	8008eca <_strtod_l+0x72>
 80091e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e6:	f1b9 0f00 	cmp.w	r9, #0
 80091ea:	bf08      	it	eq
 80091ec:	46a9      	moveq	r9, r5
 80091ee:	eba8 0303 	sub.w	r3, r8, r3
 80091f2:	2d10      	cmp	r5, #16
 80091f4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80091f6:	462c      	mov	r4, r5
 80091f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80091fa:	bfa8      	it	ge
 80091fc:	2410      	movge	r4, #16
 80091fe:	f7f7 f8fb 	bl	80003f8 <__aeabi_ui2d>
 8009202:	2d09      	cmp	r5, #9
 8009204:	4682      	mov	sl, r0
 8009206:	468b      	mov	fp, r1
 8009208:	dc11      	bgt.n	800922e <_strtod_l+0x3d6>
 800920a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800920c:	2b00      	cmp	r3, #0
 800920e:	f43f ae5c 	beq.w	8008eca <_strtod_l+0x72>
 8009212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009214:	dd76      	ble.n	8009304 <_strtod_l+0x4ac>
 8009216:	2b16      	cmp	r3, #22
 8009218:	dc5d      	bgt.n	80092d6 <_strtod_l+0x47e>
 800921a:	4972      	ldr	r1, [pc, #456]	@ (80093e4 <_strtod_l+0x58c>)
 800921c:	4652      	mov	r2, sl
 800921e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009222:	465b      	mov	r3, fp
 8009224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009228:	f7f7 f960 	bl	80004ec <__aeabi_dmul>
 800922c:	e7d7      	b.n	80091de <_strtod_l+0x386>
 800922e:	4b6d      	ldr	r3, [pc, #436]	@ (80093e4 <_strtod_l+0x58c>)
 8009230:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009234:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009238:	f7f7 f958 	bl	80004ec <__aeabi_dmul>
 800923c:	4682      	mov	sl, r0
 800923e:	4638      	mov	r0, r7
 8009240:	468b      	mov	fp, r1
 8009242:	f7f7 f8d9 	bl	80003f8 <__aeabi_ui2d>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4650      	mov	r0, sl
 800924c:	4659      	mov	r1, fp
 800924e:	f7f6 ff97 	bl	8000180 <__adddf3>
 8009252:	2d0f      	cmp	r5, #15
 8009254:	4682      	mov	sl, r0
 8009256:	468b      	mov	fp, r1
 8009258:	ddd7      	ble.n	800920a <_strtod_l+0x3b2>
 800925a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925c:	1b2c      	subs	r4, r5, r4
 800925e:	441c      	add	r4, r3
 8009260:	2c00      	cmp	r4, #0
 8009262:	f340 8093 	ble.w	800938c <_strtod_l+0x534>
 8009266:	f014 030f 	ands.w	r3, r4, #15
 800926a:	d00a      	beq.n	8009282 <_strtod_l+0x42a>
 800926c:	495d      	ldr	r1, [pc, #372]	@ (80093e4 <_strtod_l+0x58c>)
 800926e:	4652      	mov	r2, sl
 8009270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009278:	465b      	mov	r3, fp
 800927a:	f7f7 f937 	bl	80004ec <__aeabi_dmul>
 800927e:	4682      	mov	sl, r0
 8009280:	468b      	mov	fp, r1
 8009282:	f034 040f 	bics.w	r4, r4, #15
 8009286:	d073      	beq.n	8009370 <_strtod_l+0x518>
 8009288:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800928c:	dd49      	ble.n	8009322 <_strtod_l+0x4ca>
 800928e:	2400      	movs	r4, #0
 8009290:	46a0      	mov	r8, r4
 8009292:	46a1      	mov	r9, r4
 8009294:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009296:	2322      	movs	r3, #34	@ 0x22
 8009298:	f04f 0a00 	mov.w	sl, #0
 800929c:	9a05      	ldr	r2, [sp, #20]
 800929e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80093dc <_strtod_l+0x584>
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f43f ae0f 	beq.w	8008eca <_strtod_l+0x72>
 80092ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092ae:	9805      	ldr	r0, [sp, #20]
 80092b0:	f001 ff2c 	bl	800b10c <_Bfree>
 80092b4:	4649      	mov	r1, r9
 80092b6:	9805      	ldr	r0, [sp, #20]
 80092b8:	f001 ff28 	bl	800b10c <_Bfree>
 80092bc:	4641      	mov	r1, r8
 80092be:	9805      	ldr	r0, [sp, #20]
 80092c0:	f001 ff24 	bl	800b10c <_Bfree>
 80092c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092c6:	9805      	ldr	r0, [sp, #20]
 80092c8:	f001 ff20 	bl	800b10c <_Bfree>
 80092cc:	4621      	mov	r1, r4
 80092ce:	9805      	ldr	r0, [sp, #20]
 80092d0:	f001 ff1c 	bl	800b10c <_Bfree>
 80092d4:	e5f9      	b.n	8008eca <_strtod_l+0x72>
 80092d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80092dc:	4293      	cmp	r3, r2
 80092de:	dbbc      	blt.n	800925a <_strtod_l+0x402>
 80092e0:	4c40      	ldr	r4, [pc, #256]	@ (80093e4 <_strtod_l+0x58c>)
 80092e2:	f1c5 050f 	rsb	r5, r5, #15
 80092e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80092ea:	4652      	mov	r2, sl
 80092ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f0:	465b      	mov	r3, fp
 80092f2:	f7f7 f8fb 	bl	80004ec <__aeabi_dmul>
 80092f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f8:	1b5d      	subs	r5, r3, r5
 80092fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80092fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009302:	e791      	b.n	8009228 <_strtod_l+0x3d0>
 8009304:	3316      	adds	r3, #22
 8009306:	dba8      	blt.n	800925a <_strtod_l+0x402>
 8009308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800930a:	4650      	mov	r0, sl
 800930c:	eba3 0808 	sub.w	r8, r3, r8
 8009310:	4b34      	ldr	r3, [pc, #208]	@ (80093e4 <_strtod_l+0x58c>)
 8009312:	4659      	mov	r1, fp
 8009314:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009318:	e9d8 2300 	ldrd	r2, r3, [r8]
 800931c:	f7f7 fa10 	bl	8000740 <__aeabi_ddiv>
 8009320:	e75d      	b.n	80091de <_strtod_l+0x386>
 8009322:	2300      	movs	r3, #0
 8009324:	4650      	mov	r0, sl
 8009326:	4659      	mov	r1, fp
 8009328:	461e      	mov	r6, r3
 800932a:	4f2f      	ldr	r7, [pc, #188]	@ (80093e8 <_strtod_l+0x590>)
 800932c:	1124      	asrs	r4, r4, #4
 800932e:	2c01      	cmp	r4, #1
 8009330:	dc21      	bgt.n	8009376 <_strtod_l+0x51e>
 8009332:	b10b      	cbz	r3, 8009338 <_strtod_l+0x4e0>
 8009334:	4682      	mov	sl, r0
 8009336:	468b      	mov	fp, r1
 8009338:	492b      	ldr	r1, [pc, #172]	@ (80093e8 <_strtod_l+0x590>)
 800933a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800933e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009342:	4652      	mov	r2, sl
 8009344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009348:	465b      	mov	r3, fp
 800934a:	f7f7 f8cf 	bl	80004ec <__aeabi_dmul>
 800934e:	4b23      	ldr	r3, [pc, #140]	@ (80093dc <_strtod_l+0x584>)
 8009350:	460a      	mov	r2, r1
 8009352:	400b      	ands	r3, r1
 8009354:	4925      	ldr	r1, [pc, #148]	@ (80093ec <_strtod_l+0x594>)
 8009356:	4682      	mov	sl, r0
 8009358:	428b      	cmp	r3, r1
 800935a:	d898      	bhi.n	800928e <_strtod_l+0x436>
 800935c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009360:	428b      	cmp	r3, r1
 8009362:	bf86      	itte	hi
 8009364:	f04f 3aff 	movhi.w	sl, #4294967295
 8009368:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80093f0 <_strtod_l+0x598>
 800936c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009370:	2300      	movs	r3, #0
 8009372:	9308      	str	r3, [sp, #32]
 8009374:	e076      	b.n	8009464 <_strtod_l+0x60c>
 8009376:	07e2      	lsls	r2, r4, #31
 8009378:	d504      	bpl.n	8009384 <_strtod_l+0x52c>
 800937a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800937e:	f7f7 f8b5 	bl	80004ec <__aeabi_dmul>
 8009382:	2301      	movs	r3, #1
 8009384:	3601      	adds	r6, #1
 8009386:	1064      	asrs	r4, r4, #1
 8009388:	3708      	adds	r7, #8
 800938a:	e7d0      	b.n	800932e <_strtod_l+0x4d6>
 800938c:	d0f0      	beq.n	8009370 <_strtod_l+0x518>
 800938e:	4264      	negs	r4, r4
 8009390:	f014 020f 	ands.w	r2, r4, #15
 8009394:	d00a      	beq.n	80093ac <_strtod_l+0x554>
 8009396:	4b13      	ldr	r3, [pc, #76]	@ (80093e4 <_strtod_l+0x58c>)
 8009398:	4650      	mov	r0, sl
 800939a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800939e:	4659      	mov	r1, fp
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f7f7 f9cc 	bl	8000740 <__aeabi_ddiv>
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	1124      	asrs	r4, r4, #4
 80093ae:	d0df      	beq.n	8009370 <_strtod_l+0x518>
 80093b0:	2c1f      	cmp	r4, #31
 80093b2:	dd1f      	ble.n	80093f4 <_strtod_l+0x59c>
 80093b4:	2400      	movs	r4, #0
 80093b6:	46a0      	mov	r8, r4
 80093b8:	46a1      	mov	r9, r4
 80093ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093bc:	2322      	movs	r3, #34	@ 0x22
 80093be:	9a05      	ldr	r2, [sp, #20]
 80093c0:	f04f 0a00 	mov.w	sl, #0
 80093c4:	f04f 0b00 	mov.w	fp, #0
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	e76b      	b.n	80092a4 <_strtod_l+0x44c>
 80093cc:	0800cc03 	.word	0x0800cc03
 80093d0:	0800cd28 	.word	0x0800cd28
 80093d4:	0800cbfa 	.word	0x0800cbfa
 80093d8:	0800cbfd 	.word	0x0800cbfd
 80093dc:	7ff00000 	.word	0x7ff00000
 80093e0:	0800cbf7 	.word	0x0800cbf7
 80093e4:	0800ceb0 	.word	0x0800ceb0
 80093e8:	0800ce88 	.word	0x0800ce88
 80093ec:	7ca00000 	.word	0x7ca00000
 80093f0:	7fefffff 	.word	0x7fefffff
 80093f4:	f014 0310 	ands.w	r3, r4, #16
 80093f8:	bf18      	it	ne
 80093fa:	236a      	movne	r3, #106	@ 0x6a
 80093fc:	4650      	mov	r0, sl
 80093fe:	9308      	str	r3, [sp, #32]
 8009400:	4659      	mov	r1, fp
 8009402:	2300      	movs	r3, #0
 8009404:	4e77      	ldr	r6, [pc, #476]	@ (80095e4 <_strtod_l+0x78c>)
 8009406:	07e7      	lsls	r7, r4, #31
 8009408:	d504      	bpl.n	8009414 <_strtod_l+0x5bc>
 800940a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800940e:	f7f7 f86d 	bl	80004ec <__aeabi_dmul>
 8009412:	2301      	movs	r3, #1
 8009414:	1064      	asrs	r4, r4, #1
 8009416:	f106 0608 	add.w	r6, r6, #8
 800941a:	d1f4      	bne.n	8009406 <_strtod_l+0x5ae>
 800941c:	b10b      	cbz	r3, 8009422 <_strtod_l+0x5ca>
 800941e:	4682      	mov	sl, r0
 8009420:	468b      	mov	fp, r1
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	b1b3      	cbz	r3, 8009454 <_strtod_l+0x5fc>
 8009426:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800942a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800942e:	2b00      	cmp	r3, #0
 8009430:	4659      	mov	r1, fp
 8009432:	dd0f      	ble.n	8009454 <_strtod_l+0x5fc>
 8009434:	2b1f      	cmp	r3, #31
 8009436:	dd58      	ble.n	80094ea <_strtod_l+0x692>
 8009438:	2b34      	cmp	r3, #52	@ 0x34
 800943a:	bfd8      	it	le
 800943c:	f04f 33ff 	movle.w	r3, #4294967295
 8009440:	f04f 0a00 	mov.w	sl, #0
 8009444:	bfcf      	iteee	gt
 8009446:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800944a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800944e:	4093      	lslle	r3, r2
 8009450:	ea03 0b01 	andle.w	fp, r3, r1
 8009454:	2200      	movs	r2, #0
 8009456:	2300      	movs	r3, #0
 8009458:	4650      	mov	r0, sl
 800945a:	4659      	mov	r1, fp
 800945c:	f7f7 faae 	bl	80009bc <__aeabi_dcmpeq>
 8009460:	2800      	cmp	r0, #0
 8009462:	d1a7      	bne.n	80093b4 <_strtod_l+0x55c>
 8009464:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009466:	464a      	mov	r2, r9
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800946c:	462b      	mov	r3, r5
 800946e:	9805      	ldr	r0, [sp, #20]
 8009470:	f001 feb4 	bl	800b1dc <__s2b>
 8009474:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009476:	2800      	cmp	r0, #0
 8009478:	f43f af09 	beq.w	800928e <_strtod_l+0x436>
 800947c:	2400      	movs	r4, #0
 800947e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009482:	2a00      	cmp	r2, #0
 8009484:	eba3 0308 	sub.w	r3, r3, r8
 8009488:	bfa8      	it	ge
 800948a:	2300      	movge	r3, #0
 800948c:	46a0      	mov	r8, r4
 800948e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009490:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009494:	9316      	str	r3, [sp, #88]	@ 0x58
 8009496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009498:	9805      	ldr	r0, [sp, #20]
 800949a:	6859      	ldr	r1, [r3, #4]
 800949c:	f001 fdf6 	bl	800b08c <_Balloc>
 80094a0:	4681      	mov	r9, r0
 80094a2:	2800      	cmp	r0, #0
 80094a4:	f43f aef7 	beq.w	8009296 <_strtod_l+0x43e>
 80094a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094aa:	300c      	adds	r0, #12
 80094ac:	691a      	ldr	r2, [r3, #16]
 80094ae:	f103 010c 	add.w	r1, r3, #12
 80094b2:	3202      	adds	r2, #2
 80094b4:	0092      	lsls	r2, r2, #2
 80094b6:	f7ff fb7c 	bl	8008bb2 <memcpy>
 80094ba:	ab1c      	add	r3, sp, #112	@ 0x70
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	4652      	mov	r2, sl
 80094c4:	465b      	mov	r3, fp
 80094c6:	9805      	ldr	r0, [sp, #20]
 80094c8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80094cc:	f002 f9b2 	bl	800b834 <__d2b>
 80094d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80094d2:	2800      	cmp	r0, #0
 80094d4:	f43f aedf 	beq.w	8009296 <_strtod_l+0x43e>
 80094d8:	2101      	movs	r1, #1
 80094da:	9805      	ldr	r0, [sp, #20]
 80094dc:	f001 ff14 	bl	800b308 <__i2b>
 80094e0:	4680      	mov	r8, r0
 80094e2:	b948      	cbnz	r0, 80094f8 <_strtod_l+0x6a0>
 80094e4:	f04f 0800 	mov.w	r8, #0
 80094e8:	e6d5      	b.n	8009296 <_strtod_l+0x43e>
 80094ea:	f04f 32ff 	mov.w	r2, #4294967295
 80094ee:	fa02 f303 	lsl.w	r3, r2, r3
 80094f2:	ea03 0a0a 	and.w	sl, r3, sl
 80094f6:	e7ad      	b.n	8009454 <_strtod_l+0x5fc>
 80094f8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80094fa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	bfab      	itete	ge
 8009500:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009502:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009504:	18ef      	addge	r7, r5, r3
 8009506:	1b5e      	sublt	r6, r3, r5
 8009508:	9b08      	ldr	r3, [sp, #32]
 800950a:	bfa8      	it	ge
 800950c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800950e:	eba5 0503 	sub.w	r5, r5, r3
 8009512:	4415      	add	r5, r2
 8009514:	4b34      	ldr	r3, [pc, #208]	@ (80095e8 <_strtod_l+0x790>)
 8009516:	f105 35ff 	add.w	r5, r5, #4294967295
 800951a:	bfb8      	it	lt
 800951c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800951e:	429d      	cmp	r5, r3
 8009520:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009524:	da50      	bge.n	80095c8 <_strtod_l+0x770>
 8009526:	1b5b      	subs	r3, r3, r5
 8009528:	2b1f      	cmp	r3, #31
 800952a:	f04f 0101 	mov.w	r1, #1
 800952e:	eba2 0203 	sub.w	r2, r2, r3
 8009532:	dc3d      	bgt.n	80095b0 <_strtod_l+0x758>
 8009534:	fa01 f303 	lsl.w	r3, r1, r3
 8009538:	9313      	str	r3, [sp, #76]	@ 0x4c
 800953a:	2300      	movs	r3, #0
 800953c:	9310      	str	r3, [sp, #64]	@ 0x40
 800953e:	18bd      	adds	r5, r7, r2
 8009540:	9b08      	ldr	r3, [sp, #32]
 8009542:	42af      	cmp	r7, r5
 8009544:	4416      	add	r6, r2
 8009546:	441e      	add	r6, r3
 8009548:	463b      	mov	r3, r7
 800954a:	bfa8      	it	ge
 800954c:	462b      	movge	r3, r5
 800954e:	42b3      	cmp	r3, r6
 8009550:	bfa8      	it	ge
 8009552:	4633      	movge	r3, r6
 8009554:	2b00      	cmp	r3, #0
 8009556:	bfc2      	ittt	gt
 8009558:	1aed      	subgt	r5, r5, r3
 800955a:	1af6      	subgt	r6, r6, r3
 800955c:	1aff      	subgt	r7, r7, r3
 800955e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009560:	2b00      	cmp	r3, #0
 8009562:	dd16      	ble.n	8009592 <_strtod_l+0x73a>
 8009564:	4641      	mov	r1, r8
 8009566:	461a      	mov	r2, r3
 8009568:	9805      	ldr	r0, [sp, #20]
 800956a:	f001 ff85 	bl	800b478 <__pow5mult>
 800956e:	4680      	mov	r8, r0
 8009570:	2800      	cmp	r0, #0
 8009572:	d0b7      	beq.n	80094e4 <_strtod_l+0x68c>
 8009574:	4601      	mov	r1, r0
 8009576:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009578:	9805      	ldr	r0, [sp, #20]
 800957a:	f001 fedb 	bl	800b334 <__multiply>
 800957e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009580:	2800      	cmp	r0, #0
 8009582:	f43f ae88 	beq.w	8009296 <_strtod_l+0x43e>
 8009586:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009588:	9805      	ldr	r0, [sp, #20]
 800958a:	f001 fdbf 	bl	800b10c <_Bfree>
 800958e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009590:	931a      	str	r3, [sp, #104]	@ 0x68
 8009592:	2d00      	cmp	r5, #0
 8009594:	dc1d      	bgt.n	80095d2 <_strtod_l+0x77a>
 8009596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009598:	2b00      	cmp	r3, #0
 800959a:	dd27      	ble.n	80095ec <_strtod_l+0x794>
 800959c:	4649      	mov	r1, r9
 800959e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80095a0:	9805      	ldr	r0, [sp, #20]
 80095a2:	f001 ff69 	bl	800b478 <__pow5mult>
 80095a6:	4681      	mov	r9, r0
 80095a8:	bb00      	cbnz	r0, 80095ec <_strtod_l+0x794>
 80095aa:	f04f 0900 	mov.w	r9, #0
 80095ae:	e672      	b.n	8009296 <_strtod_l+0x43e>
 80095b0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80095b4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80095b8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80095bc:	35e2      	adds	r5, #226	@ 0xe2
 80095be:	fa01 f305 	lsl.w	r3, r1, r5
 80095c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80095c4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80095c6:	e7ba      	b.n	800953e <_strtod_l+0x6e6>
 80095c8:	2300      	movs	r3, #0
 80095ca:	9310      	str	r3, [sp, #64]	@ 0x40
 80095cc:	2301      	movs	r3, #1
 80095ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095d0:	e7b5      	b.n	800953e <_strtod_l+0x6e6>
 80095d2:	462a      	mov	r2, r5
 80095d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095d6:	9805      	ldr	r0, [sp, #20]
 80095d8:	f001 ffa8 	bl	800b52c <__lshift>
 80095dc:	901a      	str	r0, [sp, #104]	@ 0x68
 80095de:	2800      	cmp	r0, #0
 80095e0:	d1d9      	bne.n	8009596 <_strtod_l+0x73e>
 80095e2:	e658      	b.n	8009296 <_strtod_l+0x43e>
 80095e4:	0800cd50 	.word	0x0800cd50
 80095e8:	fffffc02 	.word	0xfffffc02
 80095ec:	2e00      	cmp	r6, #0
 80095ee:	dd07      	ble.n	8009600 <_strtod_l+0x7a8>
 80095f0:	4649      	mov	r1, r9
 80095f2:	4632      	mov	r2, r6
 80095f4:	9805      	ldr	r0, [sp, #20]
 80095f6:	f001 ff99 	bl	800b52c <__lshift>
 80095fa:	4681      	mov	r9, r0
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d0d4      	beq.n	80095aa <_strtod_l+0x752>
 8009600:	2f00      	cmp	r7, #0
 8009602:	dd08      	ble.n	8009616 <_strtod_l+0x7be>
 8009604:	4641      	mov	r1, r8
 8009606:	463a      	mov	r2, r7
 8009608:	9805      	ldr	r0, [sp, #20]
 800960a:	f001 ff8f 	bl	800b52c <__lshift>
 800960e:	4680      	mov	r8, r0
 8009610:	2800      	cmp	r0, #0
 8009612:	f43f ae40 	beq.w	8009296 <_strtod_l+0x43e>
 8009616:	464a      	mov	r2, r9
 8009618:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800961a:	9805      	ldr	r0, [sp, #20]
 800961c:	f002 f80e 	bl	800b63c <__mdiff>
 8009620:	4604      	mov	r4, r0
 8009622:	2800      	cmp	r0, #0
 8009624:	f43f ae37 	beq.w	8009296 <_strtod_l+0x43e>
 8009628:	68c3      	ldr	r3, [r0, #12]
 800962a:	4641      	mov	r1, r8
 800962c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800962e:	2300      	movs	r3, #0
 8009630:	60c3      	str	r3, [r0, #12]
 8009632:	f001 ffe7 	bl	800b604 <__mcmp>
 8009636:	2800      	cmp	r0, #0
 8009638:	da3d      	bge.n	80096b6 <_strtod_l+0x85e>
 800963a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800963c:	ea53 030a 	orrs.w	r3, r3, sl
 8009640:	d163      	bne.n	800970a <_strtod_l+0x8b2>
 8009642:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009646:	2b00      	cmp	r3, #0
 8009648:	d15f      	bne.n	800970a <_strtod_l+0x8b2>
 800964a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800964e:	0d1b      	lsrs	r3, r3, #20
 8009650:	051b      	lsls	r3, r3, #20
 8009652:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009656:	d958      	bls.n	800970a <_strtod_l+0x8b2>
 8009658:	6963      	ldr	r3, [r4, #20]
 800965a:	b913      	cbnz	r3, 8009662 <_strtod_l+0x80a>
 800965c:	6923      	ldr	r3, [r4, #16]
 800965e:	2b01      	cmp	r3, #1
 8009660:	dd53      	ble.n	800970a <_strtod_l+0x8b2>
 8009662:	4621      	mov	r1, r4
 8009664:	2201      	movs	r2, #1
 8009666:	9805      	ldr	r0, [sp, #20]
 8009668:	f001 ff60 	bl	800b52c <__lshift>
 800966c:	4641      	mov	r1, r8
 800966e:	4604      	mov	r4, r0
 8009670:	f001 ffc8 	bl	800b604 <__mcmp>
 8009674:	2800      	cmp	r0, #0
 8009676:	dd48      	ble.n	800970a <_strtod_l+0x8b2>
 8009678:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800967c:	9a08      	ldr	r2, [sp, #32]
 800967e:	0d1b      	lsrs	r3, r3, #20
 8009680:	051b      	lsls	r3, r3, #20
 8009682:	2a00      	cmp	r2, #0
 8009684:	d062      	beq.n	800974c <_strtod_l+0x8f4>
 8009686:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800968a:	d85f      	bhi.n	800974c <_strtod_l+0x8f4>
 800968c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009690:	f67f ae94 	bls.w	80093bc <_strtod_l+0x564>
 8009694:	4650      	mov	r0, sl
 8009696:	4659      	mov	r1, fp
 8009698:	4ba3      	ldr	r3, [pc, #652]	@ (8009928 <_strtod_l+0xad0>)
 800969a:	2200      	movs	r2, #0
 800969c:	f7f6 ff26 	bl	80004ec <__aeabi_dmul>
 80096a0:	4ba2      	ldr	r3, [pc, #648]	@ (800992c <_strtod_l+0xad4>)
 80096a2:	4682      	mov	sl, r0
 80096a4:	400b      	ands	r3, r1
 80096a6:	468b      	mov	fp, r1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f47f adff 	bne.w	80092ac <_strtod_l+0x454>
 80096ae:	2322      	movs	r3, #34	@ 0x22
 80096b0:	9a05      	ldr	r2, [sp, #20]
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	e5fa      	b.n	80092ac <_strtod_l+0x454>
 80096b6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80096ba:	d165      	bne.n	8009788 <_strtod_l+0x930>
 80096bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096c2:	b35a      	cbz	r2, 800971c <_strtod_l+0x8c4>
 80096c4:	4a9a      	ldr	r2, [pc, #616]	@ (8009930 <_strtod_l+0xad8>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d12b      	bne.n	8009722 <_strtod_l+0x8ca>
 80096ca:	9b08      	ldr	r3, [sp, #32]
 80096cc:	4651      	mov	r1, sl
 80096ce:	b303      	cbz	r3, 8009712 <_strtod_l+0x8ba>
 80096d0:	465a      	mov	r2, fp
 80096d2:	4b96      	ldr	r3, [pc, #600]	@ (800992c <_strtod_l+0xad4>)
 80096d4:	4013      	ands	r3, r2
 80096d6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80096da:	f04f 32ff 	mov.w	r2, #4294967295
 80096de:	d81b      	bhi.n	8009718 <_strtod_l+0x8c0>
 80096e0:	0d1b      	lsrs	r3, r3, #20
 80096e2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80096e6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ea:	4299      	cmp	r1, r3
 80096ec:	d119      	bne.n	8009722 <_strtod_l+0x8ca>
 80096ee:	4b91      	ldr	r3, [pc, #580]	@ (8009934 <_strtod_l+0xadc>)
 80096f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d102      	bne.n	80096fc <_strtod_l+0x8a4>
 80096f6:	3101      	adds	r1, #1
 80096f8:	f43f adcd 	beq.w	8009296 <_strtod_l+0x43e>
 80096fc:	f04f 0a00 	mov.w	sl, #0
 8009700:	4b8a      	ldr	r3, [pc, #552]	@ (800992c <_strtod_l+0xad4>)
 8009702:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009704:	401a      	ands	r2, r3
 8009706:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800970a:	9b08      	ldr	r3, [sp, #32]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1c1      	bne.n	8009694 <_strtod_l+0x83c>
 8009710:	e5cc      	b.n	80092ac <_strtod_l+0x454>
 8009712:	f04f 33ff 	mov.w	r3, #4294967295
 8009716:	e7e8      	b.n	80096ea <_strtod_l+0x892>
 8009718:	4613      	mov	r3, r2
 800971a:	e7e6      	b.n	80096ea <_strtod_l+0x892>
 800971c:	ea53 030a 	orrs.w	r3, r3, sl
 8009720:	d0aa      	beq.n	8009678 <_strtod_l+0x820>
 8009722:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009724:	b1db      	cbz	r3, 800975e <_strtod_l+0x906>
 8009726:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009728:	4213      	tst	r3, r2
 800972a:	d0ee      	beq.n	800970a <_strtod_l+0x8b2>
 800972c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800972e:	4650      	mov	r0, sl
 8009730:	4659      	mov	r1, fp
 8009732:	9a08      	ldr	r2, [sp, #32]
 8009734:	b1bb      	cbz	r3, 8009766 <_strtod_l+0x90e>
 8009736:	f7ff fb6b 	bl	8008e10 <sulp>
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009742:	f7f6 fd1d 	bl	8000180 <__adddf3>
 8009746:	4682      	mov	sl, r0
 8009748:	468b      	mov	fp, r1
 800974a:	e7de      	b.n	800970a <_strtod_l+0x8b2>
 800974c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009750:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009754:	f04f 3aff 	mov.w	sl, #4294967295
 8009758:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800975c:	e7d5      	b.n	800970a <_strtod_l+0x8b2>
 800975e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009760:	ea13 0f0a 	tst.w	r3, sl
 8009764:	e7e1      	b.n	800972a <_strtod_l+0x8d2>
 8009766:	f7ff fb53 	bl	8008e10 <sulp>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009772:	f7f6 fd03 	bl	800017c <__aeabi_dsub>
 8009776:	2200      	movs	r2, #0
 8009778:	2300      	movs	r3, #0
 800977a:	4682      	mov	sl, r0
 800977c:	468b      	mov	fp, r1
 800977e:	f7f7 f91d 	bl	80009bc <__aeabi_dcmpeq>
 8009782:	2800      	cmp	r0, #0
 8009784:	d0c1      	beq.n	800970a <_strtod_l+0x8b2>
 8009786:	e619      	b.n	80093bc <_strtod_l+0x564>
 8009788:	4641      	mov	r1, r8
 800978a:	4620      	mov	r0, r4
 800978c:	f002 f8aa 	bl	800b8e4 <__ratio>
 8009790:	2200      	movs	r2, #0
 8009792:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009796:	4606      	mov	r6, r0
 8009798:	460f      	mov	r7, r1
 800979a:	f7f7 f923 	bl	80009e4 <__aeabi_dcmple>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d06d      	beq.n	800987e <_strtod_l+0xa26>
 80097a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d178      	bne.n	800989a <_strtod_l+0xa42>
 80097a8:	f1ba 0f00 	cmp.w	sl, #0
 80097ac:	d156      	bne.n	800985c <_strtod_l+0xa04>
 80097ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d158      	bne.n	800986a <_strtod_l+0xa12>
 80097b8:	2200      	movs	r2, #0
 80097ba:	4630      	mov	r0, r6
 80097bc:	4639      	mov	r1, r7
 80097be:	4b5e      	ldr	r3, [pc, #376]	@ (8009938 <_strtod_l+0xae0>)
 80097c0:	f7f7 f906 	bl	80009d0 <__aeabi_dcmplt>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d157      	bne.n	8009878 <_strtod_l+0xa20>
 80097c8:	4630      	mov	r0, r6
 80097ca:	4639      	mov	r1, r7
 80097cc:	2200      	movs	r2, #0
 80097ce:	4b5b      	ldr	r3, [pc, #364]	@ (800993c <_strtod_l+0xae4>)
 80097d0:	f7f6 fe8c 	bl	80004ec <__aeabi_dmul>
 80097d4:	4606      	mov	r6, r0
 80097d6:	460f      	mov	r7, r1
 80097d8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80097dc:	9606      	str	r6, [sp, #24]
 80097de:	9307      	str	r3, [sp, #28]
 80097e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097e4:	4d51      	ldr	r5, [pc, #324]	@ (800992c <_strtod_l+0xad4>)
 80097e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ec:	401d      	ands	r5, r3
 80097ee:	4b54      	ldr	r3, [pc, #336]	@ (8009940 <_strtod_l+0xae8>)
 80097f0:	429d      	cmp	r5, r3
 80097f2:	f040 80ab 	bne.w	800994c <_strtod_l+0xaf4>
 80097f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097f8:	4650      	mov	r0, sl
 80097fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80097fe:	4659      	mov	r1, fp
 8009800:	f001 ffb0 	bl	800b764 <__ulp>
 8009804:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009808:	f7f6 fe70 	bl	80004ec <__aeabi_dmul>
 800980c:	4652      	mov	r2, sl
 800980e:	465b      	mov	r3, fp
 8009810:	f7f6 fcb6 	bl	8000180 <__adddf3>
 8009814:	460b      	mov	r3, r1
 8009816:	4945      	ldr	r1, [pc, #276]	@ (800992c <_strtod_l+0xad4>)
 8009818:	4a4a      	ldr	r2, [pc, #296]	@ (8009944 <_strtod_l+0xaec>)
 800981a:	4019      	ands	r1, r3
 800981c:	4291      	cmp	r1, r2
 800981e:	4682      	mov	sl, r0
 8009820:	d942      	bls.n	80098a8 <_strtod_l+0xa50>
 8009822:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009824:	4b43      	ldr	r3, [pc, #268]	@ (8009934 <_strtod_l+0xadc>)
 8009826:	429a      	cmp	r2, r3
 8009828:	d103      	bne.n	8009832 <_strtod_l+0x9da>
 800982a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800982c:	3301      	adds	r3, #1
 800982e:	f43f ad32 	beq.w	8009296 <_strtod_l+0x43e>
 8009832:	f04f 3aff 	mov.w	sl, #4294967295
 8009836:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8009934 <_strtod_l+0xadc>
 800983a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800983c:	9805      	ldr	r0, [sp, #20]
 800983e:	f001 fc65 	bl	800b10c <_Bfree>
 8009842:	4649      	mov	r1, r9
 8009844:	9805      	ldr	r0, [sp, #20]
 8009846:	f001 fc61 	bl	800b10c <_Bfree>
 800984a:	4641      	mov	r1, r8
 800984c:	9805      	ldr	r0, [sp, #20]
 800984e:	f001 fc5d 	bl	800b10c <_Bfree>
 8009852:	4621      	mov	r1, r4
 8009854:	9805      	ldr	r0, [sp, #20]
 8009856:	f001 fc59 	bl	800b10c <_Bfree>
 800985a:	e61c      	b.n	8009496 <_strtod_l+0x63e>
 800985c:	f1ba 0f01 	cmp.w	sl, #1
 8009860:	d103      	bne.n	800986a <_strtod_l+0xa12>
 8009862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009864:	2b00      	cmp	r3, #0
 8009866:	f43f ada9 	beq.w	80093bc <_strtod_l+0x564>
 800986a:	2200      	movs	r2, #0
 800986c:	4b36      	ldr	r3, [pc, #216]	@ (8009948 <_strtod_l+0xaf0>)
 800986e:	2600      	movs	r6, #0
 8009870:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009874:	4f30      	ldr	r7, [pc, #192]	@ (8009938 <_strtod_l+0xae0>)
 8009876:	e7b3      	b.n	80097e0 <_strtod_l+0x988>
 8009878:	2600      	movs	r6, #0
 800987a:	4f30      	ldr	r7, [pc, #192]	@ (800993c <_strtod_l+0xae4>)
 800987c:	e7ac      	b.n	80097d8 <_strtod_l+0x980>
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	4b2e      	ldr	r3, [pc, #184]	@ (800993c <_strtod_l+0xae4>)
 8009884:	2200      	movs	r2, #0
 8009886:	f7f6 fe31 	bl	80004ec <__aeabi_dmul>
 800988a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800988c:	4606      	mov	r6, r0
 800988e:	460f      	mov	r7, r1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0a1      	beq.n	80097d8 <_strtod_l+0x980>
 8009894:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009898:	e7a2      	b.n	80097e0 <_strtod_l+0x988>
 800989a:	2200      	movs	r2, #0
 800989c:	4b26      	ldr	r3, [pc, #152]	@ (8009938 <_strtod_l+0xae0>)
 800989e:	4616      	mov	r6, r2
 80098a0:	461f      	mov	r7, r3
 80098a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098a6:	e79b      	b.n	80097e0 <_strtod_l+0x988>
 80098a8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80098ac:	9b08      	ldr	r3, [sp, #32]
 80098ae:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1c1      	bne.n	800983a <_strtod_l+0x9e2>
 80098b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098ba:	0d1b      	lsrs	r3, r3, #20
 80098bc:	051b      	lsls	r3, r3, #20
 80098be:	429d      	cmp	r5, r3
 80098c0:	d1bb      	bne.n	800983a <_strtod_l+0x9e2>
 80098c2:	4630      	mov	r0, r6
 80098c4:	4639      	mov	r1, r7
 80098c6:	f7f7 f9a7 	bl	8000c18 <__aeabi_d2lz>
 80098ca:	f7f6 fde1 	bl	8000490 <__aeabi_l2d>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4630      	mov	r0, r6
 80098d4:	4639      	mov	r1, r7
 80098d6:	f7f6 fc51 	bl	800017c <__aeabi_dsub>
 80098da:	460b      	mov	r3, r1
 80098dc:	4602      	mov	r2, r0
 80098de:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80098e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80098e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098e8:	ea46 060a 	orr.w	r6, r6, sl
 80098ec:	431e      	orrs	r6, r3
 80098ee:	d06a      	beq.n	80099c6 <_strtod_l+0xb6e>
 80098f0:	a309      	add	r3, pc, #36	@ (adr r3, 8009918 <_strtod_l+0xac0>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f7 f86b 	bl	80009d0 <__aeabi_dcmplt>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	f47f acd6 	bne.w	80092ac <_strtod_l+0x454>
 8009900:	a307      	add	r3, pc, #28	@ (adr r3, 8009920 <_strtod_l+0xac8>)
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800990a:	f7f7 f87f 	bl	8000a0c <__aeabi_dcmpgt>
 800990e:	2800      	cmp	r0, #0
 8009910:	d093      	beq.n	800983a <_strtod_l+0x9e2>
 8009912:	e4cb      	b.n	80092ac <_strtod_l+0x454>
 8009914:	f3af 8000 	nop.w
 8009918:	94a03595 	.word	0x94a03595
 800991c:	3fdfffff 	.word	0x3fdfffff
 8009920:	35afe535 	.word	0x35afe535
 8009924:	3fe00000 	.word	0x3fe00000
 8009928:	39500000 	.word	0x39500000
 800992c:	7ff00000 	.word	0x7ff00000
 8009930:	000fffff 	.word	0x000fffff
 8009934:	7fefffff 	.word	0x7fefffff
 8009938:	3ff00000 	.word	0x3ff00000
 800993c:	3fe00000 	.word	0x3fe00000
 8009940:	7fe00000 	.word	0x7fe00000
 8009944:	7c9fffff 	.word	0x7c9fffff
 8009948:	bff00000 	.word	0xbff00000
 800994c:	9b08      	ldr	r3, [sp, #32]
 800994e:	b323      	cbz	r3, 800999a <_strtod_l+0xb42>
 8009950:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009954:	d821      	bhi.n	800999a <_strtod_l+0xb42>
 8009956:	a328      	add	r3, pc, #160	@ (adr r3, 80099f8 <_strtod_l+0xba0>)
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	4630      	mov	r0, r6
 800995e:	4639      	mov	r1, r7
 8009960:	f7f7 f840 	bl	80009e4 <__aeabi_dcmple>
 8009964:	b1a0      	cbz	r0, 8009990 <_strtod_l+0xb38>
 8009966:	4639      	mov	r1, r7
 8009968:	4630      	mov	r0, r6
 800996a:	f7f7 f86f 	bl	8000a4c <__aeabi_d2uiz>
 800996e:	2801      	cmp	r0, #1
 8009970:	bf38      	it	cc
 8009972:	2001      	movcc	r0, #1
 8009974:	f7f6 fd40 	bl	80003f8 <__aeabi_ui2d>
 8009978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800997a:	4606      	mov	r6, r0
 800997c:	460f      	mov	r7, r1
 800997e:	b9fb      	cbnz	r3, 80099c0 <_strtod_l+0xb68>
 8009980:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009984:	9014      	str	r0, [sp, #80]	@ 0x50
 8009986:	9315      	str	r3, [sp, #84]	@ 0x54
 8009988:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800998c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009990:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009992:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009996:	1b5b      	subs	r3, r3, r5
 8009998:	9311      	str	r3, [sp, #68]	@ 0x44
 800999a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800999e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80099a2:	f001 fedf 	bl	800b764 <__ulp>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4650      	mov	r0, sl
 80099ac:	4659      	mov	r1, fp
 80099ae:	f7f6 fd9d 	bl	80004ec <__aeabi_dmul>
 80099b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099b6:	f7f6 fbe3 	bl	8000180 <__adddf3>
 80099ba:	4682      	mov	sl, r0
 80099bc:	468b      	mov	fp, r1
 80099be:	e775      	b.n	80098ac <_strtod_l+0xa54>
 80099c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80099c4:	e7e0      	b.n	8009988 <_strtod_l+0xb30>
 80099c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a00 <_strtod_l+0xba8>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	f7f7 f800 	bl	80009d0 <__aeabi_dcmplt>
 80099d0:	e79d      	b.n	800990e <_strtod_l+0xab6>
 80099d2:	2300      	movs	r3, #0
 80099d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80099d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099d8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	f7ff ba79 	b.w	8008ed2 <_strtod_l+0x7a>
 80099e0:	2a65      	cmp	r2, #101	@ 0x65
 80099e2:	f43f ab72 	beq.w	80090ca <_strtod_l+0x272>
 80099e6:	2a45      	cmp	r2, #69	@ 0x45
 80099e8:	f43f ab6f 	beq.w	80090ca <_strtod_l+0x272>
 80099ec:	2301      	movs	r3, #1
 80099ee:	f7ff bbaa 	b.w	8009146 <_strtod_l+0x2ee>
 80099f2:	bf00      	nop
 80099f4:	f3af 8000 	nop.w
 80099f8:	ffc00000 	.word	0xffc00000
 80099fc:	41dfffff 	.word	0x41dfffff
 8009a00:	94a03595 	.word	0x94a03595
 8009a04:	3fcfffff 	.word	0x3fcfffff

08009a08 <_strtod_r>:
 8009a08:	4b01      	ldr	r3, [pc, #4]	@ (8009a10 <_strtod_r+0x8>)
 8009a0a:	f7ff ba25 	b.w	8008e58 <_strtod_l>
 8009a0e:	bf00      	nop
 8009a10:	2000006c 	.word	0x2000006c

08009a14 <_strtol_l.isra.0>:
 8009a14:	2b24      	cmp	r3, #36	@ 0x24
 8009a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a1a:	4686      	mov	lr, r0
 8009a1c:	4690      	mov	r8, r2
 8009a1e:	d801      	bhi.n	8009a24 <_strtol_l.isra.0+0x10>
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d106      	bne.n	8009a32 <_strtol_l.isra.0+0x1e>
 8009a24:	f7ff f898 	bl	8008b58 <__errno>
 8009a28:	2316      	movs	r3, #22
 8009a2a:	6003      	str	r3, [r0, #0]
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a32:	460d      	mov	r5, r1
 8009a34:	4833      	ldr	r0, [pc, #204]	@ (8009b04 <_strtol_l.isra.0+0xf0>)
 8009a36:	462a      	mov	r2, r5
 8009a38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a3c:	5d06      	ldrb	r6, [r0, r4]
 8009a3e:	f016 0608 	ands.w	r6, r6, #8
 8009a42:	d1f8      	bne.n	8009a36 <_strtol_l.isra.0+0x22>
 8009a44:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a46:	d110      	bne.n	8009a6a <_strtol_l.isra.0+0x56>
 8009a48:	2601      	movs	r6, #1
 8009a4a:	782c      	ldrb	r4, [r5, #0]
 8009a4c:	1c95      	adds	r5, r2, #2
 8009a4e:	f033 0210 	bics.w	r2, r3, #16
 8009a52:	d115      	bne.n	8009a80 <_strtol_l.isra.0+0x6c>
 8009a54:	2c30      	cmp	r4, #48	@ 0x30
 8009a56:	d10d      	bne.n	8009a74 <_strtol_l.isra.0+0x60>
 8009a58:	782a      	ldrb	r2, [r5, #0]
 8009a5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a5e:	2a58      	cmp	r2, #88	@ 0x58
 8009a60:	d108      	bne.n	8009a74 <_strtol_l.isra.0+0x60>
 8009a62:	786c      	ldrb	r4, [r5, #1]
 8009a64:	3502      	adds	r5, #2
 8009a66:	2310      	movs	r3, #16
 8009a68:	e00a      	b.n	8009a80 <_strtol_l.isra.0+0x6c>
 8009a6a:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a6c:	bf04      	itt	eq
 8009a6e:	782c      	ldrbeq	r4, [r5, #0]
 8009a70:	1c95      	addeq	r5, r2, #2
 8009a72:	e7ec      	b.n	8009a4e <_strtol_l.isra.0+0x3a>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1f6      	bne.n	8009a66 <_strtol_l.isra.0+0x52>
 8009a78:	2c30      	cmp	r4, #48	@ 0x30
 8009a7a:	bf14      	ite	ne
 8009a7c:	230a      	movne	r3, #10
 8009a7e:	2308      	moveq	r3, #8
 8009a80:	2200      	movs	r2, #0
 8009a82:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a86:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a8a:	fbbc f9f3 	udiv	r9, ip, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009a98:	2f09      	cmp	r7, #9
 8009a9a:	d80f      	bhi.n	8009abc <_strtol_l.isra.0+0xa8>
 8009a9c:	463c      	mov	r4, r7
 8009a9e:	42a3      	cmp	r3, r4
 8009aa0:	dd1b      	ble.n	8009ada <_strtol_l.isra.0+0xc6>
 8009aa2:	1c57      	adds	r7, r2, #1
 8009aa4:	d007      	beq.n	8009ab6 <_strtol_l.isra.0+0xa2>
 8009aa6:	4581      	cmp	r9, r0
 8009aa8:	d314      	bcc.n	8009ad4 <_strtol_l.isra.0+0xc0>
 8009aaa:	d101      	bne.n	8009ab0 <_strtol_l.isra.0+0x9c>
 8009aac:	45a2      	cmp	sl, r4
 8009aae:	db11      	blt.n	8009ad4 <_strtol_l.isra.0+0xc0>
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	fb00 4003 	mla	r0, r0, r3, r4
 8009ab6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009aba:	e7eb      	b.n	8009a94 <_strtol_l.isra.0+0x80>
 8009abc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ac0:	2f19      	cmp	r7, #25
 8009ac2:	d801      	bhi.n	8009ac8 <_strtol_l.isra.0+0xb4>
 8009ac4:	3c37      	subs	r4, #55	@ 0x37
 8009ac6:	e7ea      	b.n	8009a9e <_strtol_l.isra.0+0x8a>
 8009ac8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009acc:	2f19      	cmp	r7, #25
 8009ace:	d804      	bhi.n	8009ada <_strtol_l.isra.0+0xc6>
 8009ad0:	3c57      	subs	r4, #87	@ 0x57
 8009ad2:	e7e4      	b.n	8009a9e <_strtol_l.isra.0+0x8a>
 8009ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad8:	e7ed      	b.n	8009ab6 <_strtol_l.isra.0+0xa2>
 8009ada:	1c53      	adds	r3, r2, #1
 8009adc:	d108      	bne.n	8009af0 <_strtol_l.isra.0+0xdc>
 8009ade:	2322      	movs	r3, #34	@ 0x22
 8009ae0:	4660      	mov	r0, ip
 8009ae2:	f8ce 3000 	str.w	r3, [lr]
 8009ae6:	f1b8 0f00 	cmp.w	r8, #0
 8009aea:	d0a0      	beq.n	8009a2e <_strtol_l.isra.0+0x1a>
 8009aec:	1e69      	subs	r1, r5, #1
 8009aee:	e006      	b.n	8009afe <_strtol_l.isra.0+0xea>
 8009af0:	b106      	cbz	r6, 8009af4 <_strtol_l.isra.0+0xe0>
 8009af2:	4240      	negs	r0, r0
 8009af4:	f1b8 0f00 	cmp.w	r8, #0
 8009af8:	d099      	beq.n	8009a2e <_strtol_l.isra.0+0x1a>
 8009afa:	2a00      	cmp	r2, #0
 8009afc:	d1f6      	bne.n	8009aec <_strtol_l.isra.0+0xd8>
 8009afe:	f8c8 1000 	str.w	r1, [r8]
 8009b02:	e794      	b.n	8009a2e <_strtol_l.isra.0+0x1a>
 8009b04:	0800cd79 	.word	0x0800cd79

08009b08 <_strtol_r>:
 8009b08:	f7ff bf84 	b.w	8009a14 <_strtol_l.isra.0>

08009b0c <__ssputs_r>:
 8009b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	461f      	mov	r7, r3
 8009b12:	688e      	ldr	r6, [r1, #8]
 8009b14:	4682      	mov	sl, r0
 8009b16:	42be      	cmp	r6, r7
 8009b18:	460c      	mov	r4, r1
 8009b1a:	4690      	mov	r8, r2
 8009b1c:	680b      	ldr	r3, [r1, #0]
 8009b1e:	d82d      	bhi.n	8009b7c <__ssputs_r+0x70>
 8009b20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b28:	d026      	beq.n	8009b78 <__ssputs_r+0x6c>
 8009b2a:	6965      	ldr	r5, [r4, #20]
 8009b2c:	6909      	ldr	r1, [r1, #16]
 8009b2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b32:	eba3 0901 	sub.w	r9, r3, r1
 8009b36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b3a:	1c7b      	adds	r3, r7, #1
 8009b3c:	444b      	add	r3, r9
 8009b3e:	106d      	asrs	r5, r5, #1
 8009b40:	429d      	cmp	r5, r3
 8009b42:	bf38      	it	cc
 8009b44:	461d      	movcc	r5, r3
 8009b46:	0553      	lsls	r3, r2, #21
 8009b48:	d527      	bpl.n	8009b9a <__ssputs_r+0x8e>
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7ff f8d4 	bl	8008cf8 <_malloc_r>
 8009b50:	4606      	mov	r6, r0
 8009b52:	b360      	cbz	r0, 8009bae <__ssputs_r+0xa2>
 8009b54:	464a      	mov	r2, r9
 8009b56:	6921      	ldr	r1, [r4, #16]
 8009b58:	f7ff f82b 	bl	8008bb2 <memcpy>
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b66:	81a3      	strh	r3, [r4, #12]
 8009b68:	6126      	str	r6, [r4, #16]
 8009b6a:	444e      	add	r6, r9
 8009b6c:	6026      	str	r6, [r4, #0]
 8009b6e:	463e      	mov	r6, r7
 8009b70:	6165      	str	r5, [r4, #20]
 8009b72:	eba5 0509 	sub.w	r5, r5, r9
 8009b76:	60a5      	str	r5, [r4, #8]
 8009b78:	42be      	cmp	r6, r7
 8009b7a:	d900      	bls.n	8009b7e <__ssputs_r+0x72>
 8009b7c:	463e      	mov	r6, r7
 8009b7e:	4632      	mov	r2, r6
 8009b80:	4641      	mov	r1, r8
 8009b82:	6820      	ldr	r0, [r4, #0]
 8009b84:	f000 feef 	bl	800a966 <memmove>
 8009b88:	2000      	movs	r0, #0
 8009b8a:	68a3      	ldr	r3, [r4, #8]
 8009b8c:	1b9b      	subs	r3, r3, r6
 8009b8e:	60a3      	str	r3, [r4, #8]
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	4433      	add	r3, r6
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9a:	462a      	mov	r2, r5
 8009b9c:	f001 ff16 	bl	800b9cc <_realloc_r>
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d1e0      	bne.n	8009b68 <__ssputs_r+0x5c>
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	6921      	ldr	r1, [r4, #16]
 8009baa:	f7ff f833 	bl	8008c14 <_free_r>
 8009bae:	230c      	movs	r3, #12
 8009bb0:	f8ca 3000 	str.w	r3, [sl]
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bbe:	81a3      	strh	r3, [r4, #12]
 8009bc0:	e7e9      	b.n	8009b96 <__ssputs_r+0x8a>
	...

08009bc4 <_svfiprintf_r>:
 8009bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	4698      	mov	r8, r3
 8009bca:	898b      	ldrh	r3, [r1, #12]
 8009bcc:	4607      	mov	r7, r0
 8009bce:	061b      	lsls	r3, r3, #24
 8009bd0:	460d      	mov	r5, r1
 8009bd2:	4614      	mov	r4, r2
 8009bd4:	b09d      	sub	sp, #116	@ 0x74
 8009bd6:	d510      	bpl.n	8009bfa <_svfiprintf_r+0x36>
 8009bd8:	690b      	ldr	r3, [r1, #16]
 8009bda:	b973      	cbnz	r3, 8009bfa <_svfiprintf_r+0x36>
 8009bdc:	2140      	movs	r1, #64	@ 0x40
 8009bde:	f7ff f88b 	bl	8008cf8 <_malloc_r>
 8009be2:	6028      	str	r0, [r5, #0]
 8009be4:	6128      	str	r0, [r5, #16]
 8009be6:	b930      	cbnz	r0, 8009bf6 <_svfiprintf_r+0x32>
 8009be8:	230c      	movs	r3, #12
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	b01d      	add	sp, #116	@ 0x74
 8009bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf6:	2340      	movs	r3, #64	@ 0x40
 8009bf8:	616b      	str	r3, [r5, #20]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bfe:	2320      	movs	r3, #32
 8009c00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c04:	2330      	movs	r3, #48	@ 0x30
 8009c06:	f04f 0901 	mov.w	r9, #1
 8009c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c0e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009da8 <_svfiprintf_r+0x1e4>
 8009c12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c16:	4623      	mov	r3, r4
 8009c18:	469a      	mov	sl, r3
 8009c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c1e:	b10a      	cbz	r2, 8009c24 <_svfiprintf_r+0x60>
 8009c20:	2a25      	cmp	r2, #37	@ 0x25
 8009c22:	d1f9      	bne.n	8009c18 <_svfiprintf_r+0x54>
 8009c24:	ebba 0b04 	subs.w	fp, sl, r4
 8009c28:	d00b      	beq.n	8009c42 <_svfiprintf_r+0x7e>
 8009c2a:	465b      	mov	r3, fp
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4629      	mov	r1, r5
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7ff ff6b 	bl	8009b0c <__ssputs_r>
 8009c36:	3001      	adds	r0, #1
 8009c38:	f000 80a7 	beq.w	8009d8a <_svfiprintf_r+0x1c6>
 8009c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c3e:	445a      	add	r2, fp
 8009c40:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c42:	f89a 3000 	ldrb.w	r3, [sl]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 809f 	beq.w	8009d8a <_svfiprintf_r+0x1c6>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c56:	f10a 0a01 	add.w	sl, sl, #1
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	9307      	str	r3, [sp, #28]
 8009c5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c62:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c64:	4654      	mov	r4, sl
 8009c66:	2205      	movs	r2, #5
 8009c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6c:	484e      	ldr	r0, [pc, #312]	@ (8009da8 <_svfiprintf_r+0x1e4>)
 8009c6e:	f000 fea5 	bl	800a9bc <memchr>
 8009c72:	9a04      	ldr	r2, [sp, #16]
 8009c74:	b9d8      	cbnz	r0, 8009cae <_svfiprintf_r+0xea>
 8009c76:	06d0      	lsls	r0, r2, #27
 8009c78:	bf44      	itt	mi
 8009c7a:	2320      	movmi	r3, #32
 8009c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c80:	0711      	lsls	r1, r2, #28
 8009c82:	bf44      	itt	mi
 8009c84:	232b      	movmi	r3, #43	@ 0x2b
 8009c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c90:	d015      	beq.n	8009cbe <_svfiprintf_r+0xfa>
 8009c92:	4654      	mov	r4, sl
 8009c94:	2000      	movs	r0, #0
 8009c96:	f04f 0c0a 	mov.w	ip, #10
 8009c9a:	9a07      	ldr	r2, [sp, #28]
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ca2:	3b30      	subs	r3, #48	@ 0x30
 8009ca4:	2b09      	cmp	r3, #9
 8009ca6:	d94b      	bls.n	8009d40 <_svfiprintf_r+0x17c>
 8009ca8:	b1b0      	cbz	r0, 8009cd8 <_svfiprintf_r+0x114>
 8009caa:	9207      	str	r2, [sp, #28]
 8009cac:	e014      	b.n	8009cd8 <_svfiprintf_r+0x114>
 8009cae:	eba0 0308 	sub.w	r3, r0, r8
 8009cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	46a2      	mov	sl, r4
 8009cba:	9304      	str	r3, [sp, #16]
 8009cbc:	e7d2      	b.n	8009c64 <_svfiprintf_r+0xa0>
 8009cbe:	9b03      	ldr	r3, [sp, #12]
 8009cc0:	1d19      	adds	r1, r3, #4
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	9103      	str	r1, [sp, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bfbb      	ittet	lt
 8009cca:	425b      	neglt	r3, r3
 8009ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8009cd0:	9307      	strge	r3, [sp, #28]
 8009cd2:	9307      	strlt	r3, [sp, #28]
 8009cd4:	bfb8      	it	lt
 8009cd6:	9204      	strlt	r2, [sp, #16]
 8009cd8:	7823      	ldrb	r3, [r4, #0]
 8009cda:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cdc:	d10a      	bne.n	8009cf4 <_svfiprintf_r+0x130>
 8009cde:	7863      	ldrb	r3, [r4, #1]
 8009ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ce2:	d132      	bne.n	8009d4a <_svfiprintf_r+0x186>
 8009ce4:	9b03      	ldr	r3, [sp, #12]
 8009ce6:	3402      	adds	r4, #2
 8009ce8:	1d1a      	adds	r2, r3, #4
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	9203      	str	r2, [sp, #12]
 8009cee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009dac <_svfiprintf_r+0x1e8>
 8009cf8:	2203      	movs	r2, #3
 8009cfa:	4650      	mov	r0, sl
 8009cfc:	7821      	ldrb	r1, [r4, #0]
 8009cfe:	f000 fe5d 	bl	800a9bc <memchr>
 8009d02:	b138      	cbz	r0, 8009d14 <_svfiprintf_r+0x150>
 8009d04:	2240      	movs	r2, #64	@ 0x40
 8009d06:	9b04      	ldr	r3, [sp, #16]
 8009d08:	eba0 000a 	sub.w	r0, r0, sl
 8009d0c:	4082      	lsls	r2, r0
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	3401      	adds	r4, #1
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d18:	2206      	movs	r2, #6
 8009d1a:	4825      	ldr	r0, [pc, #148]	@ (8009db0 <_svfiprintf_r+0x1ec>)
 8009d1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d20:	f000 fe4c 	bl	800a9bc <memchr>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d036      	beq.n	8009d96 <_svfiprintf_r+0x1d2>
 8009d28:	4b22      	ldr	r3, [pc, #136]	@ (8009db4 <_svfiprintf_r+0x1f0>)
 8009d2a:	bb1b      	cbnz	r3, 8009d74 <_svfiprintf_r+0x1b0>
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	3307      	adds	r3, #7
 8009d30:	f023 0307 	bic.w	r3, r3, #7
 8009d34:	3308      	adds	r3, #8
 8009d36:	9303      	str	r3, [sp, #12]
 8009d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d3a:	4433      	add	r3, r6
 8009d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d3e:	e76a      	b.n	8009c16 <_svfiprintf_r+0x52>
 8009d40:	460c      	mov	r4, r1
 8009d42:	2001      	movs	r0, #1
 8009d44:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d48:	e7a8      	b.n	8009c9c <_svfiprintf_r+0xd8>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f04f 0c0a 	mov.w	ip, #10
 8009d50:	4619      	mov	r1, r3
 8009d52:	3401      	adds	r4, #1
 8009d54:	9305      	str	r3, [sp, #20]
 8009d56:	4620      	mov	r0, r4
 8009d58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d5c:	3a30      	subs	r2, #48	@ 0x30
 8009d5e:	2a09      	cmp	r2, #9
 8009d60:	d903      	bls.n	8009d6a <_svfiprintf_r+0x1a6>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d0c6      	beq.n	8009cf4 <_svfiprintf_r+0x130>
 8009d66:	9105      	str	r1, [sp, #20]
 8009d68:	e7c4      	b.n	8009cf4 <_svfiprintf_r+0x130>
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d72:	e7f0      	b.n	8009d56 <_svfiprintf_r+0x192>
 8009d74:	ab03      	add	r3, sp, #12
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	462a      	mov	r2, r5
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8009db8 <_svfiprintf_r+0x1f4>)
 8009d7e:	a904      	add	r1, sp, #16
 8009d80:	f3af 8000 	nop.w
 8009d84:	1c42      	adds	r2, r0, #1
 8009d86:	4606      	mov	r6, r0
 8009d88:	d1d6      	bne.n	8009d38 <_svfiprintf_r+0x174>
 8009d8a:	89ab      	ldrh	r3, [r5, #12]
 8009d8c:	065b      	lsls	r3, r3, #25
 8009d8e:	f53f af2d 	bmi.w	8009bec <_svfiprintf_r+0x28>
 8009d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d94:	e72c      	b.n	8009bf0 <_svfiprintf_r+0x2c>
 8009d96:	ab03      	add	r3, sp, #12
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	462a      	mov	r2, r5
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	4b06      	ldr	r3, [pc, #24]	@ (8009db8 <_svfiprintf_r+0x1f4>)
 8009da0:	a904      	add	r1, sp, #16
 8009da2:	f000 fa4b 	bl	800a23c <_printf_i>
 8009da6:	e7ed      	b.n	8009d84 <_svfiprintf_r+0x1c0>
 8009da8:	0800cc06 	.word	0x0800cc06
 8009dac:	0800cc0c 	.word	0x0800cc0c
 8009db0:	0800cc10 	.word	0x0800cc10
 8009db4:	00000000 	.word	0x00000000
 8009db8:	08009b0d 	.word	0x08009b0d

08009dbc <_sungetc_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	1c4b      	adds	r3, r1, #1
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	d103      	bne.n	8009dcc <_sungetc_r+0x10>
 8009dc4:	f04f 35ff 	mov.w	r5, #4294967295
 8009dc8:	4628      	mov	r0, r5
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	8993      	ldrh	r3, [r2, #12]
 8009dce:	b2cd      	uxtb	r5, r1
 8009dd0:	f023 0320 	bic.w	r3, r3, #32
 8009dd4:	8193      	strh	r3, [r2, #12]
 8009dd6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009dd8:	6852      	ldr	r2, [r2, #4]
 8009dda:	b18b      	cbz	r3, 8009e00 <_sungetc_r+0x44>
 8009ddc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009dde:	4293      	cmp	r3, r2
 8009de0:	dd08      	ble.n	8009df4 <_sungetc_r+0x38>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	6022      	str	r2, [r4, #0]
 8009de8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009dec:	6863      	ldr	r3, [r4, #4]
 8009dee:	3301      	adds	r3, #1
 8009df0:	6063      	str	r3, [r4, #4]
 8009df2:	e7e9      	b.n	8009dc8 <_sungetc_r+0xc>
 8009df4:	4621      	mov	r1, r4
 8009df6:	f000 fd7e 	bl	800a8f6 <__submore>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d0f1      	beq.n	8009de2 <_sungetc_r+0x26>
 8009dfe:	e7e1      	b.n	8009dc4 <_sungetc_r+0x8>
 8009e00:	6921      	ldr	r1, [r4, #16]
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	b151      	cbz	r1, 8009e1c <_sungetc_r+0x60>
 8009e06:	4299      	cmp	r1, r3
 8009e08:	d208      	bcs.n	8009e1c <_sungetc_r+0x60>
 8009e0a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009e0e:	42a9      	cmp	r1, r5
 8009e10:	d104      	bne.n	8009e1c <_sungetc_r+0x60>
 8009e12:	3b01      	subs	r3, #1
 8009e14:	3201      	adds	r2, #1
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	6062      	str	r2, [r4, #4]
 8009e1a:	e7d5      	b.n	8009dc8 <_sungetc_r+0xc>
 8009e1c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8009e20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e24:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e26:	2303      	movs	r3, #3
 8009e28:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009e2a:	4623      	mov	r3, r4
 8009e2c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	2301      	movs	r3, #1
 8009e34:	e7dc      	b.n	8009df0 <_sungetc_r+0x34>

08009e36 <__ssrefill_r>:
 8009e36:	b510      	push	{r4, lr}
 8009e38:	460c      	mov	r4, r1
 8009e3a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009e3c:	b169      	cbz	r1, 8009e5a <__ssrefill_r+0x24>
 8009e3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e42:	4299      	cmp	r1, r3
 8009e44:	d001      	beq.n	8009e4a <__ssrefill_r+0x14>
 8009e46:	f7fe fee5 	bl	8008c14 <_free_r>
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e4e:	6360      	str	r0, [r4, #52]	@ 0x34
 8009e50:	6063      	str	r3, [r4, #4]
 8009e52:	b113      	cbz	r3, 8009e5a <__ssrefill_r+0x24>
 8009e54:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009e56:	6023      	str	r3, [r4, #0]
 8009e58:	bd10      	pop	{r4, pc}
 8009e5a:	6923      	ldr	r3, [r4, #16]
 8009e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	2300      	movs	r3, #0
 8009e64:	6063      	str	r3, [r4, #4]
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	f043 0320 	orr.w	r3, r3, #32
 8009e6c:	81a3      	strh	r3, [r4, #12]
 8009e6e:	e7f3      	b.n	8009e58 <__ssrefill_r+0x22>

08009e70 <__ssvfiscanf_r>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	460c      	mov	r4, r1
 8009e76:	2100      	movs	r1, #0
 8009e78:	4606      	mov	r6, r0
 8009e7a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8009e7e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009e82:	49ab      	ldr	r1, [pc, #684]	@ (800a130 <__ssvfiscanf_r+0x2c0>)
 8009e84:	f10d 0804 	add.w	r8, sp, #4
 8009e88:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009e8a:	49aa      	ldr	r1, [pc, #680]	@ (800a134 <__ssvfiscanf_r+0x2c4>)
 8009e8c:	4faa      	ldr	r7, [pc, #680]	@ (800a138 <__ssvfiscanf_r+0x2c8>)
 8009e8e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009e92:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	f892 9000 	ldrb.w	r9, [r2]
 8009e9a:	f1b9 0f00 	cmp.w	r9, #0
 8009e9e:	f000 8159 	beq.w	800a154 <__ssvfiscanf_r+0x2e4>
 8009ea2:	f817 3009 	ldrb.w	r3, [r7, r9]
 8009ea6:	1c55      	adds	r5, r2, #1
 8009ea8:	f013 0308 	ands.w	r3, r3, #8
 8009eac:	d019      	beq.n	8009ee2 <__ssvfiscanf_r+0x72>
 8009eae:	6863      	ldr	r3, [r4, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dd0f      	ble.n	8009ed4 <__ssvfiscanf_r+0x64>
 8009eb4:	6823      	ldr	r3, [r4, #0]
 8009eb6:	781a      	ldrb	r2, [r3, #0]
 8009eb8:	5cba      	ldrb	r2, [r7, r2]
 8009eba:	0712      	lsls	r2, r2, #28
 8009ebc:	d401      	bmi.n	8009ec2 <__ssvfiscanf_r+0x52>
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	e7e9      	b.n	8009e96 <__ssvfiscanf_r+0x26>
 8009ec2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	3201      	adds	r2, #1
 8009ec8:	9245      	str	r2, [sp, #276]	@ 0x114
 8009eca:	6862      	ldr	r2, [r4, #4]
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	3a01      	subs	r2, #1
 8009ed0:	6062      	str	r2, [r4, #4]
 8009ed2:	e7ec      	b.n	8009eae <__ssvfiscanf_r+0x3e>
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009eda:	4798      	blx	r3
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d0e9      	beq.n	8009eb4 <__ssvfiscanf_r+0x44>
 8009ee0:	e7ed      	b.n	8009ebe <__ssvfiscanf_r+0x4e>
 8009ee2:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8009ee6:	f040 8086 	bne.w	8009ff6 <__ssvfiscanf_r+0x186>
 8009eea:	9341      	str	r3, [sp, #260]	@ 0x104
 8009eec:	9343      	str	r3, [sp, #268]	@ 0x10c
 8009eee:	7853      	ldrb	r3, [r2, #1]
 8009ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ef2:	bf04      	itt	eq
 8009ef4:	2310      	moveq	r3, #16
 8009ef6:	1c95      	addeq	r5, r2, #2
 8009ef8:	f04f 020a 	mov.w	r2, #10
 8009efc:	bf08      	it	eq
 8009efe:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009f00:	46aa      	mov	sl, r5
 8009f02:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009f06:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009f0a:	2b09      	cmp	r3, #9
 8009f0c:	d91e      	bls.n	8009f4c <__ssvfiscanf_r+0xdc>
 8009f0e:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 800a13c <__ssvfiscanf_r+0x2cc>
 8009f12:	2203      	movs	r2, #3
 8009f14:	4658      	mov	r0, fp
 8009f16:	f000 fd51 	bl	800a9bc <memchr>
 8009f1a:	b138      	cbz	r0, 8009f2c <__ssvfiscanf_r+0xbc>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	4655      	mov	r5, sl
 8009f20:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009f22:	eba0 000b 	sub.w	r0, r0, fp
 8009f26:	4083      	lsls	r3, r0
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f30:	2b78      	cmp	r3, #120	@ 0x78
 8009f32:	d806      	bhi.n	8009f42 <__ssvfiscanf_r+0xd2>
 8009f34:	2b57      	cmp	r3, #87	@ 0x57
 8009f36:	d810      	bhi.n	8009f5a <__ssvfiscanf_r+0xea>
 8009f38:	2b25      	cmp	r3, #37	@ 0x25
 8009f3a:	d05c      	beq.n	8009ff6 <__ssvfiscanf_r+0x186>
 8009f3c:	d856      	bhi.n	8009fec <__ssvfiscanf_r+0x17c>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d074      	beq.n	800a02c <__ssvfiscanf_r+0x1bc>
 8009f42:	2303      	movs	r3, #3
 8009f44:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009f46:	230a      	movs	r3, #10
 8009f48:	9342      	str	r3, [sp, #264]	@ 0x108
 8009f4a:	e087      	b.n	800a05c <__ssvfiscanf_r+0x1ec>
 8009f4c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009f4e:	4655      	mov	r5, sl
 8009f50:	fb02 1103 	mla	r1, r2, r3, r1
 8009f54:	3930      	subs	r1, #48	@ 0x30
 8009f56:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009f58:	e7d2      	b.n	8009f00 <__ssvfiscanf_r+0x90>
 8009f5a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009f5e:	2a20      	cmp	r2, #32
 8009f60:	d8ef      	bhi.n	8009f42 <__ssvfiscanf_r+0xd2>
 8009f62:	a101      	add	r1, pc, #4	@ (adr r1, 8009f68 <__ssvfiscanf_r+0xf8>)
 8009f64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f68:	0800a03b 	.word	0x0800a03b
 8009f6c:	08009f43 	.word	0x08009f43
 8009f70:	08009f43 	.word	0x08009f43
 8009f74:	0800a095 	.word	0x0800a095
 8009f78:	08009f43 	.word	0x08009f43
 8009f7c:	08009f43 	.word	0x08009f43
 8009f80:	08009f43 	.word	0x08009f43
 8009f84:	08009f43 	.word	0x08009f43
 8009f88:	08009f43 	.word	0x08009f43
 8009f8c:	08009f43 	.word	0x08009f43
 8009f90:	08009f43 	.word	0x08009f43
 8009f94:	0800a0ab 	.word	0x0800a0ab
 8009f98:	0800a091 	.word	0x0800a091
 8009f9c:	08009ff3 	.word	0x08009ff3
 8009fa0:	08009ff3 	.word	0x08009ff3
 8009fa4:	08009ff3 	.word	0x08009ff3
 8009fa8:	08009f43 	.word	0x08009f43
 8009fac:	0800a04d 	.word	0x0800a04d
 8009fb0:	08009f43 	.word	0x08009f43
 8009fb4:	08009f43 	.word	0x08009f43
 8009fb8:	08009f43 	.word	0x08009f43
 8009fbc:	08009f43 	.word	0x08009f43
 8009fc0:	0800a0bb 	.word	0x0800a0bb
 8009fc4:	0800a055 	.word	0x0800a055
 8009fc8:	0800a033 	.word	0x0800a033
 8009fcc:	08009f43 	.word	0x08009f43
 8009fd0:	08009f43 	.word	0x08009f43
 8009fd4:	0800a0b7 	.word	0x0800a0b7
 8009fd8:	08009f43 	.word	0x08009f43
 8009fdc:	0800a091 	.word	0x0800a091
 8009fe0:	08009f43 	.word	0x08009f43
 8009fe4:	08009f43 	.word	0x08009f43
 8009fe8:	0800a03b 	.word	0x0800a03b
 8009fec:	3b45      	subs	r3, #69	@ 0x45
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d8a7      	bhi.n	8009f42 <__ssvfiscanf_r+0xd2>
 8009ff2:	2305      	movs	r3, #5
 8009ff4:	e031      	b.n	800a05a <__ssvfiscanf_r+0x1ea>
 8009ff6:	6863      	ldr	r3, [r4, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dd0d      	ble.n	800a018 <__ssvfiscanf_r+0x1a8>
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	781a      	ldrb	r2, [r3, #0]
 800a000:	454a      	cmp	r2, r9
 800a002:	f040 80a7 	bne.w	800a154 <__ssvfiscanf_r+0x2e4>
 800a006:	3301      	adds	r3, #1
 800a008:	6862      	ldr	r2, [r4, #4]
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a00e:	3a01      	subs	r2, #1
 800a010:	3301      	adds	r3, #1
 800a012:	6062      	str	r2, [r4, #4]
 800a014:	9345      	str	r3, [sp, #276]	@ 0x114
 800a016:	e752      	b.n	8009ebe <__ssvfiscanf_r+0x4e>
 800a018:	4621      	mov	r1, r4
 800a01a:	4630      	mov	r0, r6
 800a01c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a01e:	4798      	blx	r3
 800a020:	2800      	cmp	r0, #0
 800a022:	d0eb      	beq.n	8009ffc <__ssvfiscanf_r+0x18c>
 800a024:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a026:	2800      	cmp	r0, #0
 800a028:	f040 808c 	bne.w	800a144 <__ssvfiscanf_r+0x2d4>
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295
 800a030:	e08c      	b.n	800a14c <__ssvfiscanf_r+0x2dc>
 800a032:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a034:	f042 0220 	orr.w	r2, r2, #32
 800a038:	9241      	str	r2, [sp, #260]	@ 0x104
 800a03a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a03c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a040:	9241      	str	r2, [sp, #260]	@ 0x104
 800a042:	2210      	movs	r2, #16
 800a044:	2b6e      	cmp	r3, #110	@ 0x6e
 800a046:	9242      	str	r2, [sp, #264]	@ 0x108
 800a048:	d902      	bls.n	800a050 <__ssvfiscanf_r+0x1e0>
 800a04a:	e005      	b.n	800a058 <__ssvfiscanf_r+0x1e8>
 800a04c:	2300      	movs	r3, #0
 800a04e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a050:	2303      	movs	r3, #3
 800a052:	e002      	b.n	800a05a <__ssvfiscanf_r+0x1ea>
 800a054:	2308      	movs	r3, #8
 800a056:	9342      	str	r3, [sp, #264]	@ 0x108
 800a058:	2304      	movs	r3, #4
 800a05a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a05c:	6863      	ldr	r3, [r4, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	dd39      	ble.n	800a0d6 <__ssvfiscanf_r+0x266>
 800a062:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a064:	0659      	lsls	r1, r3, #25
 800a066:	d404      	bmi.n	800a072 <__ssvfiscanf_r+0x202>
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	5cba      	ldrb	r2, [r7, r2]
 800a06e:	0712      	lsls	r2, r2, #28
 800a070:	d438      	bmi.n	800a0e4 <__ssvfiscanf_r+0x274>
 800a072:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a074:	2b02      	cmp	r3, #2
 800a076:	dc47      	bgt.n	800a108 <__ssvfiscanf_r+0x298>
 800a078:	466b      	mov	r3, sp
 800a07a:	4622      	mov	r2, r4
 800a07c:	4630      	mov	r0, r6
 800a07e:	a941      	add	r1, sp, #260	@ 0x104
 800a080:	f000 f9fa 	bl	800a478 <_scanf_chars>
 800a084:	2801      	cmp	r0, #1
 800a086:	d065      	beq.n	800a154 <__ssvfiscanf_r+0x2e4>
 800a088:	2802      	cmp	r0, #2
 800a08a:	f47f af18 	bne.w	8009ebe <__ssvfiscanf_r+0x4e>
 800a08e:	e7c9      	b.n	800a024 <__ssvfiscanf_r+0x1b4>
 800a090:	220a      	movs	r2, #10
 800a092:	e7d7      	b.n	800a044 <__ssvfiscanf_r+0x1d4>
 800a094:	4629      	mov	r1, r5
 800a096:	4640      	mov	r0, r8
 800a098:	f000 fbf4 	bl	800a884 <__sccl>
 800a09c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a09e:	4605      	mov	r5, r0
 800a0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0a4:	9341      	str	r3, [sp, #260]	@ 0x104
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e7d7      	b.n	800a05a <__ssvfiscanf_r+0x1ea>
 800a0aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a0ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0b0:	9341      	str	r3, [sp, #260]	@ 0x104
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e7d1      	b.n	800a05a <__ssvfiscanf_r+0x1ea>
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	e7cf      	b.n	800a05a <__ssvfiscanf_r+0x1ea>
 800a0ba:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a0bc:	06c3      	lsls	r3, r0, #27
 800a0be:	f53f aefe 	bmi.w	8009ebe <__ssvfiscanf_r+0x4e>
 800a0c2:	9b00      	ldr	r3, [sp, #0]
 800a0c4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a0c6:	1d19      	adds	r1, r3, #4
 800a0c8:	9100      	str	r1, [sp, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	07c0      	lsls	r0, r0, #31
 800a0ce:	bf4c      	ite	mi
 800a0d0:	801a      	strhmi	r2, [r3, #0]
 800a0d2:	601a      	strpl	r2, [r3, #0]
 800a0d4:	e6f3      	b.n	8009ebe <__ssvfiscanf_r+0x4e>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4630      	mov	r0, r6
 800a0da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a0dc:	4798      	blx	r3
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d0bf      	beq.n	800a062 <__ssvfiscanf_r+0x1f2>
 800a0e2:	e79f      	b.n	800a024 <__ssvfiscanf_r+0x1b4>
 800a0e4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a0e6:	3201      	adds	r2, #1
 800a0e8:	9245      	str	r2, [sp, #276]	@ 0x114
 800a0ea:	6862      	ldr	r2, [r4, #4]
 800a0ec:	3a01      	subs	r2, #1
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	6062      	str	r2, [r4, #4]
 800a0f2:	dd02      	ble.n	800a0fa <__ssvfiscanf_r+0x28a>
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	6023      	str	r3, [r4, #0]
 800a0f8:	e7b6      	b.n	800a068 <__ssvfiscanf_r+0x1f8>
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a100:	4798      	blx	r3
 800a102:	2800      	cmp	r0, #0
 800a104:	d0b0      	beq.n	800a068 <__ssvfiscanf_r+0x1f8>
 800a106:	e78d      	b.n	800a024 <__ssvfiscanf_r+0x1b4>
 800a108:	2b04      	cmp	r3, #4
 800a10a:	dc06      	bgt.n	800a11a <__ssvfiscanf_r+0x2aa>
 800a10c:	466b      	mov	r3, sp
 800a10e:	4622      	mov	r2, r4
 800a110:	4630      	mov	r0, r6
 800a112:	a941      	add	r1, sp, #260	@ 0x104
 800a114:	f000 fa0a 	bl	800a52c <_scanf_i>
 800a118:	e7b4      	b.n	800a084 <__ssvfiscanf_r+0x214>
 800a11a:	4b09      	ldr	r3, [pc, #36]	@ (800a140 <__ssvfiscanf_r+0x2d0>)
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f43f aece 	beq.w	8009ebe <__ssvfiscanf_r+0x4e>
 800a122:	466b      	mov	r3, sp
 800a124:	4622      	mov	r2, r4
 800a126:	4630      	mov	r0, r6
 800a128:	a941      	add	r1, sp, #260	@ 0x104
 800a12a:	f7fe f865 	bl	80081f8 <_scanf_float>
 800a12e:	e7a9      	b.n	800a084 <__ssvfiscanf_r+0x214>
 800a130:	08009dbd 	.word	0x08009dbd
 800a134:	08009e37 	.word	0x08009e37
 800a138:	0800cd79 	.word	0x0800cd79
 800a13c:	0800cc0c 	.word	0x0800cc0c
 800a140:	080081f9 	.word	0x080081f9
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	065b      	lsls	r3, r3, #25
 800a148:	f53f af70 	bmi.w	800a02c <__ssvfiscanf_r+0x1bc>
 800a14c:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800a150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a154:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a156:	e7f9      	b.n	800a14c <__ssvfiscanf_r+0x2dc>

0800a158 <_printf_common>:
 800a158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a15c:	4616      	mov	r6, r2
 800a15e:	4698      	mov	r8, r3
 800a160:	688a      	ldr	r2, [r1, #8]
 800a162:	690b      	ldr	r3, [r1, #16]
 800a164:	4607      	mov	r7, r0
 800a166:	4293      	cmp	r3, r2
 800a168:	bfb8      	it	lt
 800a16a:	4613      	movlt	r3, r2
 800a16c:	6033      	str	r3, [r6, #0]
 800a16e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a172:	460c      	mov	r4, r1
 800a174:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a178:	b10a      	cbz	r2, 800a17e <_printf_common+0x26>
 800a17a:	3301      	adds	r3, #1
 800a17c:	6033      	str	r3, [r6, #0]
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	0699      	lsls	r1, r3, #26
 800a182:	bf42      	ittt	mi
 800a184:	6833      	ldrmi	r3, [r6, #0]
 800a186:	3302      	addmi	r3, #2
 800a188:	6033      	strmi	r3, [r6, #0]
 800a18a:	6825      	ldr	r5, [r4, #0]
 800a18c:	f015 0506 	ands.w	r5, r5, #6
 800a190:	d106      	bne.n	800a1a0 <_printf_common+0x48>
 800a192:	f104 0a19 	add.w	sl, r4, #25
 800a196:	68e3      	ldr	r3, [r4, #12]
 800a198:	6832      	ldr	r2, [r6, #0]
 800a19a:	1a9b      	subs	r3, r3, r2
 800a19c:	42ab      	cmp	r3, r5
 800a19e:	dc2b      	bgt.n	800a1f8 <_printf_common+0xa0>
 800a1a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1a4:	6822      	ldr	r2, [r4, #0]
 800a1a6:	3b00      	subs	r3, #0
 800a1a8:	bf18      	it	ne
 800a1aa:	2301      	movne	r3, #1
 800a1ac:	0692      	lsls	r2, r2, #26
 800a1ae:	d430      	bmi.n	800a212 <_printf_common+0xba>
 800a1b0:	4641      	mov	r1, r8
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1b8:	47c8      	blx	r9
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d023      	beq.n	800a206 <_printf_common+0xae>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	6922      	ldr	r2, [r4, #16]
 800a1c2:	f003 0306 	and.w	r3, r3, #6
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	bf14      	ite	ne
 800a1ca:	2500      	movne	r5, #0
 800a1cc:	6833      	ldreq	r3, [r6, #0]
 800a1ce:	f04f 0600 	mov.w	r6, #0
 800a1d2:	bf08      	it	eq
 800a1d4:	68e5      	ldreq	r5, [r4, #12]
 800a1d6:	f104 041a 	add.w	r4, r4, #26
 800a1da:	bf08      	it	eq
 800a1dc:	1aed      	subeq	r5, r5, r3
 800a1de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a1e2:	bf08      	it	eq
 800a1e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	bfc4      	itt	gt
 800a1ec:	1a9b      	subgt	r3, r3, r2
 800a1ee:	18ed      	addgt	r5, r5, r3
 800a1f0:	42b5      	cmp	r5, r6
 800a1f2:	d11a      	bne.n	800a22a <_printf_common+0xd2>
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	e008      	b.n	800a20a <_printf_common+0xb2>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	4652      	mov	r2, sl
 800a1fc:	4641      	mov	r1, r8
 800a1fe:	4638      	mov	r0, r7
 800a200:	47c8      	blx	r9
 800a202:	3001      	adds	r0, #1
 800a204:	d103      	bne.n	800a20e <_printf_common+0xb6>
 800a206:	f04f 30ff 	mov.w	r0, #4294967295
 800a20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20e:	3501      	adds	r5, #1
 800a210:	e7c1      	b.n	800a196 <_printf_common+0x3e>
 800a212:	2030      	movs	r0, #48	@ 0x30
 800a214:	18e1      	adds	r1, r4, r3
 800a216:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a21a:	1c5a      	adds	r2, r3, #1
 800a21c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a220:	4422      	add	r2, r4
 800a222:	3302      	adds	r3, #2
 800a224:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a228:	e7c2      	b.n	800a1b0 <_printf_common+0x58>
 800a22a:	2301      	movs	r3, #1
 800a22c:	4622      	mov	r2, r4
 800a22e:	4641      	mov	r1, r8
 800a230:	4638      	mov	r0, r7
 800a232:	47c8      	blx	r9
 800a234:	3001      	adds	r0, #1
 800a236:	d0e6      	beq.n	800a206 <_printf_common+0xae>
 800a238:	3601      	adds	r6, #1
 800a23a:	e7d9      	b.n	800a1f0 <_printf_common+0x98>

0800a23c <_printf_i>:
 800a23c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a240:	7e0f      	ldrb	r7, [r1, #24]
 800a242:	4691      	mov	r9, r2
 800a244:	2f78      	cmp	r7, #120	@ 0x78
 800a246:	4680      	mov	r8, r0
 800a248:	460c      	mov	r4, r1
 800a24a:	469a      	mov	sl, r3
 800a24c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a24e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a252:	d807      	bhi.n	800a264 <_printf_i+0x28>
 800a254:	2f62      	cmp	r7, #98	@ 0x62
 800a256:	d80a      	bhi.n	800a26e <_printf_i+0x32>
 800a258:	2f00      	cmp	r7, #0
 800a25a:	f000 80d1 	beq.w	800a400 <_printf_i+0x1c4>
 800a25e:	2f58      	cmp	r7, #88	@ 0x58
 800a260:	f000 80b8 	beq.w	800a3d4 <_printf_i+0x198>
 800a264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a268:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a26c:	e03a      	b.n	800a2e4 <_printf_i+0xa8>
 800a26e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a272:	2b15      	cmp	r3, #21
 800a274:	d8f6      	bhi.n	800a264 <_printf_i+0x28>
 800a276:	a101      	add	r1, pc, #4	@ (adr r1, 800a27c <_printf_i+0x40>)
 800a278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a27c:	0800a2d5 	.word	0x0800a2d5
 800a280:	0800a2e9 	.word	0x0800a2e9
 800a284:	0800a265 	.word	0x0800a265
 800a288:	0800a265 	.word	0x0800a265
 800a28c:	0800a265 	.word	0x0800a265
 800a290:	0800a265 	.word	0x0800a265
 800a294:	0800a2e9 	.word	0x0800a2e9
 800a298:	0800a265 	.word	0x0800a265
 800a29c:	0800a265 	.word	0x0800a265
 800a2a0:	0800a265 	.word	0x0800a265
 800a2a4:	0800a265 	.word	0x0800a265
 800a2a8:	0800a3e7 	.word	0x0800a3e7
 800a2ac:	0800a313 	.word	0x0800a313
 800a2b0:	0800a3a1 	.word	0x0800a3a1
 800a2b4:	0800a265 	.word	0x0800a265
 800a2b8:	0800a265 	.word	0x0800a265
 800a2bc:	0800a409 	.word	0x0800a409
 800a2c0:	0800a265 	.word	0x0800a265
 800a2c4:	0800a313 	.word	0x0800a313
 800a2c8:	0800a265 	.word	0x0800a265
 800a2cc:	0800a265 	.word	0x0800a265
 800a2d0:	0800a3a9 	.word	0x0800a3a9
 800a2d4:	6833      	ldr	r3, [r6, #0]
 800a2d6:	1d1a      	adds	r2, r3, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6032      	str	r2, [r6, #0]
 800a2dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e09c      	b.n	800a422 <_printf_i+0x1e6>
 800a2e8:	6833      	ldr	r3, [r6, #0]
 800a2ea:	6820      	ldr	r0, [r4, #0]
 800a2ec:	1d19      	adds	r1, r3, #4
 800a2ee:	6031      	str	r1, [r6, #0]
 800a2f0:	0606      	lsls	r6, r0, #24
 800a2f2:	d501      	bpl.n	800a2f8 <_printf_i+0xbc>
 800a2f4:	681d      	ldr	r5, [r3, #0]
 800a2f6:	e003      	b.n	800a300 <_printf_i+0xc4>
 800a2f8:	0645      	lsls	r5, r0, #25
 800a2fa:	d5fb      	bpl.n	800a2f4 <_printf_i+0xb8>
 800a2fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a300:	2d00      	cmp	r5, #0
 800a302:	da03      	bge.n	800a30c <_printf_i+0xd0>
 800a304:	232d      	movs	r3, #45	@ 0x2d
 800a306:	426d      	negs	r5, r5
 800a308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a30c:	230a      	movs	r3, #10
 800a30e:	4858      	ldr	r0, [pc, #352]	@ (800a470 <_printf_i+0x234>)
 800a310:	e011      	b.n	800a336 <_printf_i+0xfa>
 800a312:	6821      	ldr	r1, [r4, #0]
 800a314:	6833      	ldr	r3, [r6, #0]
 800a316:	0608      	lsls	r0, r1, #24
 800a318:	f853 5b04 	ldr.w	r5, [r3], #4
 800a31c:	d402      	bmi.n	800a324 <_printf_i+0xe8>
 800a31e:	0649      	lsls	r1, r1, #25
 800a320:	bf48      	it	mi
 800a322:	b2ad      	uxthmi	r5, r5
 800a324:	2f6f      	cmp	r7, #111	@ 0x6f
 800a326:	6033      	str	r3, [r6, #0]
 800a328:	bf14      	ite	ne
 800a32a:	230a      	movne	r3, #10
 800a32c:	2308      	moveq	r3, #8
 800a32e:	4850      	ldr	r0, [pc, #320]	@ (800a470 <_printf_i+0x234>)
 800a330:	2100      	movs	r1, #0
 800a332:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a336:	6866      	ldr	r6, [r4, #4]
 800a338:	2e00      	cmp	r6, #0
 800a33a:	60a6      	str	r6, [r4, #8]
 800a33c:	db05      	blt.n	800a34a <_printf_i+0x10e>
 800a33e:	6821      	ldr	r1, [r4, #0]
 800a340:	432e      	orrs	r6, r5
 800a342:	f021 0104 	bic.w	r1, r1, #4
 800a346:	6021      	str	r1, [r4, #0]
 800a348:	d04b      	beq.n	800a3e2 <_printf_i+0x1a6>
 800a34a:	4616      	mov	r6, r2
 800a34c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a350:	fb03 5711 	mls	r7, r3, r1, r5
 800a354:	5dc7      	ldrb	r7, [r0, r7]
 800a356:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a35a:	462f      	mov	r7, r5
 800a35c:	42bb      	cmp	r3, r7
 800a35e:	460d      	mov	r5, r1
 800a360:	d9f4      	bls.n	800a34c <_printf_i+0x110>
 800a362:	2b08      	cmp	r3, #8
 800a364:	d10b      	bne.n	800a37e <_printf_i+0x142>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	07df      	lsls	r7, r3, #31
 800a36a:	d508      	bpl.n	800a37e <_printf_i+0x142>
 800a36c:	6923      	ldr	r3, [r4, #16]
 800a36e:	6861      	ldr	r1, [r4, #4]
 800a370:	4299      	cmp	r1, r3
 800a372:	bfde      	ittt	le
 800a374:	2330      	movle	r3, #48	@ 0x30
 800a376:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a37a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a37e:	1b92      	subs	r2, r2, r6
 800a380:	6122      	str	r2, [r4, #16]
 800a382:	464b      	mov	r3, r9
 800a384:	4621      	mov	r1, r4
 800a386:	4640      	mov	r0, r8
 800a388:	f8cd a000 	str.w	sl, [sp]
 800a38c:	aa03      	add	r2, sp, #12
 800a38e:	f7ff fee3 	bl	800a158 <_printf_common>
 800a392:	3001      	adds	r0, #1
 800a394:	d14a      	bne.n	800a42c <_printf_i+0x1f0>
 800a396:	f04f 30ff 	mov.w	r0, #4294967295
 800a39a:	b004      	add	sp, #16
 800a39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	f043 0320 	orr.w	r3, r3, #32
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	2778      	movs	r7, #120	@ 0x78
 800a3aa:	4832      	ldr	r0, [pc, #200]	@ (800a474 <_printf_i+0x238>)
 800a3ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	6831      	ldr	r1, [r6, #0]
 800a3b4:	061f      	lsls	r7, r3, #24
 800a3b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3ba:	d402      	bmi.n	800a3c2 <_printf_i+0x186>
 800a3bc:	065f      	lsls	r7, r3, #25
 800a3be:	bf48      	it	mi
 800a3c0:	b2ad      	uxthmi	r5, r5
 800a3c2:	6031      	str	r1, [r6, #0]
 800a3c4:	07d9      	lsls	r1, r3, #31
 800a3c6:	bf44      	itt	mi
 800a3c8:	f043 0320 	orrmi.w	r3, r3, #32
 800a3cc:	6023      	strmi	r3, [r4, #0]
 800a3ce:	b11d      	cbz	r5, 800a3d8 <_printf_i+0x19c>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	e7ad      	b.n	800a330 <_printf_i+0xf4>
 800a3d4:	4826      	ldr	r0, [pc, #152]	@ (800a470 <_printf_i+0x234>)
 800a3d6:	e7e9      	b.n	800a3ac <_printf_i+0x170>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	f023 0320 	bic.w	r3, r3, #32
 800a3de:	6023      	str	r3, [r4, #0]
 800a3e0:	e7f6      	b.n	800a3d0 <_printf_i+0x194>
 800a3e2:	4616      	mov	r6, r2
 800a3e4:	e7bd      	b.n	800a362 <_printf_i+0x126>
 800a3e6:	6833      	ldr	r3, [r6, #0]
 800a3e8:	6825      	ldr	r5, [r4, #0]
 800a3ea:	1d18      	adds	r0, r3, #4
 800a3ec:	6961      	ldr	r1, [r4, #20]
 800a3ee:	6030      	str	r0, [r6, #0]
 800a3f0:	062e      	lsls	r6, r5, #24
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	d501      	bpl.n	800a3fa <_printf_i+0x1be>
 800a3f6:	6019      	str	r1, [r3, #0]
 800a3f8:	e002      	b.n	800a400 <_printf_i+0x1c4>
 800a3fa:	0668      	lsls	r0, r5, #25
 800a3fc:	d5fb      	bpl.n	800a3f6 <_printf_i+0x1ba>
 800a3fe:	8019      	strh	r1, [r3, #0]
 800a400:	2300      	movs	r3, #0
 800a402:	4616      	mov	r6, r2
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	e7bc      	b.n	800a382 <_printf_i+0x146>
 800a408:	6833      	ldr	r3, [r6, #0]
 800a40a:	2100      	movs	r1, #0
 800a40c:	1d1a      	adds	r2, r3, #4
 800a40e:	6032      	str	r2, [r6, #0]
 800a410:	681e      	ldr	r6, [r3, #0]
 800a412:	6862      	ldr	r2, [r4, #4]
 800a414:	4630      	mov	r0, r6
 800a416:	f000 fad1 	bl	800a9bc <memchr>
 800a41a:	b108      	cbz	r0, 800a420 <_printf_i+0x1e4>
 800a41c:	1b80      	subs	r0, r0, r6
 800a41e:	6060      	str	r0, [r4, #4]
 800a420:	6863      	ldr	r3, [r4, #4]
 800a422:	6123      	str	r3, [r4, #16]
 800a424:	2300      	movs	r3, #0
 800a426:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a42a:	e7aa      	b.n	800a382 <_printf_i+0x146>
 800a42c:	4632      	mov	r2, r6
 800a42e:	4649      	mov	r1, r9
 800a430:	4640      	mov	r0, r8
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	47d0      	blx	sl
 800a436:	3001      	adds	r0, #1
 800a438:	d0ad      	beq.n	800a396 <_printf_i+0x15a>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	079b      	lsls	r3, r3, #30
 800a43e:	d413      	bmi.n	800a468 <_printf_i+0x22c>
 800a440:	68e0      	ldr	r0, [r4, #12]
 800a442:	9b03      	ldr	r3, [sp, #12]
 800a444:	4298      	cmp	r0, r3
 800a446:	bfb8      	it	lt
 800a448:	4618      	movlt	r0, r3
 800a44a:	e7a6      	b.n	800a39a <_printf_i+0x15e>
 800a44c:	2301      	movs	r3, #1
 800a44e:	4632      	mov	r2, r6
 800a450:	4649      	mov	r1, r9
 800a452:	4640      	mov	r0, r8
 800a454:	47d0      	blx	sl
 800a456:	3001      	adds	r0, #1
 800a458:	d09d      	beq.n	800a396 <_printf_i+0x15a>
 800a45a:	3501      	adds	r5, #1
 800a45c:	68e3      	ldr	r3, [r4, #12]
 800a45e:	9903      	ldr	r1, [sp, #12]
 800a460:	1a5b      	subs	r3, r3, r1
 800a462:	42ab      	cmp	r3, r5
 800a464:	dcf2      	bgt.n	800a44c <_printf_i+0x210>
 800a466:	e7eb      	b.n	800a440 <_printf_i+0x204>
 800a468:	2500      	movs	r5, #0
 800a46a:	f104 0619 	add.w	r6, r4, #25
 800a46e:	e7f5      	b.n	800a45c <_printf_i+0x220>
 800a470:	0800cc17 	.word	0x0800cc17
 800a474:	0800cc28 	.word	0x0800cc28

0800a478 <_scanf_chars>:
 800a478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a47c:	4615      	mov	r5, r2
 800a47e:	688a      	ldr	r2, [r1, #8]
 800a480:	4680      	mov	r8, r0
 800a482:	460c      	mov	r4, r1
 800a484:	b932      	cbnz	r2, 800a494 <_scanf_chars+0x1c>
 800a486:	698a      	ldr	r2, [r1, #24]
 800a488:	2a00      	cmp	r2, #0
 800a48a:	bf14      	ite	ne
 800a48c:	f04f 32ff 	movne.w	r2, #4294967295
 800a490:	2201      	moveq	r2, #1
 800a492:	608a      	str	r2, [r1, #8]
 800a494:	2700      	movs	r7, #0
 800a496:	6822      	ldr	r2, [r4, #0]
 800a498:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800a528 <_scanf_chars+0xb0>
 800a49c:	06d1      	lsls	r1, r2, #27
 800a49e:	bf5f      	itttt	pl
 800a4a0:	681a      	ldrpl	r2, [r3, #0]
 800a4a2:	1d11      	addpl	r1, r2, #4
 800a4a4:	6019      	strpl	r1, [r3, #0]
 800a4a6:	6816      	ldrpl	r6, [r2, #0]
 800a4a8:	69a0      	ldr	r0, [r4, #24]
 800a4aa:	b188      	cbz	r0, 800a4d0 <_scanf_chars+0x58>
 800a4ac:	2801      	cmp	r0, #1
 800a4ae:	d107      	bne.n	800a4c0 <_scanf_chars+0x48>
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	781a      	ldrb	r2, [r3, #0]
 800a4b4:	6963      	ldr	r3, [r4, #20]
 800a4b6:	5c9b      	ldrb	r3, [r3, r2]
 800a4b8:	b953      	cbnz	r3, 800a4d0 <_scanf_chars+0x58>
 800a4ba:	2f00      	cmp	r7, #0
 800a4bc:	d031      	beq.n	800a522 <_scanf_chars+0xaa>
 800a4be:	e022      	b.n	800a506 <_scanf_chars+0x8e>
 800a4c0:	2802      	cmp	r0, #2
 800a4c2:	d120      	bne.n	800a506 <_scanf_chars+0x8e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a4cc:	071b      	lsls	r3, r3, #28
 800a4ce:	d41a      	bmi.n	800a506 <_scanf_chars+0x8e>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	3701      	adds	r7, #1
 800a4d4:	06da      	lsls	r2, r3, #27
 800a4d6:	bf5e      	ittt	pl
 800a4d8:	682b      	ldrpl	r3, [r5, #0]
 800a4da:	781b      	ldrbpl	r3, [r3, #0]
 800a4dc:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a4e0:	682a      	ldr	r2, [r5, #0]
 800a4e2:	686b      	ldr	r3, [r5, #4]
 800a4e4:	3201      	adds	r2, #1
 800a4e6:	602a      	str	r2, [r5, #0]
 800a4e8:	68a2      	ldr	r2, [r4, #8]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	3a01      	subs	r2, #1
 800a4ee:	606b      	str	r3, [r5, #4]
 800a4f0:	60a2      	str	r2, [r4, #8]
 800a4f2:	b142      	cbz	r2, 800a506 <_scanf_chars+0x8e>
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	dcd7      	bgt.n	800a4a8 <_scanf_chars+0x30>
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a500:	4798      	blx	r3
 800a502:	2800      	cmp	r0, #0
 800a504:	d0d0      	beq.n	800a4a8 <_scanf_chars+0x30>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	f013 0310 	ands.w	r3, r3, #16
 800a50c:	d105      	bne.n	800a51a <_scanf_chars+0xa2>
 800a50e:	68e2      	ldr	r2, [r4, #12]
 800a510:	3201      	adds	r2, #1
 800a512:	60e2      	str	r2, [r4, #12]
 800a514:	69a2      	ldr	r2, [r4, #24]
 800a516:	b102      	cbz	r2, 800a51a <_scanf_chars+0xa2>
 800a518:	7033      	strb	r3, [r6, #0]
 800a51a:	2000      	movs	r0, #0
 800a51c:	6923      	ldr	r3, [r4, #16]
 800a51e:	443b      	add	r3, r7
 800a520:	6123      	str	r3, [r4, #16]
 800a522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a526:	bf00      	nop
 800a528:	0800cd79 	.word	0x0800cd79

0800a52c <_scanf_i>:
 800a52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a530:	460c      	mov	r4, r1
 800a532:	4698      	mov	r8, r3
 800a534:	4b72      	ldr	r3, [pc, #456]	@ (800a700 <_scanf_i+0x1d4>)
 800a536:	b087      	sub	sp, #28
 800a538:	4682      	mov	sl, r0
 800a53a:	4616      	mov	r6, r2
 800a53c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a540:	ab03      	add	r3, sp, #12
 800a542:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a546:	4b6f      	ldr	r3, [pc, #444]	@ (800a704 <_scanf_i+0x1d8>)
 800a548:	69a1      	ldr	r1, [r4, #24]
 800a54a:	4a6f      	ldr	r2, [pc, #444]	@ (800a708 <_scanf_i+0x1dc>)
 800a54c:	4627      	mov	r7, r4
 800a54e:	2903      	cmp	r1, #3
 800a550:	bf08      	it	eq
 800a552:	461a      	moveq	r2, r3
 800a554:	68a3      	ldr	r3, [r4, #8]
 800a556:	9201      	str	r2, [sp, #4]
 800a558:	1e5a      	subs	r2, r3, #1
 800a55a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a55e:	bf81      	itttt	hi
 800a560:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a564:	eb03 0905 	addhi.w	r9, r3, r5
 800a568:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a56c:	60a3      	strhi	r3, [r4, #8]
 800a56e:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a572:	bf98      	it	ls
 800a574:	f04f 0900 	movls.w	r9, #0
 800a578:	463d      	mov	r5, r7
 800a57a:	f04f 0b00 	mov.w	fp, #0
 800a57e:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	6831      	ldr	r1, [r6, #0]
 800a586:	ab03      	add	r3, sp, #12
 800a588:	2202      	movs	r2, #2
 800a58a:	7809      	ldrb	r1, [r1, #0]
 800a58c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a590:	f000 fa14 	bl	800a9bc <memchr>
 800a594:	b328      	cbz	r0, 800a5e2 <_scanf_i+0xb6>
 800a596:	f1bb 0f01 	cmp.w	fp, #1
 800a59a:	d159      	bne.n	800a650 <_scanf_i+0x124>
 800a59c:	6862      	ldr	r2, [r4, #4]
 800a59e:	b92a      	cbnz	r2, 800a5ac <_scanf_i+0x80>
 800a5a0:	2108      	movs	r1, #8
 800a5a2:	6822      	ldr	r2, [r4, #0]
 800a5a4:	6061      	str	r1, [r4, #4]
 800a5a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5aa:	6022      	str	r2, [r4, #0]
 800a5ac:	6822      	ldr	r2, [r4, #0]
 800a5ae:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a5b2:	6022      	str	r2, [r4, #0]
 800a5b4:	68a2      	ldr	r2, [r4, #8]
 800a5b6:	1e51      	subs	r1, r2, #1
 800a5b8:	60a1      	str	r1, [r4, #8]
 800a5ba:	b192      	cbz	r2, 800a5e2 <_scanf_i+0xb6>
 800a5bc:	6832      	ldr	r2, [r6, #0]
 800a5be:	1c51      	adds	r1, r2, #1
 800a5c0:	6031      	str	r1, [r6, #0]
 800a5c2:	7812      	ldrb	r2, [r2, #0]
 800a5c4:	f805 2b01 	strb.w	r2, [r5], #1
 800a5c8:	6872      	ldr	r2, [r6, #4]
 800a5ca:	3a01      	subs	r2, #1
 800a5cc:	2a00      	cmp	r2, #0
 800a5ce:	6072      	str	r2, [r6, #4]
 800a5d0:	dc07      	bgt.n	800a5e2 <_scanf_i+0xb6>
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	4650      	mov	r0, sl
 800a5d6:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a5da:	4790      	blx	r2
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	f040 8085 	bne.w	800a6ec <_scanf_i+0x1c0>
 800a5e2:	f10b 0b01 	add.w	fp, fp, #1
 800a5e6:	f1bb 0f03 	cmp.w	fp, #3
 800a5ea:	d1cb      	bne.n	800a584 <_scanf_i+0x58>
 800a5ec:	6863      	ldr	r3, [r4, #4]
 800a5ee:	b90b      	cbnz	r3, 800a5f4 <_scanf_i+0xc8>
 800a5f0:	230a      	movs	r3, #10
 800a5f2:	6063      	str	r3, [r4, #4]
 800a5f4:	6863      	ldr	r3, [r4, #4]
 800a5f6:	4945      	ldr	r1, [pc, #276]	@ (800a70c <_scanf_i+0x1e0>)
 800a5f8:	6960      	ldr	r0, [r4, #20]
 800a5fa:	1ac9      	subs	r1, r1, r3
 800a5fc:	f000 f942 	bl	800a884 <__sccl>
 800a600:	f04f 0b00 	mov.w	fp, #0
 800a604:	68a3      	ldr	r3, [r4, #8]
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d03d      	beq.n	800a688 <_scanf_i+0x15c>
 800a60c:	6831      	ldr	r1, [r6, #0]
 800a60e:	6960      	ldr	r0, [r4, #20]
 800a610:	f891 c000 	ldrb.w	ip, [r1]
 800a614:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a618:	2800      	cmp	r0, #0
 800a61a:	d035      	beq.n	800a688 <_scanf_i+0x15c>
 800a61c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a620:	d124      	bne.n	800a66c <_scanf_i+0x140>
 800a622:	0510      	lsls	r0, r2, #20
 800a624:	d522      	bpl.n	800a66c <_scanf_i+0x140>
 800a626:	f10b 0b01 	add.w	fp, fp, #1
 800a62a:	f1b9 0f00 	cmp.w	r9, #0
 800a62e:	d003      	beq.n	800a638 <_scanf_i+0x10c>
 800a630:	3301      	adds	r3, #1
 800a632:	f109 39ff 	add.w	r9, r9, #4294967295
 800a636:	60a3      	str	r3, [r4, #8]
 800a638:	6873      	ldr	r3, [r6, #4]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	6073      	str	r3, [r6, #4]
 800a640:	dd1b      	ble.n	800a67a <_scanf_i+0x14e>
 800a642:	6833      	ldr	r3, [r6, #0]
 800a644:	3301      	adds	r3, #1
 800a646:	6033      	str	r3, [r6, #0]
 800a648:	68a3      	ldr	r3, [r4, #8]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	60a3      	str	r3, [r4, #8]
 800a64e:	e7d9      	b.n	800a604 <_scanf_i+0xd8>
 800a650:	f1bb 0f02 	cmp.w	fp, #2
 800a654:	d1ae      	bne.n	800a5b4 <_scanf_i+0x88>
 800a656:	6822      	ldr	r2, [r4, #0]
 800a658:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a65c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a660:	d1c4      	bne.n	800a5ec <_scanf_i+0xc0>
 800a662:	2110      	movs	r1, #16
 800a664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a668:	6061      	str	r1, [r4, #4]
 800a66a:	e7a2      	b.n	800a5b2 <_scanf_i+0x86>
 800a66c:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a670:	6022      	str	r2, [r4, #0]
 800a672:	780b      	ldrb	r3, [r1, #0]
 800a674:	f805 3b01 	strb.w	r3, [r5], #1
 800a678:	e7de      	b.n	800a638 <_scanf_i+0x10c>
 800a67a:	4631      	mov	r1, r6
 800a67c:	4650      	mov	r0, sl
 800a67e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a682:	4798      	blx	r3
 800a684:	2800      	cmp	r0, #0
 800a686:	d0df      	beq.n	800a648 <_scanf_i+0x11c>
 800a688:	6823      	ldr	r3, [r4, #0]
 800a68a:	05d9      	lsls	r1, r3, #23
 800a68c:	d50d      	bpl.n	800a6aa <_scanf_i+0x17e>
 800a68e:	42bd      	cmp	r5, r7
 800a690:	d909      	bls.n	800a6a6 <_scanf_i+0x17a>
 800a692:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a696:	4632      	mov	r2, r6
 800a698:	4650      	mov	r0, sl
 800a69a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a69e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a6a2:	4798      	blx	r3
 800a6a4:	464d      	mov	r5, r9
 800a6a6:	42bd      	cmp	r5, r7
 800a6a8:	d028      	beq.n	800a6fc <_scanf_i+0x1d0>
 800a6aa:	6822      	ldr	r2, [r4, #0]
 800a6ac:	f012 0210 	ands.w	r2, r2, #16
 800a6b0:	d113      	bne.n	800a6da <_scanf_i+0x1ae>
 800a6b2:	702a      	strb	r2, [r5, #0]
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	6863      	ldr	r3, [r4, #4]
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	9e01      	ldr	r6, [sp, #4]
 800a6bc:	47b0      	blx	r6
 800a6be:	f8d8 3000 	ldr.w	r3, [r8]
 800a6c2:	6821      	ldr	r1, [r4, #0]
 800a6c4:	1d1a      	adds	r2, r3, #4
 800a6c6:	f8c8 2000 	str.w	r2, [r8]
 800a6ca:	f011 0f20 	tst.w	r1, #32
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	d00f      	beq.n	800a6f2 <_scanf_i+0x1c6>
 800a6d2:	6018      	str	r0, [r3, #0]
 800a6d4:	68e3      	ldr	r3, [r4, #12]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	60e3      	str	r3, [r4, #12]
 800a6da:	2000      	movs	r0, #0
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	1bed      	subs	r5, r5, r7
 800a6e0:	445d      	add	r5, fp
 800a6e2:	442b      	add	r3, r5
 800a6e4:	6123      	str	r3, [r4, #16]
 800a6e6:	b007      	add	sp, #28
 800a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ec:	f04f 0b00 	mov.w	fp, #0
 800a6f0:	e7ca      	b.n	800a688 <_scanf_i+0x15c>
 800a6f2:	07ca      	lsls	r2, r1, #31
 800a6f4:	bf4c      	ite	mi
 800a6f6:	8018      	strhmi	r0, [r3, #0]
 800a6f8:	6018      	strpl	r0, [r3, #0]
 800a6fa:	e7eb      	b.n	800a6d4 <_scanf_i+0x1a8>
 800a6fc:	2001      	movs	r0, #1
 800a6fe:	e7f2      	b.n	800a6e6 <_scanf_i+0x1ba>
 800a700:	0800cac8 	.word	0x0800cac8
 800a704:	08009b09 	.word	0x08009b09
 800a708:	0800bb05 	.word	0x0800bb05
 800a70c:	0800cc49 	.word	0x0800cc49

0800a710 <__sflush_r>:
 800a710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	0716      	lsls	r6, r2, #28
 800a718:	4605      	mov	r5, r0
 800a71a:	460c      	mov	r4, r1
 800a71c:	d454      	bmi.n	800a7c8 <__sflush_r+0xb8>
 800a71e:	684b      	ldr	r3, [r1, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	dc02      	bgt.n	800a72a <__sflush_r+0x1a>
 800a724:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	dd48      	ble.n	800a7bc <__sflush_r+0xac>
 800a72a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a72c:	2e00      	cmp	r6, #0
 800a72e:	d045      	beq.n	800a7bc <__sflush_r+0xac>
 800a730:	2300      	movs	r3, #0
 800a732:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a736:	682f      	ldr	r7, [r5, #0]
 800a738:	6a21      	ldr	r1, [r4, #32]
 800a73a:	602b      	str	r3, [r5, #0]
 800a73c:	d030      	beq.n	800a7a0 <__sflush_r+0x90>
 800a73e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	0759      	lsls	r1, r3, #29
 800a744:	d505      	bpl.n	800a752 <__sflush_r+0x42>
 800a746:	6863      	ldr	r3, [r4, #4]
 800a748:	1ad2      	subs	r2, r2, r3
 800a74a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a74c:	b10b      	cbz	r3, 800a752 <__sflush_r+0x42>
 800a74e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a750:	1ad2      	subs	r2, r2, r3
 800a752:	2300      	movs	r3, #0
 800a754:	4628      	mov	r0, r5
 800a756:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a758:	6a21      	ldr	r1, [r4, #32]
 800a75a:	47b0      	blx	r6
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	d106      	bne.n	800a770 <__sflush_r+0x60>
 800a762:	6829      	ldr	r1, [r5, #0]
 800a764:	291d      	cmp	r1, #29
 800a766:	d82b      	bhi.n	800a7c0 <__sflush_r+0xb0>
 800a768:	4a28      	ldr	r2, [pc, #160]	@ (800a80c <__sflush_r+0xfc>)
 800a76a:	40ca      	lsrs	r2, r1
 800a76c:	07d6      	lsls	r6, r2, #31
 800a76e:	d527      	bpl.n	800a7c0 <__sflush_r+0xb0>
 800a770:	2200      	movs	r2, #0
 800a772:	6062      	str	r2, [r4, #4]
 800a774:	6922      	ldr	r2, [r4, #16]
 800a776:	04d9      	lsls	r1, r3, #19
 800a778:	6022      	str	r2, [r4, #0]
 800a77a:	d504      	bpl.n	800a786 <__sflush_r+0x76>
 800a77c:	1c42      	adds	r2, r0, #1
 800a77e:	d101      	bne.n	800a784 <__sflush_r+0x74>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b903      	cbnz	r3, 800a786 <__sflush_r+0x76>
 800a784:	6560      	str	r0, [r4, #84]	@ 0x54
 800a786:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a788:	602f      	str	r7, [r5, #0]
 800a78a:	b1b9      	cbz	r1, 800a7bc <__sflush_r+0xac>
 800a78c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a790:	4299      	cmp	r1, r3
 800a792:	d002      	beq.n	800a79a <__sflush_r+0x8a>
 800a794:	4628      	mov	r0, r5
 800a796:	f7fe fa3d 	bl	8008c14 <_free_r>
 800a79a:	2300      	movs	r3, #0
 800a79c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a79e:	e00d      	b.n	800a7bc <__sflush_r+0xac>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	47b0      	blx	r6
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	1c50      	adds	r0, r2, #1
 800a7aa:	d1c9      	bne.n	800a740 <__sflush_r+0x30>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0c6      	beq.n	800a740 <__sflush_r+0x30>
 800a7b2:	2b1d      	cmp	r3, #29
 800a7b4:	d001      	beq.n	800a7ba <__sflush_r+0xaa>
 800a7b6:	2b16      	cmp	r3, #22
 800a7b8:	d11d      	bne.n	800a7f6 <__sflush_r+0xe6>
 800a7ba:	602f      	str	r7, [r5, #0]
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e021      	b.n	800a804 <__sflush_r+0xf4>
 800a7c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7c4:	b21b      	sxth	r3, r3
 800a7c6:	e01a      	b.n	800a7fe <__sflush_r+0xee>
 800a7c8:	690f      	ldr	r7, [r1, #16]
 800a7ca:	2f00      	cmp	r7, #0
 800a7cc:	d0f6      	beq.n	800a7bc <__sflush_r+0xac>
 800a7ce:	0793      	lsls	r3, r2, #30
 800a7d0:	bf18      	it	ne
 800a7d2:	2300      	movne	r3, #0
 800a7d4:	680e      	ldr	r6, [r1, #0]
 800a7d6:	bf08      	it	eq
 800a7d8:	694b      	ldreq	r3, [r1, #20]
 800a7da:	1bf6      	subs	r6, r6, r7
 800a7dc:	600f      	str	r7, [r1, #0]
 800a7de:	608b      	str	r3, [r1, #8]
 800a7e0:	2e00      	cmp	r6, #0
 800a7e2:	ddeb      	ble.n	800a7bc <__sflush_r+0xac>
 800a7e4:	4633      	mov	r3, r6
 800a7e6:	463a      	mov	r2, r7
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	6a21      	ldr	r1, [r4, #32]
 800a7ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a7f0:	47e0      	blx	ip
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	dc07      	bgt.n	800a806 <__sflush_r+0xf6>
 800a7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a802:	81a3      	strh	r3, [r4, #12]
 800a804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a806:	4407      	add	r7, r0
 800a808:	1a36      	subs	r6, r6, r0
 800a80a:	e7e9      	b.n	800a7e0 <__sflush_r+0xd0>
 800a80c:	20400001 	.word	0x20400001

0800a810 <_fflush_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	690b      	ldr	r3, [r1, #16]
 800a814:	4605      	mov	r5, r0
 800a816:	460c      	mov	r4, r1
 800a818:	b913      	cbnz	r3, 800a820 <_fflush_r+0x10>
 800a81a:	2500      	movs	r5, #0
 800a81c:	4628      	mov	r0, r5
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	b118      	cbz	r0, 800a82a <_fflush_r+0x1a>
 800a822:	6a03      	ldr	r3, [r0, #32]
 800a824:	b90b      	cbnz	r3, 800a82a <_fflush_r+0x1a>
 800a826:	f7fd ff7d 	bl	8008724 <__sinit>
 800a82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0f3      	beq.n	800a81a <_fflush_r+0xa>
 800a832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a834:	07d0      	lsls	r0, r2, #31
 800a836:	d404      	bmi.n	800a842 <_fflush_r+0x32>
 800a838:	0599      	lsls	r1, r3, #22
 800a83a:	d402      	bmi.n	800a842 <_fflush_r+0x32>
 800a83c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a83e:	f7fe f9b6 	bl	8008bae <__retarget_lock_acquire_recursive>
 800a842:	4628      	mov	r0, r5
 800a844:	4621      	mov	r1, r4
 800a846:	f7ff ff63 	bl	800a710 <__sflush_r>
 800a84a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a84c:	4605      	mov	r5, r0
 800a84e:	07da      	lsls	r2, r3, #31
 800a850:	d4e4      	bmi.n	800a81c <_fflush_r+0xc>
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	059b      	lsls	r3, r3, #22
 800a856:	d4e1      	bmi.n	800a81c <_fflush_r+0xc>
 800a858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a85a:	f7fe f9a9 	bl	8008bb0 <__retarget_lock_release_recursive>
 800a85e:	e7dd      	b.n	800a81c <_fflush_r+0xc>

0800a860 <fiprintf>:
 800a860:	b40e      	push	{r1, r2, r3}
 800a862:	b503      	push	{r0, r1, lr}
 800a864:	4601      	mov	r1, r0
 800a866:	ab03      	add	r3, sp, #12
 800a868:	4805      	ldr	r0, [pc, #20]	@ (800a880 <fiprintf+0x20>)
 800a86a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a86e:	6800      	ldr	r0, [r0, #0]
 800a870:	9301      	str	r3, [sp, #4]
 800a872:	f001 f97d 	bl	800bb70 <_vfiprintf_r>
 800a876:	b002      	add	sp, #8
 800a878:	f85d eb04 	ldr.w	lr, [sp], #4
 800a87c:	b003      	add	sp, #12
 800a87e:	4770      	bx	lr
 800a880:	2000001c 	.word	0x2000001c

0800a884 <__sccl>:
 800a884:	b570      	push	{r4, r5, r6, lr}
 800a886:	780b      	ldrb	r3, [r1, #0]
 800a888:	4604      	mov	r4, r0
 800a88a:	2b5e      	cmp	r3, #94	@ 0x5e
 800a88c:	bf0b      	itete	eq
 800a88e:	784b      	ldrbeq	r3, [r1, #1]
 800a890:	1c4a      	addne	r2, r1, #1
 800a892:	1c8a      	addeq	r2, r1, #2
 800a894:	2100      	movne	r1, #0
 800a896:	bf08      	it	eq
 800a898:	2101      	moveq	r1, #1
 800a89a:	3801      	subs	r0, #1
 800a89c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a8a0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a8a4:	42a8      	cmp	r0, r5
 800a8a6:	d1fb      	bne.n	800a8a0 <__sccl+0x1c>
 800a8a8:	b90b      	cbnz	r3, 800a8ae <__sccl+0x2a>
 800a8aa:	1e50      	subs	r0, r2, #1
 800a8ac:	bd70      	pop	{r4, r5, r6, pc}
 800a8ae:	f081 0101 	eor.w	r1, r1, #1
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	54e1      	strb	r1, [r4, r3]
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a8bc:	2d2d      	cmp	r5, #45	@ 0x2d
 800a8be:	d005      	beq.n	800a8cc <__sccl+0x48>
 800a8c0:	2d5d      	cmp	r5, #93	@ 0x5d
 800a8c2:	d016      	beq.n	800a8f2 <__sccl+0x6e>
 800a8c4:	2d00      	cmp	r5, #0
 800a8c6:	d0f1      	beq.n	800a8ac <__sccl+0x28>
 800a8c8:	462b      	mov	r3, r5
 800a8ca:	e7f2      	b.n	800a8b2 <__sccl+0x2e>
 800a8cc:	7846      	ldrb	r6, [r0, #1]
 800a8ce:	2e5d      	cmp	r6, #93	@ 0x5d
 800a8d0:	d0fa      	beq.n	800a8c8 <__sccl+0x44>
 800a8d2:	42b3      	cmp	r3, r6
 800a8d4:	dcf8      	bgt.n	800a8c8 <__sccl+0x44>
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	3002      	adds	r0, #2
 800a8da:	3201      	adds	r2, #1
 800a8dc:	4296      	cmp	r6, r2
 800a8de:	54a1      	strb	r1, [r4, r2]
 800a8e0:	dcfb      	bgt.n	800a8da <__sccl+0x56>
 800a8e2:	1af2      	subs	r2, r6, r3
 800a8e4:	3a01      	subs	r2, #1
 800a8e6:	42b3      	cmp	r3, r6
 800a8e8:	bfa8      	it	ge
 800a8ea:	2200      	movge	r2, #0
 800a8ec:	1c5d      	adds	r5, r3, #1
 800a8ee:	18ab      	adds	r3, r5, r2
 800a8f0:	e7e1      	b.n	800a8b6 <__sccl+0x32>
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	e7da      	b.n	800a8ac <__sccl+0x28>

0800a8f6 <__submore>:
 800a8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a8fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a902:	4299      	cmp	r1, r3
 800a904:	d11b      	bne.n	800a93e <__submore+0x48>
 800a906:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a90a:	f7fe f9f5 	bl	8008cf8 <_malloc_r>
 800a90e:	b918      	cbnz	r0, 800a918 <__submore+0x22>
 800a910:	f04f 30ff 	mov.w	r0, #4294967295
 800a914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a91c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a91e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a922:	6360      	str	r0, [r4, #52]	@ 0x34
 800a924:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a928:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a92c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a930:	7043      	strb	r3, [r0, #1]
 800a932:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a936:	7003      	strb	r3, [r0, #0]
 800a938:	6020      	str	r0, [r4, #0]
 800a93a:	2000      	movs	r0, #0
 800a93c:	e7ea      	b.n	800a914 <__submore+0x1e>
 800a93e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a940:	0077      	lsls	r7, r6, #1
 800a942:	463a      	mov	r2, r7
 800a944:	f001 f842 	bl	800b9cc <_realloc_r>
 800a948:	4605      	mov	r5, r0
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d0e0      	beq.n	800a910 <__submore+0x1a>
 800a94e:	eb00 0806 	add.w	r8, r0, r6
 800a952:	4601      	mov	r1, r0
 800a954:	4632      	mov	r2, r6
 800a956:	4640      	mov	r0, r8
 800a958:	f7fe f92b 	bl	8008bb2 <memcpy>
 800a95c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a960:	f8c4 8000 	str.w	r8, [r4]
 800a964:	e7e9      	b.n	800a93a <__submore+0x44>

0800a966 <memmove>:
 800a966:	4288      	cmp	r0, r1
 800a968:	b510      	push	{r4, lr}
 800a96a:	eb01 0402 	add.w	r4, r1, r2
 800a96e:	d902      	bls.n	800a976 <memmove+0x10>
 800a970:	4284      	cmp	r4, r0
 800a972:	4623      	mov	r3, r4
 800a974:	d807      	bhi.n	800a986 <memmove+0x20>
 800a976:	1e43      	subs	r3, r0, #1
 800a978:	42a1      	cmp	r1, r4
 800a97a:	d008      	beq.n	800a98e <memmove+0x28>
 800a97c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a980:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a984:	e7f8      	b.n	800a978 <memmove+0x12>
 800a986:	4601      	mov	r1, r0
 800a988:	4402      	add	r2, r0
 800a98a:	428a      	cmp	r2, r1
 800a98c:	d100      	bne.n	800a990 <memmove+0x2a>
 800a98e:	bd10      	pop	{r4, pc}
 800a990:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a994:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a998:	e7f7      	b.n	800a98a <memmove+0x24>
	...

0800a99c <_sbrk_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	2300      	movs	r3, #0
 800a9a0:	4d05      	ldr	r5, [pc, #20]	@ (800a9b8 <_sbrk_r+0x1c>)
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	602b      	str	r3, [r5, #0]
 800a9a8:	f7f7 fe62 	bl	8002670 <_sbrk>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_sbrk_r+0x1a>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_sbrk_r+0x1a>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	20002104 	.word	0x20002104

0800a9bc <memchr>:
 800a9bc:	4603      	mov	r3, r0
 800a9be:	b510      	push	{r4, lr}
 800a9c0:	b2c9      	uxtb	r1, r1
 800a9c2:	4402      	add	r2, r0
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	d101      	bne.n	800a9ce <memchr+0x12>
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	e003      	b.n	800a9d6 <memchr+0x1a>
 800a9ce:	7804      	ldrb	r4, [r0, #0]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	428c      	cmp	r4, r1
 800a9d4:	d1f6      	bne.n	800a9c4 <memchr+0x8>
 800a9d6:	bd10      	pop	{r4, pc}

0800a9d8 <nan>:
 800a9d8:	2000      	movs	r0, #0
 800a9da:	4901      	ldr	r1, [pc, #4]	@ (800a9e0 <nan+0x8>)
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	7ff80000 	.word	0x7ff80000

0800a9e4 <abort>:
 800a9e4:	2006      	movs	r0, #6
 800a9e6:	b508      	push	{r3, lr}
 800a9e8:	f001 fa96 	bl	800bf18 <raise>
 800a9ec:	2001      	movs	r0, #1
 800a9ee:	f7f7 fdca 	bl	8002586 <_exit>

0800a9f2 <rshift>:
 800a9f2:	6903      	ldr	r3, [r0, #16]
 800a9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9f8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9fc:	f100 0414 	add.w	r4, r0, #20
 800aa00:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa04:	dd46      	ble.n	800aa94 <rshift+0xa2>
 800aa06:	f011 011f 	ands.w	r1, r1, #31
 800aa0a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa0e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa12:	d10c      	bne.n	800aa2e <rshift+0x3c>
 800aa14:	4629      	mov	r1, r5
 800aa16:	f100 0710 	add.w	r7, r0, #16
 800aa1a:	42b1      	cmp	r1, r6
 800aa1c:	d335      	bcc.n	800aa8a <rshift+0x98>
 800aa1e:	1a9b      	subs	r3, r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	1eea      	subs	r2, r5, #3
 800aa24:	4296      	cmp	r6, r2
 800aa26:	bf38      	it	cc
 800aa28:	2300      	movcc	r3, #0
 800aa2a:	4423      	add	r3, r4
 800aa2c:	e015      	b.n	800aa5a <rshift+0x68>
 800aa2e:	46a1      	mov	r9, r4
 800aa30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa34:	f1c1 0820 	rsb	r8, r1, #32
 800aa38:	40cf      	lsrs	r7, r1
 800aa3a:	f105 0e04 	add.w	lr, r5, #4
 800aa3e:	4576      	cmp	r6, lr
 800aa40:	46f4      	mov	ip, lr
 800aa42:	d816      	bhi.n	800aa72 <rshift+0x80>
 800aa44:	1a9a      	subs	r2, r3, r2
 800aa46:	0092      	lsls	r2, r2, #2
 800aa48:	3a04      	subs	r2, #4
 800aa4a:	3501      	adds	r5, #1
 800aa4c:	42ae      	cmp	r6, r5
 800aa4e:	bf38      	it	cc
 800aa50:	2200      	movcc	r2, #0
 800aa52:	18a3      	adds	r3, r4, r2
 800aa54:	50a7      	str	r7, [r4, r2]
 800aa56:	b107      	cbz	r7, 800aa5a <rshift+0x68>
 800aa58:	3304      	adds	r3, #4
 800aa5a:	42a3      	cmp	r3, r4
 800aa5c:	eba3 0204 	sub.w	r2, r3, r4
 800aa60:	bf08      	it	eq
 800aa62:	2300      	moveq	r3, #0
 800aa64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa68:	6102      	str	r2, [r0, #16]
 800aa6a:	bf08      	it	eq
 800aa6c:	6143      	streq	r3, [r0, #20]
 800aa6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa72:	f8dc c000 	ldr.w	ip, [ip]
 800aa76:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa7a:	ea4c 0707 	orr.w	r7, ip, r7
 800aa7e:	f849 7b04 	str.w	r7, [r9], #4
 800aa82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa86:	40cf      	lsrs	r7, r1
 800aa88:	e7d9      	b.n	800aa3e <rshift+0x4c>
 800aa8a:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa8e:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa92:	e7c2      	b.n	800aa1a <rshift+0x28>
 800aa94:	4623      	mov	r3, r4
 800aa96:	e7e0      	b.n	800aa5a <rshift+0x68>

0800aa98 <__hexdig_fun>:
 800aa98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa9c:	2b09      	cmp	r3, #9
 800aa9e:	d802      	bhi.n	800aaa6 <__hexdig_fun+0xe>
 800aaa0:	3820      	subs	r0, #32
 800aaa2:	b2c0      	uxtb	r0, r0
 800aaa4:	4770      	bx	lr
 800aaa6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aaaa:	2b05      	cmp	r3, #5
 800aaac:	d801      	bhi.n	800aab2 <__hexdig_fun+0x1a>
 800aaae:	3847      	subs	r0, #71	@ 0x47
 800aab0:	e7f7      	b.n	800aaa2 <__hexdig_fun+0xa>
 800aab2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aab6:	2b05      	cmp	r3, #5
 800aab8:	d801      	bhi.n	800aabe <__hexdig_fun+0x26>
 800aaba:	3827      	subs	r0, #39	@ 0x27
 800aabc:	e7f1      	b.n	800aaa2 <__hexdig_fun+0xa>
 800aabe:	2000      	movs	r0, #0
 800aac0:	4770      	bx	lr
	...

0800aac4 <__gethex>:
 800aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	468a      	mov	sl, r1
 800aaca:	4690      	mov	r8, r2
 800aacc:	b085      	sub	sp, #20
 800aace:	9302      	str	r3, [sp, #8]
 800aad0:	680b      	ldr	r3, [r1, #0]
 800aad2:	9001      	str	r0, [sp, #4]
 800aad4:	1c9c      	adds	r4, r3, #2
 800aad6:	46a1      	mov	r9, r4
 800aad8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aadc:	2830      	cmp	r0, #48	@ 0x30
 800aade:	d0fa      	beq.n	800aad6 <__gethex+0x12>
 800aae0:	eba9 0303 	sub.w	r3, r9, r3
 800aae4:	f1a3 0b02 	sub.w	fp, r3, #2
 800aae8:	f7ff ffd6 	bl	800aa98 <__hexdig_fun>
 800aaec:	4605      	mov	r5, r0
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d168      	bne.n	800abc4 <__gethex+0x100>
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	4648      	mov	r0, r9
 800aaf6:	499f      	ldr	r1, [pc, #636]	@ (800ad74 <__gethex+0x2b0>)
 800aaf8:	f7fd fef2 	bl	80088e0 <strncmp>
 800aafc:	4607      	mov	r7, r0
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d167      	bne.n	800abd2 <__gethex+0x10e>
 800ab02:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ab06:	4626      	mov	r6, r4
 800ab08:	f7ff ffc6 	bl	800aa98 <__hexdig_fun>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d062      	beq.n	800abd6 <__gethex+0x112>
 800ab10:	4623      	mov	r3, r4
 800ab12:	7818      	ldrb	r0, [r3, #0]
 800ab14:	4699      	mov	r9, r3
 800ab16:	2830      	cmp	r0, #48	@ 0x30
 800ab18:	f103 0301 	add.w	r3, r3, #1
 800ab1c:	d0f9      	beq.n	800ab12 <__gethex+0x4e>
 800ab1e:	f7ff ffbb 	bl	800aa98 <__hexdig_fun>
 800ab22:	fab0 f580 	clz	r5, r0
 800ab26:	f04f 0b01 	mov.w	fp, #1
 800ab2a:	096d      	lsrs	r5, r5, #5
 800ab2c:	464a      	mov	r2, r9
 800ab2e:	4616      	mov	r6, r2
 800ab30:	7830      	ldrb	r0, [r6, #0]
 800ab32:	3201      	adds	r2, #1
 800ab34:	f7ff ffb0 	bl	800aa98 <__hexdig_fun>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d1f8      	bne.n	800ab2e <__gethex+0x6a>
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	4630      	mov	r0, r6
 800ab40:	498c      	ldr	r1, [pc, #560]	@ (800ad74 <__gethex+0x2b0>)
 800ab42:	f7fd fecd 	bl	80088e0 <strncmp>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d13f      	bne.n	800abca <__gethex+0x106>
 800ab4a:	b944      	cbnz	r4, 800ab5e <__gethex+0x9a>
 800ab4c:	1c74      	adds	r4, r6, #1
 800ab4e:	4622      	mov	r2, r4
 800ab50:	4616      	mov	r6, r2
 800ab52:	7830      	ldrb	r0, [r6, #0]
 800ab54:	3201      	adds	r2, #1
 800ab56:	f7ff ff9f 	bl	800aa98 <__hexdig_fun>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d1f8      	bne.n	800ab50 <__gethex+0x8c>
 800ab5e:	1ba4      	subs	r4, r4, r6
 800ab60:	00a7      	lsls	r7, r4, #2
 800ab62:	7833      	ldrb	r3, [r6, #0]
 800ab64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab68:	2b50      	cmp	r3, #80	@ 0x50
 800ab6a:	d13e      	bne.n	800abea <__gethex+0x126>
 800ab6c:	7873      	ldrb	r3, [r6, #1]
 800ab6e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab70:	d033      	beq.n	800abda <__gethex+0x116>
 800ab72:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab74:	d034      	beq.n	800abe0 <__gethex+0x11c>
 800ab76:	2400      	movs	r4, #0
 800ab78:	1c71      	adds	r1, r6, #1
 800ab7a:	7808      	ldrb	r0, [r1, #0]
 800ab7c:	f7ff ff8c 	bl	800aa98 <__hexdig_fun>
 800ab80:	1e43      	subs	r3, r0, #1
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b18      	cmp	r3, #24
 800ab86:	d830      	bhi.n	800abea <__gethex+0x126>
 800ab88:	f1a0 0210 	sub.w	r2, r0, #16
 800ab8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab90:	f7ff ff82 	bl	800aa98 <__hexdig_fun>
 800ab94:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab98:	fa5f fc8c 	uxtb.w	ip, ip
 800ab9c:	f1bc 0f18 	cmp.w	ip, #24
 800aba0:	f04f 030a 	mov.w	r3, #10
 800aba4:	d91e      	bls.n	800abe4 <__gethex+0x120>
 800aba6:	b104      	cbz	r4, 800abaa <__gethex+0xe6>
 800aba8:	4252      	negs	r2, r2
 800abaa:	4417      	add	r7, r2
 800abac:	f8ca 1000 	str.w	r1, [sl]
 800abb0:	b1ed      	cbz	r5, 800abee <__gethex+0x12a>
 800abb2:	f1bb 0f00 	cmp.w	fp, #0
 800abb6:	bf0c      	ite	eq
 800abb8:	2506      	moveq	r5, #6
 800abba:	2500      	movne	r5, #0
 800abbc:	4628      	mov	r0, r5
 800abbe:	b005      	add	sp, #20
 800abc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc4:	2500      	movs	r5, #0
 800abc6:	462c      	mov	r4, r5
 800abc8:	e7b0      	b.n	800ab2c <__gethex+0x68>
 800abca:	2c00      	cmp	r4, #0
 800abcc:	d1c7      	bne.n	800ab5e <__gethex+0x9a>
 800abce:	4627      	mov	r7, r4
 800abd0:	e7c7      	b.n	800ab62 <__gethex+0x9e>
 800abd2:	464e      	mov	r6, r9
 800abd4:	462f      	mov	r7, r5
 800abd6:	2501      	movs	r5, #1
 800abd8:	e7c3      	b.n	800ab62 <__gethex+0x9e>
 800abda:	2400      	movs	r4, #0
 800abdc:	1cb1      	adds	r1, r6, #2
 800abde:	e7cc      	b.n	800ab7a <__gethex+0xb6>
 800abe0:	2401      	movs	r4, #1
 800abe2:	e7fb      	b.n	800abdc <__gethex+0x118>
 800abe4:	fb03 0002 	mla	r0, r3, r2, r0
 800abe8:	e7ce      	b.n	800ab88 <__gethex+0xc4>
 800abea:	4631      	mov	r1, r6
 800abec:	e7de      	b.n	800abac <__gethex+0xe8>
 800abee:	4629      	mov	r1, r5
 800abf0:	eba6 0309 	sub.w	r3, r6, r9
 800abf4:	3b01      	subs	r3, #1
 800abf6:	2b07      	cmp	r3, #7
 800abf8:	dc0a      	bgt.n	800ac10 <__gethex+0x14c>
 800abfa:	9801      	ldr	r0, [sp, #4]
 800abfc:	f000 fa46 	bl	800b08c <_Balloc>
 800ac00:	4604      	mov	r4, r0
 800ac02:	b940      	cbnz	r0, 800ac16 <__gethex+0x152>
 800ac04:	4602      	mov	r2, r0
 800ac06:	21e4      	movs	r1, #228	@ 0xe4
 800ac08:	4b5b      	ldr	r3, [pc, #364]	@ (800ad78 <__gethex+0x2b4>)
 800ac0a:	485c      	ldr	r0, [pc, #368]	@ (800ad7c <__gethex+0x2b8>)
 800ac0c:	f7fd ffe4 	bl	8008bd8 <__assert_func>
 800ac10:	3101      	adds	r1, #1
 800ac12:	105b      	asrs	r3, r3, #1
 800ac14:	e7ef      	b.n	800abf6 <__gethex+0x132>
 800ac16:	2300      	movs	r3, #0
 800ac18:	f100 0a14 	add.w	sl, r0, #20
 800ac1c:	4655      	mov	r5, sl
 800ac1e:	469b      	mov	fp, r3
 800ac20:	45b1      	cmp	r9, r6
 800ac22:	d337      	bcc.n	800ac94 <__gethex+0x1d0>
 800ac24:	f845 bb04 	str.w	fp, [r5], #4
 800ac28:	eba5 050a 	sub.w	r5, r5, sl
 800ac2c:	10ad      	asrs	r5, r5, #2
 800ac2e:	6125      	str	r5, [r4, #16]
 800ac30:	4658      	mov	r0, fp
 800ac32:	f000 fb1d 	bl	800b270 <__hi0bits>
 800ac36:	016d      	lsls	r5, r5, #5
 800ac38:	f8d8 6000 	ldr.w	r6, [r8]
 800ac3c:	1a2d      	subs	r5, r5, r0
 800ac3e:	42b5      	cmp	r5, r6
 800ac40:	dd54      	ble.n	800acec <__gethex+0x228>
 800ac42:	1bad      	subs	r5, r5, r6
 800ac44:	4629      	mov	r1, r5
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 fe9f 	bl	800b98a <__any_on>
 800ac4c:	4681      	mov	r9, r0
 800ac4e:	b178      	cbz	r0, 800ac70 <__gethex+0x1ac>
 800ac50:	f04f 0901 	mov.w	r9, #1
 800ac54:	1e6b      	subs	r3, r5, #1
 800ac56:	1159      	asrs	r1, r3, #5
 800ac58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac5c:	f003 021f 	and.w	r2, r3, #31
 800ac60:	fa09 f202 	lsl.w	r2, r9, r2
 800ac64:	420a      	tst	r2, r1
 800ac66:	d003      	beq.n	800ac70 <__gethex+0x1ac>
 800ac68:	454b      	cmp	r3, r9
 800ac6a:	dc36      	bgt.n	800acda <__gethex+0x216>
 800ac6c:	f04f 0902 	mov.w	r9, #2
 800ac70:	4629      	mov	r1, r5
 800ac72:	4620      	mov	r0, r4
 800ac74:	f7ff febd 	bl	800a9f2 <rshift>
 800ac78:	442f      	add	r7, r5
 800ac7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac7e:	42bb      	cmp	r3, r7
 800ac80:	da42      	bge.n	800ad08 <__gethex+0x244>
 800ac82:	4621      	mov	r1, r4
 800ac84:	9801      	ldr	r0, [sp, #4]
 800ac86:	f000 fa41 	bl	800b10c <_Bfree>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac8e:	25a3      	movs	r5, #163	@ 0xa3
 800ac90:	6013      	str	r3, [r2, #0]
 800ac92:	e793      	b.n	800abbc <__gethex+0xf8>
 800ac94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac98:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac9a:	d012      	beq.n	800acc2 <__gethex+0x1fe>
 800ac9c:	2b20      	cmp	r3, #32
 800ac9e:	d104      	bne.n	800acaa <__gethex+0x1e6>
 800aca0:	f845 bb04 	str.w	fp, [r5], #4
 800aca4:	f04f 0b00 	mov.w	fp, #0
 800aca8:	465b      	mov	r3, fp
 800acaa:	7830      	ldrb	r0, [r6, #0]
 800acac:	9303      	str	r3, [sp, #12]
 800acae:	f7ff fef3 	bl	800aa98 <__hexdig_fun>
 800acb2:	9b03      	ldr	r3, [sp, #12]
 800acb4:	f000 000f 	and.w	r0, r0, #15
 800acb8:	4098      	lsls	r0, r3
 800acba:	ea4b 0b00 	orr.w	fp, fp, r0
 800acbe:	3304      	adds	r3, #4
 800acc0:	e7ae      	b.n	800ac20 <__gethex+0x15c>
 800acc2:	45b1      	cmp	r9, r6
 800acc4:	d8ea      	bhi.n	800ac9c <__gethex+0x1d8>
 800acc6:	2201      	movs	r2, #1
 800acc8:	4630      	mov	r0, r6
 800acca:	492a      	ldr	r1, [pc, #168]	@ (800ad74 <__gethex+0x2b0>)
 800accc:	9303      	str	r3, [sp, #12]
 800acce:	f7fd fe07 	bl	80088e0 <strncmp>
 800acd2:	9b03      	ldr	r3, [sp, #12]
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d1e1      	bne.n	800ac9c <__gethex+0x1d8>
 800acd8:	e7a2      	b.n	800ac20 <__gethex+0x15c>
 800acda:	4620      	mov	r0, r4
 800acdc:	1ea9      	subs	r1, r5, #2
 800acde:	f000 fe54 	bl	800b98a <__any_on>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d0c2      	beq.n	800ac6c <__gethex+0x1a8>
 800ace6:	f04f 0903 	mov.w	r9, #3
 800acea:	e7c1      	b.n	800ac70 <__gethex+0x1ac>
 800acec:	da09      	bge.n	800ad02 <__gethex+0x23e>
 800acee:	1b75      	subs	r5, r6, r5
 800acf0:	4621      	mov	r1, r4
 800acf2:	462a      	mov	r2, r5
 800acf4:	9801      	ldr	r0, [sp, #4]
 800acf6:	f000 fc19 	bl	800b52c <__lshift>
 800acfa:	4604      	mov	r4, r0
 800acfc:	1b7f      	subs	r7, r7, r5
 800acfe:	f100 0a14 	add.w	sl, r0, #20
 800ad02:	f04f 0900 	mov.w	r9, #0
 800ad06:	e7b8      	b.n	800ac7a <__gethex+0x1b6>
 800ad08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad0c:	42bd      	cmp	r5, r7
 800ad0e:	dd6f      	ble.n	800adf0 <__gethex+0x32c>
 800ad10:	1bed      	subs	r5, r5, r7
 800ad12:	42ae      	cmp	r6, r5
 800ad14:	dc34      	bgt.n	800ad80 <__gethex+0x2bc>
 800ad16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d022      	beq.n	800ad64 <__gethex+0x2a0>
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	d024      	beq.n	800ad6c <__gethex+0x2a8>
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d115      	bne.n	800ad52 <__gethex+0x28e>
 800ad26:	42ae      	cmp	r6, r5
 800ad28:	d113      	bne.n	800ad52 <__gethex+0x28e>
 800ad2a:	2e01      	cmp	r6, #1
 800ad2c:	d10b      	bne.n	800ad46 <__gethex+0x282>
 800ad2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad32:	9a02      	ldr	r2, [sp, #8]
 800ad34:	2562      	movs	r5, #98	@ 0x62
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	2301      	movs	r3, #1
 800ad3a:	6123      	str	r3, [r4, #16]
 800ad3c:	f8ca 3000 	str.w	r3, [sl]
 800ad40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad42:	601c      	str	r4, [r3, #0]
 800ad44:	e73a      	b.n	800abbc <__gethex+0xf8>
 800ad46:	4620      	mov	r0, r4
 800ad48:	1e71      	subs	r1, r6, #1
 800ad4a:	f000 fe1e 	bl	800b98a <__any_on>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d1ed      	bne.n	800ad2e <__gethex+0x26a>
 800ad52:	4621      	mov	r1, r4
 800ad54:	9801      	ldr	r0, [sp, #4]
 800ad56:	f000 f9d9 	bl	800b10c <_Bfree>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad5e:	2550      	movs	r5, #80	@ 0x50
 800ad60:	6013      	str	r3, [r2, #0]
 800ad62:	e72b      	b.n	800abbc <__gethex+0xf8>
 800ad64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1f3      	bne.n	800ad52 <__gethex+0x28e>
 800ad6a:	e7e0      	b.n	800ad2e <__gethex+0x26a>
 800ad6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1dd      	bne.n	800ad2e <__gethex+0x26a>
 800ad72:	e7ee      	b.n	800ad52 <__gethex+0x28e>
 800ad74:	0800cbf8 	.word	0x0800cbf8
 800ad78:	0800cc5c 	.word	0x0800cc5c
 800ad7c:	0800cc6d 	.word	0x0800cc6d
 800ad80:	1e6f      	subs	r7, r5, #1
 800ad82:	f1b9 0f00 	cmp.w	r9, #0
 800ad86:	d130      	bne.n	800adea <__gethex+0x326>
 800ad88:	b127      	cbz	r7, 800ad94 <__gethex+0x2d0>
 800ad8a:	4639      	mov	r1, r7
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f000 fdfc 	bl	800b98a <__any_on>
 800ad92:	4681      	mov	r9, r0
 800ad94:	2301      	movs	r3, #1
 800ad96:	4629      	mov	r1, r5
 800ad98:	1b76      	subs	r6, r6, r5
 800ad9a:	2502      	movs	r5, #2
 800ad9c:	117a      	asrs	r2, r7, #5
 800ad9e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ada2:	f007 071f 	and.w	r7, r7, #31
 800ada6:	40bb      	lsls	r3, r7
 800ada8:	4213      	tst	r3, r2
 800adaa:	4620      	mov	r0, r4
 800adac:	bf18      	it	ne
 800adae:	f049 0902 	orrne.w	r9, r9, #2
 800adb2:	f7ff fe1e 	bl	800a9f2 <rshift>
 800adb6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800adba:	f1b9 0f00 	cmp.w	r9, #0
 800adbe:	d047      	beq.n	800ae50 <__gethex+0x38c>
 800adc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d015      	beq.n	800adf4 <__gethex+0x330>
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d017      	beq.n	800adfc <__gethex+0x338>
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d109      	bne.n	800ade4 <__gethex+0x320>
 800add0:	f019 0f02 	tst.w	r9, #2
 800add4:	d006      	beq.n	800ade4 <__gethex+0x320>
 800add6:	f8da 3000 	ldr.w	r3, [sl]
 800adda:	ea49 0903 	orr.w	r9, r9, r3
 800adde:	f019 0f01 	tst.w	r9, #1
 800ade2:	d10e      	bne.n	800ae02 <__gethex+0x33e>
 800ade4:	f045 0510 	orr.w	r5, r5, #16
 800ade8:	e032      	b.n	800ae50 <__gethex+0x38c>
 800adea:	f04f 0901 	mov.w	r9, #1
 800adee:	e7d1      	b.n	800ad94 <__gethex+0x2d0>
 800adf0:	2501      	movs	r5, #1
 800adf2:	e7e2      	b.n	800adba <__gethex+0x2f6>
 800adf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adf6:	f1c3 0301 	rsb	r3, r3, #1
 800adfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0f0      	beq.n	800ade4 <__gethex+0x320>
 800ae02:	f04f 0c00 	mov.w	ip, #0
 800ae06:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae0a:	f104 0314 	add.w	r3, r4, #20
 800ae0e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ae12:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ae20:	d01b      	beq.n	800ae5a <__gethex+0x396>
 800ae22:	3201      	adds	r2, #1
 800ae24:	6002      	str	r2, [r0, #0]
 800ae26:	2d02      	cmp	r5, #2
 800ae28:	f104 0314 	add.w	r3, r4, #20
 800ae2c:	d13c      	bne.n	800aea8 <__gethex+0x3e4>
 800ae2e:	f8d8 2000 	ldr.w	r2, [r8]
 800ae32:	3a01      	subs	r2, #1
 800ae34:	42b2      	cmp	r2, r6
 800ae36:	d109      	bne.n	800ae4c <__gethex+0x388>
 800ae38:	2201      	movs	r2, #1
 800ae3a:	1171      	asrs	r1, r6, #5
 800ae3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae40:	f006 061f 	and.w	r6, r6, #31
 800ae44:	fa02 f606 	lsl.w	r6, r2, r6
 800ae48:	421e      	tst	r6, r3
 800ae4a:	d13a      	bne.n	800aec2 <__gethex+0x3fe>
 800ae4c:	f045 0520 	orr.w	r5, r5, #32
 800ae50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae52:	601c      	str	r4, [r3, #0]
 800ae54:	9b02      	ldr	r3, [sp, #8]
 800ae56:	601f      	str	r7, [r3, #0]
 800ae58:	e6b0      	b.n	800abbc <__gethex+0xf8>
 800ae5a:	4299      	cmp	r1, r3
 800ae5c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae60:	d8d9      	bhi.n	800ae16 <__gethex+0x352>
 800ae62:	68a3      	ldr	r3, [r4, #8]
 800ae64:	459b      	cmp	fp, r3
 800ae66:	db17      	blt.n	800ae98 <__gethex+0x3d4>
 800ae68:	6861      	ldr	r1, [r4, #4]
 800ae6a:	9801      	ldr	r0, [sp, #4]
 800ae6c:	3101      	adds	r1, #1
 800ae6e:	f000 f90d 	bl	800b08c <_Balloc>
 800ae72:	4681      	mov	r9, r0
 800ae74:	b918      	cbnz	r0, 800ae7e <__gethex+0x3ba>
 800ae76:	4602      	mov	r2, r0
 800ae78:	2184      	movs	r1, #132	@ 0x84
 800ae7a:	4b19      	ldr	r3, [pc, #100]	@ (800aee0 <__gethex+0x41c>)
 800ae7c:	e6c5      	b.n	800ac0a <__gethex+0x146>
 800ae7e:	6922      	ldr	r2, [r4, #16]
 800ae80:	f104 010c 	add.w	r1, r4, #12
 800ae84:	3202      	adds	r2, #2
 800ae86:	0092      	lsls	r2, r2, #2
 800ae88:	300c      	adds	r0, #12
 800ae8a:	f7fd fe92 	bl	8008bb2 <memcpy>
 800ae8e:	4621      	mov	r1, r4
 800ae90:	9801      	ldr	r0, [sp, #4]
 800ae92:	f000 f93b 	bl	800b10c <_Bfree>
 800ae96:	464c      	mov	r4, r9
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	6122      	str	r2, [r4, #16]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aea4:	615a      	str	r2, [r3, #20]
 800aea6:	e7be      	b.n	800ae26 <__gethex+0x362>
 800aea8:	6922      	ldr	r2, [r4, #16]
 800aeaa:	455a      	cmp	r2, fp
 800aeac:	dd0b      	ble.n	800aec6 <__gethex+0x402>
 800aeae:	2101      	movs	r1, #1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f7ff fd9e 	bl	800a9f2 <rshift>
 800aeb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aeba:	3701      	adds	r7, #1
 800aebc:	42bb      	cmp	r3, r7
 800aebe:	f6ff aee0 	blt.w	800ac82 <__gethex+0x1be>
 800aec2:	2501      	movs	r5, #1
 800aec4:	e7c2      	b.n	800ae4c <__gethex+0x388>
 800aec6:	f016 061f 	ands.w	r6, r6, #31
 800aeca:	d0fa      	beq.n	800aec2 <__gethex+0x3fe>
 800aecc:	4453      	add	r3, sl
 800aece:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aed2:	f000 f9cd 	bl	800b270 <__hi0bits>
 800aed6:	f1c6 0620 	rsb	r6, r6, #32
 800aeda:	42b0      	cmp	r0, r6
 800aedc:	dbe7      	blt.n	800aeae <__gethex+0x3ea>
 800aede:	e7f0      	b.n	800aec2 <__gethex+0x3fe>
 800aee0:	0800cc5c 	.word	0x0800cc5c

0800aee4 <L_shift>:
 800aee4:	f1c2 0208 	rsb	r2, r2, #8
 800aee8:	0092      	lsls	r2, r2, #2
 800aeea:	b570      	push	{r4, r5, r6, lr}
 800aeec:	f1c2 0620 	rsb	r6, r2, #32
 800aef0:	6843      	ldr	r3, [r0, #4]
 800aef2:	6804      	ldr	r4, [r0, #0]
 800aef4:	fa03 f506 	lsl.w	r5, r3, r6
 800aef8:	432c      	orrs	r4, r5
 800aefa:	40d3      	lsrs	r3, r2
 800aefc:	6004      	str	r4, [r0, #0]
 800aefe:	f840 3f04 	str.w	r3, [r0, #4]!
 800af02:	4288      	cmp	r0, r1
 800af04:	d3f4      	bcc.n	800aef0 <L_shift+0xc>
 800af06:	bd70      	pop	{r4, r5, r6, pc}

0800af08 <__match>:
 800af08:	b530      	push	{r4, r5, lr}
 800af0a:	6803      	ldr	r3, [r0, #0]
 800af0c:	3301      	adds	r3, #1
 800af0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af12:	b914      	cbnz	r4, 800af1a <__match+0x12>
 800af14:	6003      	str	r3, [r0, #0]
 800af16:	2001      	movs	r0, #1
 800af18:	bd30      	pop	{r4, r5, pc}
 800af1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af1e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800af22:	2d19      	cmp	r5, #25
 800af24:	bf98      	it	ls
 800af26:	3220      	addls	r2, #32
 800af28:	42a2      	cmp	r2, r4
 800af2a:	d0f0      	beq.n	800af0e <__match+0x6>
 800af2c:	2000      	movs	r0, #0
 800af2e:	e7f3      	b.n	800af18 <__match+0x10>

0800af30 <__hexnan>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	2500      	movs	r5, #0
 800af36:	680b      	ldr	r3, [r1, #0]
 800af38:	4682      	mov	sl, r0
 800af3a:	115e      	asrs	r6, r3, #5
 800af3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af40:	f013 031f 	ands.w	r3, r3, #31
 800af44:	bf18      	it	ne
 800af46:	3604      	addne	r6, #4
 800af48:	1f37      	subs	r7, r6, #4
 800af4a:	4690      	mov	r8, r2
 800af4c:	46b9      	mov	r9, r7
 800af4e:	463c      	mov	r4, r7
 800af50:	46ab      	mov	fp, r5
 800af52:	b087      	sub	sp, #28
 800af54:	6801      	ldr	r1, [r0, #0]
 800af56:	9301      	str	r3, [sp, #4]
 800af58:	f846 5c04 	str.w	r5, [r6, #-4]
 800af5c:	9502      	str	r5, [sp, #8]
 800af5e:	784a      	ldrb	r2, [r1, #1]
 800af60:	1c4b      	adds	r3, r1, #1
 800af62:	9303      	str	r3, [sp, #12]
 800af64:	b342      	cbz	r2, 800afb8 <__hexnan+0x88>
 800af66:	4610      	mov	r0, r2
 800af68:	9105      	str	r1, [sp, #20]
 800af6a:	9204      	str	r2, [sp, #16]
 800af6c:	f7ff fd94 	bl	800aa98 <__hexdig_fun>
 800af70:	2800      	cmp	r0, #0
 800af72:	d151      	bne.n	800b018 <__hexnan+0xe8>
 800af74:	9a04      	ldr	r2, [sp, #16]
 800af76:	9905      	ldr	r1, [sp, #20]
 800af78:	2a20      	cmp	r2, #32
 800af7a:	d818      	bhi.n	800afae <__hexnan+0x7e>
 800af7c:	9b02      	ldr	r3, [sp, #8]
 800af7e:	459b      	cmp	fp, r3
 800af80:	dd13      	ble.n	800afaa <__hexnan+0x7a>
 800af82:	454c      	cmp	r4, r9
 800af84:	d206      	bcs.n	800af94 <__hexnan+0x64>
 800af86:	2d07      	cmp	r5, #7
 800af88:	dc04      	bgt.n	800af94 <__hexnan+0x64>
 800af8a:	462a      	mov	r2, r5
 800af8c:	4649      	mov	r1, r9
 800af8e:	4620      	mov	r0, r4
 800af90:	f7ff ffa8 	bl	800aee4 <L_shift>
 800af94:	4544      	cmp	r4, r8
 800af96:	d952      	bls.n	800b03e <__hexnan+0x10e>
 800af98:	2300      	movs	r3, #0
 800af9a:	f1a4 0904 	sub.w	r9, r4, #4
 800af9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800afa2:	461d      	mov	r5, r3
 800afa4:	464c      	mov	r4, r9
 800afa6:	f8cd b008 	str.w	fp, [sp, #8]
 800afaa:	9903      	ldr	r1, [sp, #12]
 800afac:	e7d7      	b.n	800af5e <__hexnan+0x2e>
 800afae:	2a29      	cmp	r2, #41	@ 0x29
 800afb0:	d157      	bne.n	800b062 <__hexnan+0x132>
 800afb2:	3102      	adds	r1, #2
 800afb4:	f8ca 1000 	str.w	r1, [sl]
 800afb8:	f1bb 0f00 	cmp.w	fp, #0
 800afbc:	d051      	beq.n	800b062 <__hexnan+0x132>
 800afbe:	454c      	cmp	r4, r9
 800afc0:	d206      	bcs.n	800afd0 <__hexnan+0xa0>
 800afc2:	2d07      	cmp	r5, #7
 800afc4:	dc04      	bgt.n	800afd0 <__hexnan+0xa0>
 800afc6:	462a      	mov	r2, r5
 800afc8:	4649      	mov	r1, r9
 800afca:	4620      	mov	r0, r4
 800afcc:	f7ff ff8a 	bl	800aee4 <L_shift>
 800afd0:	4544      	cmp	r4, r8
 800afd2:	d936      	bls.n	800b042 <__hexnan+0x112>
 800afd4:	4623      	mov	r3, r4
 800afd6:	f1a8 0204 	sub.w	r2, r8, #4
 800afda:	f853 1b04 	ldr.w	r1, [r3], #4
 800afde:	429f      	cmp	r7, r3
 800afe0:	f842 1f04 	str.w	r1, [r2, #4]!
 800afe4:	d2f9      	bcs.n	800afda <__hexnan+0xaa>
 800afe6:	1b3b      	subs	r3, r7, r4
 800afe8:	f023 0303 	bic.w	r3, r3, #3
 800afec:	3304      	adds	r3, #4
 800afee:	3401      	adds	r4, #1
 800aff0:	3e03      	subs	r6, #3
 800aff2:	42b4      	cmp	r4, r6
 800aff4:	bf88      	it	hi
 800aff6:	2304      	movhi	r3, #4
 800aff8:	2200      	movs	r2, #0
 800affa:	4443      	add	r3, r8
 800affc:	f843 2b04 	str.w	r2, [r3], #4
 800b000:	429f      	cmp	r7, r3
 800b002:	d2fb      	bcs.n	800affc <__hexnan+0xcc>
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	b91b      	cbnz	r3, 800b010 <__hexnan+0xe0>
 800b008:	4547      	cmp	r7, r8
 800b00a:	d128      	bne.n	800b05e <__hexnan+0x12e>
 800b00c:	2301      	movs	r3, #1
 800b00e:	603b      	str	r3, [r7, #0]
 800b010:	2005      	movs	r0, #5
 800b012:	b007      	add	sp, #28
 800b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b018:	3501      	adds	r5, #1
 800b01a:	2d08      	cmp	r5, #8
 800b01c:	f10b 0b01 	add.w	fp, fp, #1
 800b020:	dd06      	ble.n	800b030 <__hexnan+0x100>
 800b022:	4544      	cmp	r4, r8
 800b024:	d9c1      	bls.n	800afaa <__hexnan+0x7a>
 800b026:	2300      	movs	r3, #0
 800b028:	2501      	movs	r5, #1
 800b02a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b02e:	3c04      	subs	r4, #4
 800b030:	6822      	ldr	r2, [r4, #0]
 800b032:	f000 000f 	and.w	r0, r0, #15
 800b036:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b03a:	6020      	str	r0, [r4, #0]
 800b03c:	e7b5      	b.n	800afaa <__hexnan+0x7a>
 800b03e:	2508      	movs	r5, #8
 800b040:	e7b3      	b.n	800afaa <__hexnan+0x7a>
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d0dd      	beq.n	800b004 <__hexnan+0xd4>
 800b048:	f04f 32ff 	mov.w	r2, #4294967295
 800b04c:	f1c3 0320 	rsb	r3, r3, #32
 800b050:	40da      	lsrs	r2, r3
 800b052:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b056:	4013      	ands	r3, r2
 800b058:	f846 3c04 	str.w	r3, [r6, #-4]
 800b05c:	e7d2      	b.n	800b004 <__hexnan+0xd4>
 800b05e:	3f04      	subs	r7, #4
 800b060:	e7d0      	b.n	800b004 <__hexnan+0xd4>
 800b062:	2004      	movs	r0, #4
 800b064:	e7d5      	b.n	800b012 <__hexnan+0xe2>

0800b066 <__ascii_mbtowc>:
 800b066:	b082      	sub	sp, #8
 800b068:	b901      	cbnz	r1, 800b06c <__ascii_mbtowc+0x6>
 800b06a:	a901      	add	r1, sp, #4
 800b06c:	b142      	cbz	r2, 800b080 <__ascii_mbtowc+0x1a>
 800b06e:	b14b      	cbz	r3, 800b084 <__ascii_mbtowc+0x1e>
 800b070:	7813      	ldrb	r3, [r2, #0]
 800b072:	600b      	str	r3, [r1, #0]
 800b074:	7812      	ldrb	r2, [r2, #0]
 800b076:	1e10      	subs	r0, r2, #0
 800b078:	bf18      	it	ne
 800b07a:	2001      	movne	r0, #1
 800b07c:	b002      	add	sp, #8
 800b07e:	4770      	bx	lr
 800b080:	4610      	mov	r0, r2
 800b082:	e7fb      	b.n	800b07c <__ascii_mbtowc+0x16>
 800b084:	f06f 0001 	mvn.w	r0, #1
 800b088:	e7f8      	b.n	800b07c <__ascii_mbtowc+0x16>
	...

0800b08c <_Balloc>:
 800b08c:	b570      	push	{r4, r5, r6, lr}
 800b08e:	69c6      	ldr	r6, [r0, #28]
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	b976      	cbnz	r6, 800b0b4 <_Balloc+0x28>
 800b096:	2010      	movs	r0, #16
 800b098:	f7fd fe04 	bl	8008ca4 <malloc>
 800b09c:	4602      	mov	r2, r0
 800b09e:	61e0      	str	r0, [r4, #28]
 800b0a0:	b920      	cbnz	r0, 800b0ac <_Balloc+0x20>
 800b0a2:	216b      	movs	r1, #107	@ 0x6b
 800b0a4:	4b17      	ldr	r3, [pc, #92]	@ (800b104 <_Balloc+0x78>)
 800b0a6:	4818      	ldr	r0, [pc, #96]	@ (800b108 <_Balloc+0x7c>)
 800b0a8:	f7fd fd96 	bl	8008bd8 <__assert_func>
 800b0ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0b0:	6006      	str	r6, [r0, #0]
 800b0b2:	60c6      	str	r6, [r0, #12]
 800b0b4:	69e6      	ldr	r6, [r4, #28]
 800b0b6:	68f3      	ldr	r3, [r6, #12]
 800b0b8:	b183      	cbz	r3, 800b0dc <_Balloc+0x50>
 800b0ba:	69e3      	ldr	r3, [r4, #28]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0c2:	b9b8      	cbnz	r0, 800b0f4 <_Balloc+0x68>
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	fa01 f605 	lsl.w	r6, r1, r5
 800b0ca:	1d72      	adds	r2, r6, #5
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	0092      	lsls	r2, r2, #2
 800b0d0:	f000 ff3e 	bl	800bf50 <_calloc_r>
 800b0d4:	b160      	cbz	r0, 800b0f0 <_Balloc+0x64>
 800b0d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0da:	e00e      	b.n	800b0fa <_Balloc+0x6e>
 800b0dc:	2221      	movs	r2, #33	@ 0x21
 800b0de:	2104      	movs	r1, #4
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 ff35 	bl	800bf50 <_calloc_r>
 800b0e6:	69e3      	ldr	r3, [r4, #28]
 800b0e8:	60f0      	str	r0, [r6, #12]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1e4      	bne.n	800b0ba <_Balloc+0x2e>
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	6802      	ldr	r2, [r0, #0]
 800b0f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b100:	e7f7      	b.n	800b0f2 <_Balloc+0x66>
 800b102:	bf00      	nop
 800b104:	0800cb4b 	.word	0x0800cb4b
 800b108:	0800cccd 	.word	0x0800cccd

0800b10c <_Bfree>:
 800b10c:	b570      	push	{r4, r5, r6, lr}
 800b10e:	69c6      	ldr	r6, [r0, #28]
 800b110:	4605      	mov	r5, r0
 800b112:	460c      	mov	r4, r1
 800b114:	b976      	cbnz	r6, 800b134 <_Bfree+0x28>
 800b116:	2010      	movs	r0, #16
 800b118:	f7fd fdc4 	bl	8008ca4 <malloc>
 800b11c:	4602      	mov	r2, r0
 800b11e:	61e8      	str	r0, [r5, #28]
 800b120:	b920      	cbnz	r0, 800b12c <_Bfree+0x20>
 800b122:	218f      	movs	r1, #143	@ 0x8f
 800b124:	4b08      	ldr	r3, [pc, #32]	@ (800b148 <_Bfree+0x3c>)
 800b126:	4809      	ldr	r0, [pc, #36]	@ (800b14c <_Bfree+0x40>)
 800b128:	f7fd fd56 	bl	8008bd8 <__assert_func>
 800b12c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b130:	6006      	str	r6, [r0, #0]
 800b132:	60c6      	str	r6, [r0, #12]
 800b134:	b13c      	cbz	r4, 800b146 <_Bfree+0x3a>
 800b136:	69eb      	ldr	r3, [r5, #28]
 800b138:	6862      	ldr	r2, [r4, #4]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b140:	6021      	str	r1, [r4, #0]
 800b142:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b146:	bd70      	pop	{r4, r5, r6, pc}
 800b148:	0800cb4b 	.word	0x0800cb4b
 800b14c:	0800cccd 	.word	0x0800cccd

0800b150 <__multadd>:
 800b150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b154:	4607      	mov	r7, r0
 800b156:	460c      	mov	r4, r1
 800b158:	461e      	mov	r6, r3
 800b15a:	2000      	movs	r0, #0
 800b15c:	690d      	ldr	r5, [r1, #16]
 800b15e:	f101 0c14 	add.w	ip, r1, #20
 800b162:	f8dc 3000 	ldr.w	r3, [ip]
 800b166:	3001      	adds	r0, #1
 800b168:	b299      	uxth	r1, r3
 800b16a:	fb02 6101 	mla	r1, r2, r1, r6
 800b16e:	0c1e      	lsrs	r6, r3, #16
 800b170:	0c0b      	lsrs	r3, r1, #16
 800b172:	fb02 3306 	mla	r3, r2, r6, r3
 800b176:	b289      	uxth	r1, r1
 800b178:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b17c:	4285      	cmp	r5, r0
 800b17e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b182:	f84c 1b04 	str.w	r1, [ip], #4
 800b186:	dcec      	bgt.n	800b162 <__multadd+0x12>
 800b188:	b30e      	cbz	r6, 800b1ce <__multadd+0x7e>
 800b18a:	68a3      	ldr	r3, [r4, #8]
 800b18c:	42ab      	cmp	r3, r5
 800b18e:	dc19      	bgt.n	800b1c4 <__multadd+0x74>
 800b190:	6861      	ldr	r1, [r4, #4]
 800b192:	4638      	mov	r0, r7
 800b194:	3101      	adds	r1, #1
 800b196:	f7ff ff79 	bl	800b08c <_Balloc>
 800b19a:	4680      	mov	r8, r0
 800b19c:	b928      	cbnz	r0, 800b1aa <__multadd+0x5a>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	21ba      	movs	r1, #186	@ 0xba
 800b1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d4 <__multadd+0x84>)
 800b1a4:	480c      	ldr	r0, [pc, #48]	@ (800b1d8 <__multadd+0x88>)
 800b1a6:	f7fd fd17 	bl	8008bd8 <__assert_func>
 800b1aa:	6922      	ldr	r2, [r4, #16]
 800b1ac:	f104 010c 	add.w	r1, r4, #12
 800b1b0:	3202      	adds	r2, #2
 800b1b2:	0092      	lsls	r2, r2, #2
 800b1b4:	300c      	adds	r0, #12
 800b1b6:	f7fd fcfc 	bl	8008bb2 <memcpy>
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	4638      	mov	r0, r7
 800b1be:	f7ff ffa5 	bl	800b10c <_Bfree>
 800b1c2:	4644      	mov	r4, r8
 800b1c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1c8:	3501      	adds	r5, #1
 800b1ca:	615e      	str	r6, [r3, #20]
 800b1cc:	6125      	str	r5, [r4, #16]
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d4:	0800cc5c 	.word	0x0800cc5c
 800b1d8:	0800cccd 	.word	0x0800cccd

0800b1dc <__s2b>:
 800b1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	2209      	movs	r2, #9
 800b1e4:	461f      	mov	r7, r3
 800b1e6:	3308      	adds	r3, #8
 800b1e8:	460c      	mov	r4, r1
 800b1ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	db09      	blt.n	800b20c <__s2b+0x30>
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f7ff ff47 	bl	800b08c <_Balloc>
 800b1fe:	b940      	cbnz	r0, 800b212 <__s2b+0x36>
 800b200:	4602      	mov	r2, r0
 800b202:	21d3      	movs	r1, #211	@ 0xd3
 800b204:	4b18      	ldr	r3, [pc, #96]	@ (800b268 <__s2b+0x8c>)
 800b206:	4819      	ldr	r0, [pc, #100]	@ (800b26c <__s2b+0x90>)
 800b208:	f7fd fce6 	bl	8008bd8 <__assert_func>
 800b20c:	0052      	lsls	r2, r2, #1
 800b20e:	3101      	adds	r1, #1
 800b210:	e7f0      	b.n	800b1f4 <__s2b+0x18>
 800b212:	9b08      	ldr	r3, [sp, #32]
 800b214:	2d09      	cmp	r5, #9
 800b216:	6143      	str	r3, [r0, #20]
 800b218:	f04f 0301 	mov.w	r3, #1
 800b21c:	6103      	str	r3, [r0, #16]
 800b21e:	dd16      	ble.n	800b24e <__s2b+0x72>
 800b220:	f104 0909 	add.w	r9, r4, #9
 800b224:	46c8      	mov	r8, r9
 800b226:	442c      	add	r4, r5
 800b228:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b22c:	4601      	mov	r1, r0
 800b22e:	220a      	movs	r2, #10
 800b230:	4630      	mov	r0, r6
 800b232:	3b30      	subs	r3, #48	@ 0x30
 800b234:	f7ff ff8c 	bl	800b150 <__multadd>
 800b238:	45a0      	cmp	r8, r4
 800b23a:	d1f5      	bne.n	800b228 <__s2b+0x4c>
 800b23c:	f1a5 0408 	sub.w	r4, r5, #8
 800b240:	444c      	add	r4, r9
 800b242:	1b2d      	subs	r5, r5, r4
 800b244:	1963      	adds	r3, r4, r5
 800b246:	42bb      	cmp	r3, r7
 800b248:	db04      	blt.n	800b254 <__s2b+0x78>
 800b24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24e:	2509      	movs	r5, #9
 800b250:	340a      	adds	r4, #10
 800b252:	e7f6      	b.n	800b242 <__s2b+0x66>
 800b254:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b258:	4601      	mov	r1, r0
 800b25a:	220a      	movs	r2, #10
 800b25c:	4630      	mov	r0, r6
 800b25e:	3b30      	subs	r3, #48	@ 0x30
 800b260:	f7ff ff76 	bl	800b150 <__multadd>
 800b264:	e7ee      	b.n	800b244 <__s2b+0x68>
 800b266:	bf00      	nop
 800b268:	0800cc5c 	.word	0x0800cc5c
 800b26c:	0800cccd 	.word	0x0800cccd

0800b270 <__hi0bits>:
 800b270:	4603      	mov	r3, r0
 800b272:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b276:	bf3a      	itte	cc
 800b278:	0403      	lslcc	r3, r0, #16
 800b27a:	2010      	movcc	r0, #16
 800b27c:	2000      	movcs	r0, #0
 800b27e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b282:	bf3c      	itt	cc
 800b284:	021b      	lslcc	r3, r3, #8
 800b286:	3008      	addcc	r0, #8
 800b288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b28c:	bf3c      	itt	cc
 800b28e:	011b      	lslcc	r3, r3, #4
 800b290:	3004      	addcc	r0, #4
 800b292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b296:	bf3c      	itt	cc
 800b298:	009b      	lslcc	r3, r3, #2
 800b29a:	3002      	addcc	r0, #2
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	db05      	blt.n	800b2ac <__hi0bits+0x3c>
 800b2a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b2a4:	f100 0001 	add.w	r0, r0, #1
 800b2a8:	bf08      	it	eq
 800b2aa:	2020      	moveq	r0, #32
 800b2ac:	4770      	bx	lr

0800b2ae <__lo0bits>:
 800b2ae:	6803      	ldr	r3, [r0, #0]
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	f013 0007 	ands.w	r0, r3, #7
 800b2b6:	d00b      	beq.n	800b2d0 <__lo0bits+0x22>
 800b2b8:	07d9      	lsls	r1, r3, #31
 800b2ba:	d421      	bmi.n	800b300 <__lo0bits+0x52>
 800b2bc:	0798      	lsls	r0, r3, #30
 800b2be:	bf49      	itett	mi
 800b2c0:	085b      	lsrmi	r3, r3, #1
 800b2c2:	089b      	lsrpl	r3, r3, #2
 800b2c4:	2001      	movmi	r0, #1
 800b2c6:	6013      	strmi	r3, [r2, #0]
 800b2c8:	bf5c      	itt	pl
 800b2ca:	2002      	movpl	r0, #2
 800b2cc:	6013      	strpl	r3, [r2, #0]
 800b2ce:	4770      	bx	lr
 800b2d0:	b299      	uxth	r1, r3
 800b2d2:	b909      	cbnz	r1, 800b2d8 <__lo0bits+0x2a>
 800b2d4:	2010      	movs	r0, #16
 800b2d6:	0c1b      	lsrs	r3, r3, #16
 800b2d8:	b2d9      	uxtb	r1, r3
 800b2da:	b909      	cbnz	r1, 800b2e0 <__lo0bits+0x32>
 800b2dc:	3008      	adds	r0, #8
 800b2de:	0a1b      	lsrs	r3, r3, #8
 800b2e0:	0719      	lsls	r1, r3, #28
 800b2e2:	bf04      	itt	eq
 800b2e4:	091b      	lsreq	r3, r3, #4
 800b2e6:	3004      	addeq	r0, #4
 800b2e8:	0799      	lsls	r1, r3, #30
 800b2ea:	bf04      	itt	eq
 800b2ec:	089b      	lsreq	r3, r3, #2
 800b2ee:	3002      	addeq	r0, #2
 800b2f0:	07d9      	lsls	r1, r3, #31
 800b2f2:	d403      	bmi.n	800b2fc <__lo0bits+0x4e>
 800b2f4:	085b      	lsrs	r3, r3, #1
 800b2f6:	f100 0001 	add.w	r0, r0, #1
 800b2fa:	d003      	beq.n	800b304 <__lo0bits+0x56>
 800b2fc:	6013      	str	r3, [r2, #0]
 800b2fe:	4770      	bx	lr
 800b300:	2000      	movs	r0, #0
 800b302:	4770      	bx	lr
 800b304:	2020      	movs	r0, #32
 800b306:	4770      	bx	lr

0800b308 <__i2b>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	460c      	mov	r4, r1
 800b30c:	2101      	movs	r1, #1
 800b30e:	f7ff febd 	bl	800b08c <_Balloc>
 800b312:	4602      	mov	r2, r0
 800b314:	b928      	cbnz	r0, 800b322 <__i2b+0x1a>
 800b316:	f240 1145 	movw	r1, #325	@ 0x145
 800b31a:	4b04      	ldr	r3, [pc, #16]	@ (800b32c <__i2b+0x24>)
 800b31c:	4804      	ldr	r0, [pc, #16]	@ (800b330 <__i2b+0x28>)
 800b31e:	f7fd fc5b 	bl	8008bd8 <__assert_func>
 800b322:	2301      	movs	r3, #1
 800b324:	6144      	str	r4, [r0, #20]
 800b326:	6103      	str	r3, [r0, #16]
 800b328:	bd10      	pop	{r4, pc}
 800b32a:	bf00      	nop
 800b32c:	0800cc5c 	.word	0x0800cc5c
 800b330:	0800cccd 	.word	0x0800cccd

0800b334 <__multiply>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	4617      	mov	r7, r2
 800b33a:	690a      	ldr	r2, [r1, #16]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	4689      	mov	r9, r1
 800b340:	429a      	cmp	r2, r3
 800b342:	bfa2      	ittt	ge
 800b344:	463b      	movge	r3, r7
 800b346:	460f      	movge	r7, r1
 800b348:	4699      	movge	r9, r3
 800b34a:	693d      	ldr	r5, [r7, #16]
 800b34c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	6879      	ldr	r1, [r7, #4]
 800b354:	eb05 060a 	add.w	r6, r5, sl
 800b358:	42b3      	cmp	r3, r6
 800b35a:	b085      	sub	sp, #20
 800b35c:	bfb8      	it	lt
 800b35e:	3101      	addlt	r1, #1
 800b360:	f7ff fe94 	bl	800b08c <_Balloc>
 800b364:	b930      	cbnz	r0, 800b374 <__multiply+0x40>
 800b366:	4602      	mov	r2, r0
 800b368:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b36c:	4b40      	ldr	r3, [pc, #256]	@ (800b470 <__multiply+0x13c>)
 800b36e:	4841      	ldr	r0, [pc, #260]	@ (800b474 <__multiply+0x140>)
 800b370:	f7fd fc32 	bl	8008bd8 <__assert_func>
 800b374:	f100 0414 	add.w	r4, r0, #20
 800b378:	4623      	mov	r3, r4
 800b37a:	2200      	movs	r2, #0
 800b37c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b380:	4573      	cmp	r3, lr
 800b382:	d320      	bcc.n	800b3c6 <__multiply+0x92>
 800b384:	f107 0814 	add.w	r8, r7, #20
 800b388:	f109 0114 	add.w	r1, r9, #20
 800b38c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b390:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b394:	9302      	str	r3, [sp, #8]
 800b396:	1beb      	subs	r3, r5, r7
 800b398:	3b15      	subs	r3, #21
 800b39a:	f023 0303 	bic.w	r3, r3, #3
 800b39e:	3304      	adds	r3, #4
 800b3a0:	3715      	adds	r7, #21
 800b3a2:	42bd      	cmp	r5, r7
 800b3a4:	bf38      	it	cc
 800b3a6:	2304      	movcc	r3, #4
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	9b02      	ldr	r3, [sp, #8]
 800b3ac:	9103      	str	r1, [sp, #12]
 800b3ae:	428b      	cmp	r3, r1
 800b3b0:	d80c      	bhi.n	800b3cc <__multiply+0x98>
 800b3b2:	2e00      	cmp	r6, #0
 800b3b4:	dd03      	ble.n	800b3be <__multiply+0x8a>
 800b3b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d055      	beq.n	800b46a <__multiply+0x136>
 800b3be:	6106      	str	r6, [r0, #16]
 800b3c0:	b005      	add	sp, #20
 800b3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c6:	f843 2b04 	str.w	r2, [r3], #4
 800b3ca:	e7d9      	b.n	800b380 <__multiply+0x4c>
 800b3cc:	f8b1 a000 	ldrh.w	sl, [r1]
 800b3d0:	f1ba 0f00 	cmp.w	sl, #0
 800b3d4:	d01f      	beq.n	800b416 <__multiply+0xe2>
 800b3d6:	46c4      	mov	ip, r8
 800b3d8:	46a1      	mov	r9, r4
 800b3da:	2700      	movs	r7, #0
 800b3dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b3e0:	f8d9 3000 	ldr.w	r3, [r9]
 800b3e4:	fa1f fb82 	uxth.w	fp, r2
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	fb0a 330b 	mla	r3, sl, fp, r3
 800b3ee:	443b      	add	r3, r7
 800b3f0:	f8d9 7000 	ldr.w	r7, [r9]
 800b3f4:	0c12      	lsrs	r2, r2, #16
 800b3f6:	0c3f      	lsrs	r7, r7, #16
 800b3f8:	fb0a 7202 	mla	r2, sl, r2, r7
 800b3fc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b400:	b29b      	uxth	r3, r3
 800b402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b406:	4565      	cmp	r5, ip
 800b408:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b40c:	f849 3b04 	str.w	r3, [r9], #4
 800b410:	d8e4      	bhi.n	800b3dc <__multiply+0xa8>
 800b412:	9b01      	ldr	r3, [sp, #4]
 800b414:	50e7      	str	r7, [r4, r3]
 800b416:	9b03      	ldr	r3, [sp, #12]
 800b418:	3104      	adds	r1, #4
 800b41a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b41e:	f1b9 0f00 	cmp.w	r9, #0
 800b422:	d020      	beq.n	800b466 <__multiply+0x132>
 800b424:	4647      	mov	r7, r8
 800b426:	46a4      	mov	ip, r4
 800b428:	f04f 0a00 	mov.w	sl, #0
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	f8b7 b000 	ldrh.w	fp, [r7]
 800b432:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b436:	b29b      	uxth	r3, r3
 800b438:	fb09 220b 	mla	r2, r9, fp, r2
 800b43c:	4452      	add	r2, sl
 800b43e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b442:	f84c 3b04 	str.w	r3, [ip], #4
 800b446:	f857 3b04 	ldr.w	r3, [r7], #4
 800b44a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b44e:	f8bc 3000 	ldrh.w	r3, [ip]
 800b452:	42bd      	cmp	r5, r7
 800b454:	fb09 330a 	mla	r3, r9, sl, r3
 800b458:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b45c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b460:	d8e5      	bhi.n	800b42e <__multiply+0xfa>
 800b462:	9a01      	ldr	r2, [sp, #4]
 800b464:	50a3      	str	r3, [r4, r2]
 800b466:	3404      	adds	r4, #4
 800b468:	e79f      	b.n	800b3aa <__multiply+0x76>
 800b46a:	3e01      	subs	r6, #1
 800b46c:	e7a1      	b.n	800b3b2 <__multiply+0x7e>
 800b46e:	bf00      	nop
 800b470:	0800cc5c 	.word	0x0800cc5c
 800b474:	0800cccd 	.word	0x0800cccd

0800b478 <__pow5mult>:
 800b478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b47c:	4615      	mov	r5, r2
 800b47e:	f012 0203 	ands.w	r2, r2, #3
 800b482:	4607      	mov	r7, r0
 800b484:	460e      	mov	r6, r1
 800b486:	d007      	beq.n	800b498 <__pow5mult+0x20>
 800b488:	4c25      	ldr	r4, [pc, #148]	@ (800b520 <__pow5mult+0xa8>)
 800b48a:	3a01      	subs	r2, #1
 800b48c:	2300      	movs	r3, #0
 800b48e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b492:	f7ff fe5d 	bl	800b150 <__multadd>
 800b496:	4606      	mov	r6, r0
 800b498:	10ad      	asrs	r5, r5, #2
 800b49a:	d03d      	beq.n	800b518 <__pow5mult+0xa0>
 800b49c:	69fc      	ldr	r4, [r7, #28]
 800b49e:	b97c      	cbnz	r4, 800b4c0 <__pow5mult+0x48>
 800b4a0:	2010      	movs	r0, #16
 800b4a2:	f7fd fbff 	bl	8008ca4 <malloc>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	61f8      	str	r0, [r7, #28]
 800b4aa:	b928      	cbnz	r0, 800b4b8 <__pow5mult+0x40>
 800b4ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b4b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b524 <__pow5mult+0xac>)
 800b4b2:	481d      	ldr	r0, [pc, #116]	@ (800b528 <__pow5mult+0xb0>)
 800b4b4:	f7fd fb90 	bl	8008bd8 <__assert_func>
 800b4b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4bc:	6004      	str	r4, [r0, #0]
 800b4be:	60c4      	str	r4, [r0, #12]
 800b4c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b4c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4c8:	b94c      	cbnz	r4, 800b4de <__pow5mult+0x66>
 800b4ca:	f240 2171 	movw	r1, #625	@ 0x271
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f7ff ff1a 	bl	800b308 <__i2b>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4dc:	6003      	str	r3, [r0, #0]
 800b4de:	f04f 0900 	mov.w	r9, #0
 800b4e2:	07eb      	lsls	r3, r5, #31
 800b4e4:	d50a      	bpl.n	800b4fc <__pow5mult+0x84>
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	f7ff ff22 	bl	800b334 <__multiply>
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4638      	mov	r0, r7
 800b4f6:	f7ff fe09 	bl	800b10c <_Bfree>
 800b4fa:	4646      	mov	r6, r8
 800b4fc:	106d      	asrs	r5, r5, #1
 800b4fe:	d00b      	beq.n	800b518 <__pow5mult+0xa0>
 800b500:	6820      	ldr	r0, [r4, #0]
 800b502:	b938      	cbnz	r0, 800b514 <__pow5mult+0x9c>
 800b504:	4622      	mov	r2, r4
 800b506:	4621      	mov	r1, r4
 800b508:	4638      	mov	r0, r7
 800b50a:	f7ff ff13 	bl	800b334 <__multiply>
 800b50e:	6020      	str	r0, [r4, #0]
 800b510:	f8c0 9000 	str.w	r9, [r0]
 800b514:	4604      	mov	r4, r0
 800b516:	e7e4      	b.n	800b4e2 <__pow5mult+0x6a>
 800b518:	4630      	mov	r0, r6
 800b51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51e:	bf00      	nop
 800b520:	0800ce7c 	.word	0x0800ce7c
 800b524:	0800cb4b 	.word	0x0800cb4b
 800b528:	0800cccd 	.word	0x0800cccd

0800b52c <__lshift>:
 800b52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b530:	460c      	mov	r4, r1
 800b532:	4607      	mov	r7, r0
 800b534:	4691      	mov	r9, r2
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	6849      	ldr	r1, [r1, #4]
 800b53a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b53e:	68a3      	ldr	r3, [r4, #8]
 800b540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b544:	f108 0601 	add.w	r6, r8, #1
 800b548:	42b3      	cmp	r3, r6
 800b54a:	db0b      	blt.n	800b564 <__lshift+0x38>
 800b54c:	4638      	mov	r0, r7
 800b54e:	f7ff fd9d 	bl	800b08c <_Balloc>
 800b552:	4605      	mov	r5, r0
 800b554:	b948      	cbnz	r0, 800b56a <__lshift+0x3e>
 800b556:	4602      	mov	r2, r0
 800b558:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b55c:	4b27      	ldr	r3, [pc, #156]	@ (800b5fc <__lshift+0xd0>)
 800b55e:	4828      	ldr	r0, [pc, #160]	@ (800b600 <__lshift+0xd4>)
 800b560:	f7fd fb3a 	bl	8008bd8 <__assert_func>
 800b564:	3101      	adds	r1, #1
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	e7ee      	b.n	800b548 <__lshift+0x1c>
 800b56a:	2300      	movs	r3, #0
 800b56c:	f100 0114 	add.w	r1, r0, #20
 800b570:	f100 0210 	add.w	r2, r0, #16
 800b574:	4618      	mov	r0, r3
 800b576:	4553      	cmp	r3, sl
 800b578:	db33      	blt.n	800b5e2 <__lshift+0xb6>
 800b57a:	6920      	ldr	r0, [r4, #16]
 800b57c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b580:	f104 0314 	add.w	r3, r4, #20
 800b584:	f019 091f 	ands.w	r9, r9, #31
 800b588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b58c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b590:	d02b      	beq.n	800b5ea <__lshift+0xbe>
 800b592:	468a      	mov	sl, r1
 800b594:	2200      	movs	r2, #0
 800b596:	f1c9 0e20 	rsb	lr, r9, #32
 800b59a:	6818      	ldr	r0, [r3, #0]
 800b59c:	fa00 f009 	lsl.w	r0, r0, r9
 800b5a0:	4310      	orrs	r0, r2
 800b5a2:	f84a 0b04 	str.w	r0, [sl], #4
 800b5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5aa:	459c      	cmp	ip, r3
 800b5ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5b0:	d8f3      	bhi.n	800b59a <__lshift+0x6e>
 800b5b2:	ebac 0304 	sub.w	r3, ip, r4
 800b5b6:	3b15      	subs	r3, #21
 800b5b8:	f023 0303 	bic.w	r3, r3, #3
 800b5bc:	3304      	adds	r3, #4
 800b5be:	f104 0015 	add.w	r0, r4, #21
 800b5c2:	4560      	cmp	r0, ip
 800b5c4:	bf88      	it	hi
 800b5c6:	2304      	movhi	r3, #4
 800b5c8:	50ca      	str	r2, [r1, r3]
 800b5ca:	b10a      	cbz	r2, 800b5d0 <__lshift+0xa4>
 800b5cc:	f108 0602 	add.w	r6, r8, #2
 800b5d0:	3e01      	subs	r6, #1
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	612e      	str	r6, [r5, #16]
 800b5d8:	f7ff fd98 	bl	800b10c <_Bfree>
 800b5dc:	4628      	mov	r0, r5
 800b5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	e7c5      	b.n	800b576 <__lshift+0x4a>
 800b5ea:	3904      	subs	r1, #4
 800b5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5f0:	459c      	cmp	ip, r3
 800b5f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5f6:	d8f9      	bhi.n	800b5ec <__lshift+0xc0>
 800b5f8:	e7ea      	b.n	800b5d0 <__lshift+0xa4>
 800b5fa:	bf00      	nop
 800b5fc:	0800cc5c 	.word	0x0800cc5c
 800b600:	0800cccd 	.word	0x0800cccd

0800b604 <__mcmp>:
 800b604:	4603      	mov	r3, r0
 800b606:	690a      	ldr	r2, [r1, #16]
 800b608:	6900      	ldr	r0, [r0, #16]
 800b60a:	b530      	push	{r4, r5, lr}
 800b60c:	1a80      	subs	r0, r0, r2
 800b60e:	d10e      	bne.n	800b62e <__mcmp+0x2a>
 800b610:	3314      	adds	r3, #20
 800b612:	3114      	adds	r1, #20
 800b614:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b618:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b61c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b620:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b624:	4295      	cmp	r5, r2
 800b626:	d003      	beq.n	800b630 <__mcmp+0x2c>
 800b628:	d205      	bcs.n	800b636 <__mcmp+0x32>
 800b62a:	f04f 30ff 	mov.w	r0, #4294967295
 800b62e:	bd30      	pop	{r4, r5, pc}
 800b630:	42a3      	cmp	r3, r4
 800b632:	d3f3      	bcc.n	800b61c <__mcmp+0x18>
 800b634:	e7fb      	b.n	800b62e <__mcmp+0x2a>
 800b636:	2001      	movs	r0, #1
 800b638:	e7f9      	b.n	800b62e <__mcmp+0x2a>
	...

0800b63c <__mdiff>:
 800b63c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b640:	4689      	mov	r9, r1
 800b642:	4606      	mov	r6, r0
 800b644:	4611      	mov	r1, r2
 800b646:	4648      	mov	r0, r9
 800b648:	4614      	mov	r4, r2
 800b64a:	f7ff ffdb 	bl	800b604 <__mcmp>
 800b64e:	1e05      	subs	r5, r0, #0
 800b650:	d112      	bne.n	800b678 <__mdiff+0x3c>
 800b652:	4629      	mov	r1, r5
 800b654:	4630      	mov	r0, r6
 800b656:	f7ff fd19 	bl	800b08c <_Balloc>
 800b65a:	4602      	mov	r2, r0
 800b65c:	b928      	cbnz	r0, 800b66a <__mdiff+0x2e>
 800b65e:	f240 2137 	movw	r1, #567	@ 0x237
 800b662:	4b3e      	ldr	r3, [pc, #248]	@ (800b75c <__mdiff+0x120>)
 800b664:	483e      	ldr	r0, [pc, #248]	@ (800b760 <__mdiff+0x124>)
 800b666:	f7fd fab7 	bl	8008bd8 <__assert_func>
 800b66a:	2301      	movs	r3, #1
 800b66c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b670:	4610      	mov	r0, r2
 800b672:	b003      	add	sp, #12
 800b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b678:	bfbc      	itt	lt
 800b67a:	464b      	movlt	r3, r9
 800b67c:	46a1      	movlt	r9, r4
 800b67e:	4630      	mov	r0, r6
 800b680:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b684:	bfba      	itte	lt
 800b686:	461c      	movlt	r4, r3
 800b688:	2501      	movlt	r5, #1
 800b68a:	2500      	movge	r5, #0
 800b68c:	f7ff fcfe 	bl	800b08c <_Balloc>
 800b690:	4602      	mov	r2, r0
 800b692:	b918      	cbnz	r0, 800b69c <__mdiff+0x60>
 800b694:	f240 2145 	movw	r1, #581	@ 0x245
 800b698:	4b30      	ldr	r3, [pc, #192]	@ (800b75c <__mdiff+0x120>)
 800b69a:	e7e3      	b.n	800b664 <__mdiff+0x28>
 800b69c:	f100 0b14 	add.w	fp, r0, #20
 800b6a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b6a4:	f109 0310 	add.w	r3, r9, #16
 800b6a8:	60c5      	str	r5, [r0, #12]
 800b6aa:	f04f 0c00 	mov.w	ip, #0
 800b6ae:	f109 0514 	add.w	r5, r9, #20
 800b6b2:	46d9      	mov	r9, fp
 800b6b4:	6926      	ldr	r6, [r4, #16]
 800b6b6:	f104 0e14 	add.w	lr, r4, #20
 800b6ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b6be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b6c2:	9301      	str	r3, [sp, #4]
 800b6c4:	9b01      	ldr	r3, [sp, #4]
 800b6c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b6ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b6ce:	b281      	uxth	r1, r0
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	fa1f f38a 	uxth.w	r3, sl
 800b6d6:	1a5b      	subs	r3, r3, r1
 800b6d8:	0c00      	lsrs	r0, r0, #16
 800b6da:	4463      	add	r3, ip
 800b6dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b6e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b6ea:	4576      	cmp	r6, lr
 800b6ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b6f0:	f849 3b04 	str.w	r3, [r9], #4
 800b6f4:	d8e6      	bhi.n	800b6c4 <__mdiff+0x88>
 800b6f6:	1b33      	subs	r3, r6, r4
 800b6f8:	3b15      	subs	r3, #21
 800b6fa:	f023 0303 	bic.w	r3, r3, #3
 800b6fe:	3415      	adds	r4, #21
 800b700:	3304      	adds	r3, #4
 800b702:	42a6      	cmp	r6, r4
 800b704:	bf38      	it	cc
 800b706:	2304      	movcc	r3, #4
 800b708:	441d      	add	r5, r3
 800b70a:	445b      	add	r3, fp
 800b70c:	461e      	mov	r6, r3
 800b70e:	462c      	mov	r4, r5
 800b710:	4544      	cmp	r4, r8
 800b712:	d30e      	bcc.n	800b732 <__mdiff+0xf6>
 800b714:	f108 0103 	add.w	r1, r8, #3
 800b718:	1b49      	subs	r1, r1, r5
 800b71a:	f021 0103 	bic.w	r1, r1, #3
 800b71e:	3d03      	subs	r5, #3
 800b720:	45a8      	cmp	r8, r5
 800b722:	bf38      	it	cc
 800b724:	2100      	movcc	r1, #0
 800b726:	440b      	add	r3, r1
 800b728:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b72c:	b199      	cbz	r1, 800b756 <__mdiff+0x11a>
 800b72e:	6117      	str	r7, [r2, #16]
 800b730:	e79e      	b.n	800b670 <__mdiff+0x34>
 800b732:	46e6      	mov	lr, ip
 800b734:	f854 1b04 	ldr.w	r1, [r4], #4
 800b738:	fa1f fc81 	uxth.w	ip, r1
 800b73c:	44f4      	add	ip, lr
 800b73e:	0c08      	lsrs	r0, r1, #16
 800b740:	4471      	add	r1, lr
 800b742:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b746:	b289      	uxth	r1, r1
 800b748:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b74c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b750:	f846 1b04 	str.w	r1, [r6], #4
 800b754:	e7dc      	b.n	800b710 <__mdiff+0xd4>
 800b756:	3f01      	subs	r7, #1
 800b758:	e7e6      	b.n	800b728 <__mdiff+0xec>
 800b75a:	bf00      	nop
 800b75c:	0800cc5c 	.word	0x0800cc5c
 800b760:	0800cccd 	.word	0x0800cccd

0800b764 <__ulp>:
 800b764:	4b0e      	ldr	r3, [pc, #56]	@ (800b7a0 <__ulp+0x3c>)
 800b766:	400b      	ands	r3, r1
 800b768:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dc08      	bgt.n	800b782 <__ulp+0x1e>
 800b770:	425b      	negs	r3, r3
 800b772:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b776:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b77a:	da04      	bge.n	800b786 <__ulp+0x22>
 800b77c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b780:	4113      	asrs	r3, r2
 800b782:	2200      	movs	r2, #0
 800b784:	e008      	b.n	800b798 <__ulp+0x34>
 800b786:	f1a2 0314 	sub.w	r3, r2, #20
 800b78a:	2b1e      	cmp	r3, #30
 800b78c:	bfd6      	itet	le
 800b78e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b792:	2201      	movgt	r2, #1
 800b794:	40da      	lsrle	r2, r3
 800b796:	2300      	movs	r3, #0
 800b798:	4619      	mov	r1, r3
 800b79a:	4610      	mov	r0, r2
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	7ff00000 	.word	0x7ff00000

0800b7a4 <__b2d>:
 800b7a4:	6902      	ldr	r2, [r0, #16]
 800b7a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a8:	f100 0614 	add.w	r6, r0, #20
 800b7ac:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b7b0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b7b4:	4f1e      	ldr	r7, [pc, #120]	@ (800b830 <__b2d+0x8c>)
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7ff fd5a 	bl	800b270 <__hi0bits>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	f1c0 0020 	rsb	r0, r0, #32
 800b7c2:	2b0a      	cmp	r3, #10
 800b7c4:	f1a2 0504 	sub.w	r5, r2, #4
 800b7c8:	6008      	str	r0, [r1, #0]
 800b7ca:	dc12      	bgt.n	800b7f2 <__b2d+0x4e>
 800b7cc:	42ae      	cmp	r6, r5
 800b7ce:	bf2c      	ite	cs
 800b7d0:	2200      	movcs	r2, #0
 800b7d2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b7d6:	f1c3 0c0b 	rsb	ip, r3, #11
 800b7da:	3315      	adds	r3, #21
 800b7dc:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b7e0:	fa04 f303 	lsl.w	r3, r4, r3
 800b7e4:	fa22 f20c 	lsr.w	r2, r2, ip
 800b7e8:	ea4e 0107 	orr.w	r1, lr, r7
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7f2:	42ae      	cmp	r6, r5
 800b7f4:	bf36      	itet	cc
 800b7f6:	f1a2 0508 	subcc.w	r5, r2, #8
 800b7fa:	2200      	movcs	r2, #0
 800b7fc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b800:	3b0b      	subs	r3, #11
 800b802:	d012      	beq.n	800b82a <__b2d+0x86>
 800b804:	f1c3 0720 	rsb	r7, r3, #32
 800b808:	fa22 f107 	lsr.w	r1, r2, r7
 800b80c:	409c      	lsls	r4, r3
 800b80e:	430c      	orrs	r4, r1
 800b810:	42b5      	cmp	r5, r6
 800b812:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b816:	bf94      	ite	ls
 800b818:	2400      	movls	r4, #0
 800b81a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b81e:	409a      	lsls	r2, r3
 800b820:	40fc      	lsrs	r4, r7
 800b822:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b826:	4322      	orrs	r2, r4
 800b828:	e7e1      	b.n	800b7ee <__b2d+0x4a>
 800b82a:	ea44 0107 	orr.w	r1, r4, r7
 800b82e:	e7de      	b.n	800b7ee <__b2d+0x4a>
 800b830:	3ff00000 	.word	0x3ff00000

0800b834 <__d2b>:
 800b834:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b838:	2101      	movs	r1, #1
 800b83a:	4690      	mov	r8, r2
 800b83c:	4699      	mov	r9, r3
 800b83e:	9e08      	ldr	r6, [sp, #32]
 800b840:	f7ff fc24 	bl	800b08c <_Balloc>
 800b844:	4604      	mov	r4, r0
 800b846:	b930      	cbnz	r0, 800b856 <__d2b+0x22>
 800b848:	4602      	mov	r2, r0
 800b84a:	f240 310f 	movw	r1, #783	@ 0x30f
 800b84e:	4b23      	ldr	r3, [pc, #140]	@ (800b8dc <__d2b+0xa8>)
 800b850:	4823      	ldr	r0, [pc, #140]	@ (800b8e0 <__d2b+0xac>)
 800b852:	f7fd f9c1 	bl	8008bd8 <__assert_func>
 800b856:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b85a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b85e:	b10d      	cbz	r5, 800b864 <__d2b+0x30>
 800b860:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b864:	9301      	str	r3, [sp, #4]
 800b866:	f1b8 0300 	subs.w	r3, r8, #0
 800b86a:	d024      	beq.n	800b8b6 <__d2b+0x82>
 800b86c:	4668      	mov	r0, sp
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	f7ff fd1d 	bl	800b2ae <__lo0bits>
 800b874:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b878:	b1d8      	cbz	r0, 800b8b2 <__d2b+0x7e>
 800b87a:	f1c0 0320 	rsb	r3, r0, #32
 800b87e:	fa02 f303 	lsl.w	r3, r2, r3
 800b882:	430b      	orrs	r3, r1
 800b884:	40c2      	lsrs	r2, r0
 800b886:	6163      	str	r3, [r4, #20]
 800b888:	9201      	str	r2, [sp, #4]
 800b88a:	9b01      	ldr	r3, [sp, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	bf0c      	ite	eq
 800b890:	2201      	moveq	r2, #1
 800b892:	2202      	movne	r2, #2
 800b894:	61a3      	str	r3, [r4, #24]
 800b896:	6122      	str	r2, [r4, #16]
 800b898:	b1ad      	cbz	r5, 800b8c6 <__d2b+0x92>
 800b89a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b89e:	4405      	add	r5, r0
 800b8a0:	6035      	str	r5, [r6, #0]
 800b8a2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a8:	6018      	str	r0, [r3, #0]
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	b002      	add	sp, #8
 800b8ae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b8b2:	6161      	str	r1, [r4, #20]
 800b8b4:	e7e9      	b.n	800b88a <__d2b+0x56>
 800b8b6:	a801      	add	r0, sp, #4
 800b8b8:	f7ff fcf9 	bl	800b2ae <__lo0bits>
 800b8bc:	9b01      	ldr	r3, [sp, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	6163      	str	r3, [r4, #20]
 800b8c2:	3020      	adds	r0, #32
 800b8c4:	e7e7      	b.n	800b896 <__d2b+0x62>
 800b8c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b8ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8ce:	6030      	str	r0, [r6, #0]
 800b8d0:	6918      	ldr	r0, [r3, #16]
 800b8d2:	f7ff fccd 	bl	800b270 <__hi0bits>
 800b8d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8da:	e7e4      	b.n	800b8a6 <__d2b+0x72>
 800b8dc:	0800cc5c 	.word	0x0800cc5c
 800b8e0:	0800cccd 	.word	0x0800cccd

0800b8e4 <__ratio>:
 800b8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e8:	b085      	sub	sp, #20
 800b8ea:	e9cd 1000 	strd	r1, r0, [sp]
 800b8ee:	a902      	add	r1, sp, #8
 800b8f0:	f7ff ff58 	bl	800b7a4 <__b2d>
 800b8f4:	468b      	mov	fp, r1
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	460f      	mov	r7, r1
 800b8fa:	9800      	ldr	r0, [sp, #0]
 800b8fc:	a903      	add	r1, sp, #12
 800b8fe:	f7ff ff51 	bl	800b7a4 <__b2d>
 800b902:	460d      	mov	r5, r1
 800b904:	9b01      	ldr	r3, [sp, #4]
 800b906:	4689      	mov	r9, r1
 800b908:	6919      	ldr	r1, [r3, #16]
 800b90a:	9b00      	ldr	r3, [sp, #0]
 800b90c:	4604      	mov	r4, r0
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	4630      	mov	r0, r6
 800b912:	1ac9      	subs	r1, r1, r3
 800b914:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b918:	1a9b      	subs	r3, r3, r2
 800b91a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b91e:	2b00      	cmp	r3, #0
 800b920:	bfcd      	iteet	gt
 800b922:	463a      	movgt	r2, r7
 800b924:	462a      	movle	r2, r5
 800b926:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b92a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b92e:	bfd8      	it	le
 800b930:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b934:	464b      	mov	r3, r9
 800b936:	4622      	mov	r2, r4
 800b938:	4659      	mov	r1, fp
 800b93a:	f7f4 ff01 	bl	8000740 <__aeabi_ddiv>
 800b93e:	b005      	add	sp, #20
 800b940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b944 <__copybits>:
 800b944:	3901      	subs	r1, #1
 800b946:	b570      	push	{r4, r5, r6, lr}
 800b948:	1149      	asrs	r1, r1, #5
 800b94a:	6914      	ldr	r4, [r2, #16]
 800b94c:	3101      	adds	r1, #1
 800b94e:	f102 0314 	add.w	r3, r2, #20
 800b952:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b956:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b95a:	1f05      	subs	r5, r0, #4
 800b95c:	42a3      	cmp	r3, r4
 800b95e:	d30c      	bcc.n	800b97a <__copybits+0x36>
 800b960:	1aa3      	subs	r3, r4, r2
 800b962:	3b11      	subs	r3, #17
 800b964:	f023 0303 	bic.w	r3, r3, #3
 800b968:	3211      	adds	r2, #17
 800b96a:	42a2      	cmp	r2, r4
 800b96c:	bf88      	it	hi
 800b96e:	2300      	movhi	r3, #0
 800b970:	4418      	add	r0, r3
 800b972:	2300      	movs	r3, #0
 800b974:	4288      	cmp	r0, r1
 800b976:	d305      	bcc.n	800b984 <__copybits+0x40>
 800b978:	bd70      	pop	{r4, r5, r6, pc}
 800b97a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b97e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b982:	e7eb      	b.n	800b95c <__copybits+0x18>
 800b984:	f840 3b04 	str.w	r3, [r0], #4
 800b988:	e7f4      	b.n	800b974 <__copybits+0x30>

0800b98a <__any_on>:
 800b98a:	f100 0214 	add.w	r2, r0, #20
 800b98e:	6900      	ldr	r0, [r0, #16]
 800b990:	114b      	asrs	r3, r1, #5
 800b992:	4298      	cmp	r0, r3
 800b994:	b510      	push	{r4, lr}
 800b996:	db11      	blt.n	800b9bc <__any_on+0x32>
 800b998:	dd0a      	ble.n	800b9b0 <__any_on+0x26>
 800b99a:	f011 011f 	ands.w	r1, r1, #31
 800b99e:	d007      	beq.n	800b9b0 <__any_on+0x26>
 800b9a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9a4:	fa24 f001 	lsr.w	r0, r4, r1
 800b9a8:	fa00 f101 	lsl.w	r1, r0, r1
 800b9ac:	428c      	cmp	r4, r1
 800b9ae:	d10b      	bne.n	800b9c8 <__any_on+0x3e>
 800b9b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d803      	bhi.n	800b9c0 <__any_on+0x36>
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	bd10      	pop	{r4, pc}
 800b9bc:	4603      	mov	r3, r0
 800b9be:	e7f7      	b.n	800b9b0 <__any_on+0x26>
 800b9c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9c4:	2900      	cmp	r1, #0
 800b9c6:	d0f5      	beq.n	800b9b4 <__any_on+0x2a>
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	e7f6      	b.n	800b9ba <__any_on+0x30>

0800b9cc <_realloc_r>:
 800b9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d0:	4607      	mov	r7, r0
 800b9d2:	4614      	mov	r4, r2
 800b9d4:	460d      	mov	r5, r1
 800b9d6:	b921      	cbnz	r1, 800b9e2 <_realloc_r+0x16>
 800b9d8:	4611      	mov	r1, r2
 800b9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9de:	f7fd b98b 	b.w	8008cf8 <_malloc_r>
 800b9e2:	b92a      	cbnz	r2, 800b9f0 <_realloc_r+0x24>
 800b9e4:	f7fd f916 	bl	8008c14 <_free_r>
 800b9e8:	4625      	mov	r5, r4
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f0:	f000 fac2 	bl	800bf78 <_malloc_usable_size_r>
 800b9f4:	4284      	cmp	r4, r0
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	d802      	bhi.n	800ba00 <_realloc_r+0x34>
 800b9fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9fe:	d8f4      	bhi.n	800b9ea <_realloc_r+0x1e>
 800ba00:	4621      	mov	r1, r4
 800ba02:	4638      	mov	r0, r7
 800ba04:	f7fd f978 	bl	8008cf8 <_malloc_r>
 800ba08:	4680      	mov	r8, r0
 800ba0a:	b908      	cbnz	r0, 800ba10 <_realloc_r+0x44>
 800ba0c:	4645      	mov	r5, r8
 800ba0e:	e7ec      	b.n	800b9ea <_realloc_r+0x1e>
 800ba10:	42b4      	cmp	r4, r6
 800ba12:	4622      	mov	r2, r4
 800ba14:	4629      	mov	r1, r5
 800ba16:	bf28      	it	cs
 800ba18:	4632      	movcs	r2, r6
 800ba1a:	f7fd f8ca 	bl	8008bb2 <memcpy>
 800ba1e:	4629      	mov	r1, r5
 800ba20:	4638      	mov	r0, r7
 800ba22:	f7fd f8f7 	bl	8008c14 <_free_r>
 800ba26:	e7f1      	b.n	800ba0c <_realloc_r+0x40>

0800ba28 <_strtoul_l.isra.0>:
 800ba28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba2c:	4686      	mov	lr, r0
 800ba2e:	460d      	mov	r5, r1
 800ba30:	4e33      	ldr	r6, [pc, #204]	@ (800bb00 <_strtoul_l.isra.0+0xd8>)
 800ba32:	4628      	mov	r0, r5
 800ba34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba38:	5d37      	ldrb	r7, [r6, r4]
 800ba3a:	f017 0708 	ands.w	r7, r7, #8
 800ba3e:	d1f8      	bne.n	800ba32 <_strtoul_l.isra.0+0xa>
 800ba40:	2c2d      	cmp	r4, #45	@ 0x2d
 800ba42:	d110      	bne.n	800ba66 <_strtoul_l.isra.0+0x3e>
 800ba44:	2701      	movs	r7, #1
 800ba46:	782c      	ldrb	r4, [r5, #0]
 800ba48:	1c85      	adds	r5, r0, #2
 800ba4a:	f033 0010 	bics.w	r0, r3, #16
 800ba4e:	d115      	bne.n	800ba7c <_strtoul_l.isra.0+0x54>
 800ba50:	2c30      	cmp	r4, #48	@ 0x30
 800ba52:	d10d      	bne.n	800ba70 <_strtoul_l.isra.0+0x48>
 800ba54:	7828      	ldrb	r0, [r5, #0]
 800ba56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ba5a:	2858      	cmp	r0, #88	@ 0x58
 800ba5c:	d108      	bne.n	800ba70 <_strtoul_l.isra.0+0x48>
 800ba5e:	786c      	ldrb	r4, [r5, #1]
 800ba60:	3502      	adds	r5, #2
 800ba62:	2310      	movs	r3, #16
 800ba64:	e00a      	b.n	800ba7c <_strtoul_l.isra.0+0x54>
 800ba66:	2c2b      	cmp	r4, #43	@ 0x2b
 800ba68:	bf04      	itt	eq
 800ba6a:	782c      	ldrbeq	r4, [r5, #0]
 800ba6c:	1c85      	addeq	r5, r0, #2
 800ba6e:	e7ec      	b.n	800ba4a <_strtoul_l.isra.0+0x22>
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1f6      	bne.n	800ba62 <_strtoul_l.isra.0+0x3a>
 800ba74:	2c30      	cmp	r4, #48	@ 0x30
 800ba76:	bf14      	ite	ne
 800ba78:	230a      	movne	r3, #10
 800ba7a:	2308      	moveq	r3, #8
 800ba7c:	f04f 38ff 	mov.w	r8, #4294967295
 800ba80:	fbb8 f8f3 	udiv	r8, r8, r3
 800ba84:	2600      	movs	r6, #0
 800ba86:	fb03 f908 	mul.w	r9, r3, r8
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	ea6f 0909 	mvn.w	r9, r9
 800ba90:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ba94:	f1bc 0f09 	cmp.w	ip, #9
 800ba98:	d810      	bhi.n	800babc <_strtoul_l.isra.0+0x94>
 800ba9a:	4664      	mov	r4, ip
 800ba9c:	42a3      	cmp	r3, r4
 800ba9e:	dd1e      	ble.n	800bade <_strtoul_l.isra.0+0xb6>
 800baa0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800baa4:	d007      	beq.n	800bab6 <_strtoul_l.isra.0+0x8e>
 800baa6:	4580      	cmp	r8, r0
 800baa8:	d316      	bcc.n	800bad8 <_strtoul_l.isra.0+0xb0>
 800baaa:	d101      	bne.n	800bab0 <_strtoul_l.isra.0+0x88>
 800baac:	45a1      	cmp	r9, r4
 800baae:	db13      	blt.n	800bad8 <_strtoul_l.isra.0+0xb0>
 800bab0:	2601      	movs	r6, #1
 800bab2:	fb00 4003 	mla	r0, r0, r3, r4
 800bab6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800baba:	e7e9      	b.n	800ba90 <_strtoul_l.isra.0+0x68>
 800babc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800bac0:	f1bc 0f19 	cmp.w	ip, #25
 800bac4:	d801      	bhi.n	800baca <_strtoul_l.isra.0+0xa2>
 800bac6:	3c37      	subs	r4, #55	@ 0x37
 800bac8:	e7e8      	b.n	800ba9c <_strtoul_l.isra.0+0x74>
 800baca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800bace:	f1bc 0f19 	cmp.w	ip, #25
 800bad2:	d804      	bhi.n	800bade <_strtoul_l.isra.0+0xb6>
 800bad4:	3c57      	subs	r4, #87	@ 0x57
 800bad6:	e7e1      	b.n	800ba9c <_strtoul_l.isra.0+0x74>
 800bad8:	f04f 36ff 	mov.w	r6, #4294967295
 800badc:	e7eb      	b.n	800bab6 <_strtoul_l.isra.0+0x8e>
 800bade:	1c73      	adds	r3, r6, #1
 800bae0:	d106      	bne.n	800baf0 <_strtoul_l.isra.0+0xc8>
 800bae2:	2322      	movs	r3, #34	@ 0x22
 800bae4:	4630      	mov	r0, r6
 800bae6:	f8ce 3000 	str.w	r3, [lr]
 800baea:	b932      	cbnz	r2, 800bafa <_strtoul_l.isra.0+0xd2>
 800baec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baf0:	b107      	cbz	r7, 800baf4 <_strtoul_l.isra.0+0xcc>
 800baf2:	4240      	negs	r0, r0
 800baf4:	2a00      	cmp	r2, #0
 800baf6:	d0f9      	beq.n	800baec <_strtoul_l.isra.0+0xc4>
 800baf8:	b106      	cbz	r6, 800bafc <_strtoul_l.isra.0+0xd4>
 800bafa:	1e69      	subs	r1, r5, #1
 800bafc:	6011      	str	r1, [r2, #0]
 800bafe:	e7f5      	b.n	800baec <_strtoul_l.isra.0+0xc4>
 800bb00:	0800cd79 	.word	0x0800cd79

0800bb04 <_strtoul_r>:
 800bb04:	f7ff bf90 	b.w	800ba28 <_strtoul_l.isra.0>

0800bb08 <__ascii_wctomb>:
 800bb08:	4603      	mov	r3, r0
 800bb0a:	4608      	mov	r0, r1
 800bb0c:	b141      	cbz	r1, 800bb20 <__ascii_wctomb+0x18>
 800bb0e:	2aff      	cmp	r2, #255	@ 0xff
 800bb10:	d904      	bls.n	800bb1c <__ascii_wctomb+0x14>
 800bb12:	228a      	movs	r2, #138	@ 0x8a
 800bb14:	f04f 30ff 	mov.w	r0, #4294967295
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	4770      	bx	lr
 800bb1c:	2001      	movs	r0, #1
 800bb1e:	700a      	strb	r2, [r1, #0]
 800bb20:	4770      	bx	lr

0800bb22 <__sfputc_r>:
 800bb22:	6893      	ldr	r3, [r2, #8]
 800bb24:	b410      	push	{r4}
 800bb26:	3b01      	subs	r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	6093      	str	r3, [r2, #8]
 800bb2c:	da07      	bge.n	800bb3e <__sfputc_r+0x1c>
 800bb2e:	6994      	ldr	r4, [r2, #24]
 800bb30:	42a3      	cmp	r3, r4
 800bb32:	db01      	blt.n	800bb38 <__sfputc_r+0x16>
 800bb34:	290a      	cmp	r1, #10
 800bb36:	d102      	bne.n	800bb3e <__sfputc_r+0x1c>
 800bb38:	bc10      	pop	{r4}
 800bb3a:	f000 b931 	b.w	800bda0 <__swbuf_r>
 800bb3e:	6813      	ldr	r3, [r2, #0]
 800bb40:	1c58      	adds	r0, r3, #1
 800bb42:	6010      	str	r0, [r2, #0]
 800bb44:	7019      	strb	r1, [r3, #0]
 800bb46:	4608      	mov	r0, r1
 800bb48:	bc10      	pop	{r4}
 800bb4a:	4770      	bx	lr

0800bb4c <__sfputs_r>:
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	4606      	mov	r6, r0
 800bb50:	460f      	mov	r7, r1
 800bb52:	4614      	mov	r4, r2
 800bb54:	18d5      	adds	r5, r2, r3
 800bb56:	42ac      	cmp	r4, r5
 800bb58:	d101      	bne.n	800bb5e <__sfputs_r+0x12>
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	e007      	b.n	800bb6e <__sfputs_r+0x22>
 800bb5e:	463a      	mov	r2, r7
 800bb60:	4630      	mov	r0, r6
 800bb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb66:	f7ff ffdc 	bl	800bb22 <__sfputc_r>
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	d1f3      	bne.n	800bb56 <__sfputs_r+0xa>
 800bb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb70 <_vfiprintf_r>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	460d      	mov	r5, r1
 800bb76:	4614      	mov	r4, r2
 800bb78:	4698      	mov	r8, r3
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	b09d      	sub	sp, #116	@ 0x74
 800bb7e:	b118      	cbz	r0, 800bb88 <_vfiprintf_r+0x18>
 800bb80:	6a03      	ldr	r3, [r0, #32]
 800bb82:	b90b      	cbnz	r3, 800bb88 <_vfiprintf_r+0x18>
 800bb84:	f7fc fdce 	bl	8008724 <__sinit>
 800bb88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb8a:	07d9      	lsls	r1, r3, #31
 800bb8c:	d405      	bmi.n	800bb9a <_vfiprintf_r+0x2a>
 800bb8e:	89ab      	ldrh	r3, [r5, #12]
 800bb90:	059a      	lsls	r2, r3, #22
 800bb92:	d402      	bmi.n	800bb9a <_vfiprintf_r+0x2a>
 800bb94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb96:	f7fd f80a 	bl	8008bae <__retarget_lock_acquire_recursive>
 800bb9a:	89ab      	ldrh	r3, [r5, #12]
 800bb9c:	071b      	lsls	r3, r3, #28
 800bb9e:	d501      	bpl.n	800bba4 <_vfiprintf_r+0x34>
 800bba0:	692b      	ldr	r3, [r5, #16]
 800bba2:	b99b      	cbnz	r3, 800bbcc <_vfiprintf_r+0x5c>
 800bba4:	4629      	mov	r1, r5
 800bba6:	4630      	mov	r0, r6
 800bba8:	f000 f938 	bl	800be1c <__swsetup_r>
 800bbac:	b170      	cbz	r0, 800bbcc <_vfiprintf_r+0x5c>
 800bbae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbb0:	07dc      	lsls	r4, r3, #31
 800bbb2:	d504      	bpl.n	800bbbe <_vfiprintf_r+0x4e>
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb8:	b01d      	add	sp, #116	@ 0x74
 800bbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	0598      	lsls	r0, r3, #22
 800bbc2:	d4f7      	bmi.n	800bbb4 <_vfiprintf_r+0x44>
 800bbc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbc6:	f7fc fff3 	bl	8008bb0 <__retarget_lock_release_recursive>
 800bbca:	e7f3      	b.n	800bbb4 <_vfiprintf_r+0x44>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbd0:	2320      	movs	r3, #32
 800bbd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbd6:	2330      	movs	r3, #48	@ 0x30
 800bbd8:	f04f 0901 	mov.w	r9, #1
 800bbdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbe0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bd8c <_vfiprintf_r+0x21c>
 800bbe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbe8:	4623      	mov	r3, r4
 800bbea:	469a      	mov	sl, r3
 800bbec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbf0:	b10a      	cbz	r2, 800bbf6 <_vfiprintf_r+0x86>
 800bbf2:	2a25      	cmp	r2, #37	@ 0x25
 800bbf4:	d1f9      	bne.n	800bbea <_vfiprintf_r+0x7a>
 800bbf6:	ebba 0b04 	subs.w	fp, sl, r4
 800bbfa:	d00b      	beq.n	800bc14 <_vfiprintf_r+0xa4>
 800bbfc:	465b      	mov	r3, fp
 800bbfe:	4622      	mov	r2, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7ff ffa2 	bl	800bb4c <__sfputs_r>
 800bc08:	3001      	adds	r0, #1
 800bc0a:	f000 80a7 	beq.w	800bd5c <_vfiprintf_r+0x1ec>
 800bc0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc10:	445a      	add	r2, fp
 800bc12:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc14:	f89a 3000 	ldrb.w	r3, [sl]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 809f 	beq.w	800bd5c <_vfiprintf_r+0x1ec>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f04f 32ff 	mov.w	r2, #4294967295
 800bc24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc28:	f10a 0a01 	add.w	sl, sl, #1
 800bc2c:	9304      	str	r3, [sp, #16]
 800bc2e:	9307      	str	r3, [sp, #28]
 800bc30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc34:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc36:	4654      	mov	r4, sl
 800bc38:	2205      	movs	r2, #5
 800bc3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3e:	4853      	ldr	r0, [pc, #332]	@ (800bd8c <_vfiprintf_r+0x21c>)
 800bc40:	f7fe febc 	bl	800a9bc <memchr>
 800bc44:	9a04      	ldr	r2, [sp, #16]
 800bc46:	b9d8      	cbnz	r0, 800bc80 <_vfiprintf_r+0x110>
 800bc48:	06d1      	lsls	r1, r2, #27
 800bc4a:	bf44      	itt	mi
 800bc4c:	2320      	movmi	r3, #32
 800bc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc52:	0713      	lsls	r3, r2, #28
 800bc54:	bf44      	itt	mi
 800bc56:	232b      	movmi	r3, #43	@ 0x2b
 800bc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc60:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc62:	d015      	beq.n	800bc90 <_vfiprintf_r+0x120>
 800bc64:	4654      	mov	r4, sl
 800bc66:	2000      	movs	r0, #0
 800bc68:	f04f 0c0a 	mov.w	ip, #10
 800bc6c:	9a07      	ldr	r2, [sp, #28]
 800bc6e:	4621      	mov	r1, r4
 800bc70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc74:	3b30      	subs	r3, #48	@ 0x30
 800bc76:	2b09      	cmp	r3, #9
 800bc78:	d94b      	bls.n	800bd12 <_vfiprintf_r+0x1a2>
 800bc7a:	b1b0      	cbz	r0, 800bcaa <_vfiprintf_r+0x13a>
 800bc7c:	9207      	str	r2, [sp, #28]
 800bc7e:	e014      	b.n	800bcaa <_vfiprintf_r+0x13a>
 800bc80:	eba0 0308 	sub.w	r3, r0, r8
 800bc84:	fa09 f303 	lsl.w	r3, r9, r3
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	46a2      	mov	sl, r4
 800bc8c:	9304      	str	r3, [sp, #16]
 800bc8e:	e7d2      	b.n	800bc36 <_vfiprintf_r+0xc6>
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	1d19      	adds	r1, r3, #4
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	9103      	str	r1, [sp, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	bfbb      	ittet	lt
 800bc9c:	425b      	neglt	r3, r3
 800bc9e:	f042 0202 	orrlt.w	r2, r2, #2
 800bca2:	9307      	strge	r3, [sp, #28]
 800bca4:	9307      	strlt	r3, [sp, #28]
 800bca6:	bfb8      	it	lt
 800bca8:	9204      	strlt	r2, [sp, #16]
 800bcaa:	7823      	ldrb	r3, [r4, #0]
 800bcac:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcae:	d10a      	bne.n	800bcc6 <_vfiprintf_r+0x156>
 800bcb0:	7863      	ldrb	r3, [r4, #1]
 800bcb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcb4:	d132      	bne.n	800bd1c <_vfiprintf_r+0x1ac>
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	3402      	adds	r4, #2
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	9203      	str	r2, [sp, #12]
 800bcc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bd90 <_vfiprintf_r+0x220>
 800bcca:	2203      	movs	r2, #3
 800bccc:	4650      	mov	r0, sl
 800bcce:	7821      	ldrb	r1, [r4, #0]
 800bcd0:	f7fe fe74 	bl	800a9bc <memchr>
 800bcd4:	b138      	cbz	r0, 800bce6 <_vfiprintf_r+0x176>
 800bcd6:	2240      	movs	r2, #64	@ 0x40
 800bcd8:	9b04      	ldr	r3, [sp, #16]
 800bcda:	eba0 000a 	sub.w	r0, r0, sl
 800bcde:	4082      	lsls	r2, r0
 800bce0:	4313      	orrs	r3, r2
 800bce2:	3401      	adds	r4, #1
 800bce4:	9304      	str	r3, [sp, #16]
 800bce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcea:	2206      	movs	r2, #6
 800bcec:	4829      	ldr	r0, [pc, #164]	@ (800bd94 <_vfiprintf_r+0x224>)
 800bcee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcf2:	f7fe fe63 	bl	800a9bc <memchr>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d03f      	beq.n	800bd7a <_vfiprintf_r+0x20a>
 800bcfa:	4b27      	ldr	r3, [pc, #156]	@ (800bd98 <_vfiprintf_r+0x228>)
 800bcfc:	bb1b      	cbnz	r3, 800bd46 <_vfiprintf_r+0x1d6>
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	3307      	adds	r3, #7
 800bd02:	f023 0307 	bic.w	r3, r3, #7
 800bd06:	3308      	adds	r3, #8
 800bd08:	9303      	str	r3, [sp, #12]
 800bd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0c:	443b      	add	r3, r7
 800bd0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd10:	e76a      	b.n	800bbe8 <_vfiprintf_r+0x78>
 800bd12:	460c      	mov	r4, r1
 800bd14:	2001      	movs	r0, #1
 800bd16:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd1a:	e7a8      	b.n	800bc6e <_vfiprintf_r+0xfe>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f04f 0c0a 	mov.w	ip, #10
 800bd22:	4619      	mov	r1, r3
 800bd24:	3401      	adds	r4, #1
 800bd26:	9305      	str	r3, [sp, #20]
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2e:	3a30      	subs	r2, #48	@ 0x30
 800bd30:	2a09      	cmp	r2, #9
 800bd32:	d903      	bls.n	800bd3c <_vfiprintf_r+0x1cc>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d0c6      	beq.n	800bcc6 <_vfiprintf_r+0x156>
 800bd38:	9105      	str	r1, [sp, #20]
 800bd3a:	e7c4      	b.n	800bcc6 <_vfiprintf_r+0x156>
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	2301      	movs	r3, #1
 800bd40:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd44:	e7f0      	b.n	800bd28 <_vfiprintf_r+0x1b8>
 800bd46:	ab03      	add	r3, sp, #12
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	462a      	mov	r2, r5
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	4b13      	ldr	r3, [pc, #76]	@ (800bd9c <_vfiprintf_r+0x22c>)
 800bd50:	a904      	add	r1, sp, #16
 800bd52:	f3af 8000 	nop.w
 800bd56:	4607      	mov	r7, r0
 800bd58:	1c78      	adds	r0, r7, #1
 800bd5a:	d1d6      	bne.n	800bd0a <_vfiprintf_r+0x19a>
 800bd5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd5e:	07d9      	lsls	r1, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <_vfiprintf_r+0x1fe>
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	059a      	lsls	r2, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <_vfiprintf_r+0x1fe>
 800bd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd6a:	f7fc ff21 	bl	8008bb0 <__retarget_lock_release_recursive>
 800bd6e:	89ab      	ldrh	r3, [r5, #12]
 800bd70:	065b      	lsls	r3, r3, #25
 800bd72:	f53f af1f 	bmi.w	800bbb4 <_vfiprintf_r+0x44>
 800bd76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd78:	e71e      	b.n	800bbb8 <_vfiprintf_r+0x48>
 800bd7a:	ab03      	add	r3, sp, #12
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	462a      	mov	r2, r5
 800bd80:	4630      	mov	r0, r6
 800bd82:	4b06      	ldr	r3, [pc, #24]	@ (800bd9c <_vfiprintf_r+0x22c>)
 800bd84:	a904      	add	r1, sp, #16
 800bd86:	f7fe fa59 	bl	800a23c <_printf_i>
 800bd8a:	e7e4      	b.n	800bd56 <_vfiprintf_r+0x1e6>
 800bd8c:	0800cc06 	.word	0x0800cc06
 800bd90:	0800cc0c 	.word	0x0800cc0c
 800bd94:	0800cc10 	.word	0x0800cc10
 800bd98:	00000000 	.word	0x00000000
 800bd9c:	0800bb4d 	.word	0x0800bb4d

0800bda0 <__swbuf_r>:
 800bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda2:	460e      	mov	r6, r1
 800bda4:	4614      	mov	r4, r2
 800bda6:	4605      	mov	r5, r0
 800bda8:	b118      	cbz	r0, 800bdb2 <__swbuf_r+0x12>
 800bdaa:	6a03      	ldr	r3, [r0, #32]
 800bdac:	b90b      	cbnz	r3, 800bdb2 <__swbuf_r+0x12>
 800bdae:	f7fc fcb9 	bl	8008724 <__sinit>
 800bdb2:	69a3      	ldr	r3, [r4, #24]
 800bdb4:	60a3      	str	r3, [r4, #8]
 800bdb6:	89a3      	ldrh	r3, [r4, #12]
 800bdb8:	071a      	lsls	r2, r3, #28
 800bdba:	d501      	bpl.n	800bdc0 <__swbuf_r+0x20>
 800bdbc:	6923      	ldr	r3, [r4, #16]
 800bdbe:	b943      	cbnz	r3, 800bdd2 <__swbuf_r+0x32>
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	f000 f82a 	bl	800be1c <__swsetup_r>
 800bdc8:	b118      	cbz	r0, 800bdd2 <__swbuf_r+0x32>
 800bdca:	f04f 37ff 	mov.w	r7, #4294967295
 800bdce:	4638      	mov	r0, r7
 800bdd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	6922      	ldr	r2, [r4, #16]
 800bdd6:	b2f6      	uxtb	r6, r6
 800bdd8:	1a98      	subs	r0, r3, r2
 800bdda:	6963      	ldr	r3, [r4, #20]
 800bddc:	4637      	mov	r7, r6
 800bdde:	4283      	cmp	r3, r0
 800bde0:	dc05      	bgt.n	800bdee <__swbuf_r+0x4e>
 800bde2:	4621      	mov	r1, r4
 800bde4:	4628      	mov	r0, r5
 800bde6:	f7fe fd13 	bl	800a810 <_fflush_r>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d1ed      	bne.n	800bdca <__swbuf_r+0x2a>
 800bdee:	68a3      	ldr	r3, [r4, #8]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	60a3      	str	r3, [r4, #8]
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	6022      	str	r2, [r4, #0]
 800bdfa:	701e      	strb	r6, [r3, #0]
 800bdfc:	6962      	ldr	r2, [r4, #20]
 800bdfe:	1c43      	adds	r3, r0, #1
 800be00:	429a      	cmp	r2, r3
 800be02:	d004      	beq.n	800be0e <__swbuf_r+0x6e>
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	07db      	lsls	r3, r3, #31
 800be08:	d5e1      	bpl.n	800bdce <__swbuf_r+0x2e>
 800be0a:	2e0a      	cmp	r6, #10
 800be0c:	d1df      	bne.n	800bdce <__swbuf_r+0x2e>
 800be0e:	4621      	mov	r1, r4
 800be10:	4628      	mov	r0, r5
 800be12:	f7fe fcfd 	bl	800a810 <_fflush_r>
 800be16:	2800      	cmp	r0, #0
 800be18:	d0d9      	beq.n	800bdce <__swbuf_r+0x2e>
 800be1a:	e7d6      	b.n	800bdca <__swbuf_r+0x2a>

0800be1c <__swsetup_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	4b29      	ldr	r3, [pc, #164]	@ (800bec4 <__swsetup_r+0xa8>)
 800be20:	4605      	mov	r5, r0
 800be22:	6818      	ldr	r0, [r3, #0]
 800be24:	460c      	mov	r4, r1
 800be26:	b118      	cbz	r0, 800be30 <__swsetup_r+0x14>
 800be28:	6a03      	ldr	r3, [r0, #32]
 800be2a:	b90b      	cbnz	r3, 800be30 <__swsetup_r+0x14>
 800be2c:	f7fc fc7a 	bl	8008724 <__sinit>
 800be30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be34:	0719      	lsls	r1, r3, #28
 800be36:	d422      	bmi.n	800be7e <__swsetup_r+0x62>
 800be38:	06da      	lsls	r2, r3, #27
 800be3a:	d407      	bmi.n	800be4c <__swsetup_r+0x30>
 800be3c:	2209      	movs	r2, #9
 800be3e:	602a      	str	r2, [r5, #0]
 800be40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be44:	f04f 30ff 	mov.w	r0, #4294967295
 800be48:	81a3      	strh	r3, [r4, #12]
 800be4a:	e033      	b.n	800beb4 <__swsetup_r+0x98>
 800be4c:	0758      	lsls	r0, r3, #29
 800be4e:	d512      	bpl.n	800be76 <__swsetup_r+0x5a>
 800be50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be52:	b141      	cbz	r1, 800be66 <__swsetup_r+0x4a>
 800be54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be58:	4299      	cmp	r1, r3
 800be5a:	d002      	beq.n	800be62 <__swsetup_r+0x46>
 800be5c:	4628      	mov	r0, r5
 800be5e:	f7fc fed9 	bl	8008c14 <_free_r>
 800be62:	2300      	movs	r3, #0
 800be64:	6363      	str	r3, [r4, #52]	@ 0x34
 800be66:	89a3      	ldrh	r3, [r4, #12]
 800be68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be6c:	81a3      	strh	r3, [r4, #12]
 800be6e:	2300      	movs	r3, #0
 800be70:	6063      	str	r3, [r4, #4]
 800be72:	6923      	ldr	r3, [r4, #16]
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	f043 0308 	orr.w	r3, r3, #8
 800be7c:	81a3      	strh	r3, [r4, #12]
 800be7e:	6923      	ldr	r3, [r4, #16]
 800be80:	b94b      	cbnz	r3, 800be96 <__swsetup_r+0x7a>
 800be82:	89a3      	ldrh	r3, [r4, #12]
 800be84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be8c:	d003      	beq.n	800be96 <__swsetup_r+0x7a>
 800be8e:	4621      	mov	r1, r4
 800be90:	4628      	mov	r0, r5
 800be92:	f000 f89e 	bl	800bfd2 <__smakebuf_r>
 800be96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be9a:	f013 0201 	ands.w	r2, r3, #1
 800be9e:	d00a      	beq.n	800beb6 <__swsetup_r+0x9a>
 800bea0:	2200      	movs	r2, #0
 800bea2:	60a2      	str	r2, [r4, #8]
 800bea4:	6962      	ldr	r2, [r4, #20]
 800bea6:	4252      	negs	r2, r2
 800bea8:	61a2      	str	r2, [r4, #24]
 800beaa:	6922      	ldr	r2, [r4, #16]
 800beac:	b942      	cbnz	r2, 800bec0 <__swsetup_r+0xa4>
 800beae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800beb2:	d1c5      	bne.n	800be40 <__swsetup_r+0x24>
 800beb4:	bd38      	pop	{r3, r4, r5, pc}
 800beb6:	0799      	lsls	r1, r3, #30
 800beb8:	bf58      	it	pl
 800beba:	6962      	ldrpl	r2, [r4, #20]
 800bebc:	60a2      	str	r2, [r4, #8]
 800bebe:	e7f4      	b.n	800beaa <__swsetup_r+0x8e>
 800bec0:	2000      	movs	r0, #0
 800bec2:	e7f7      	b.n	800beb4 <__swsetup_r+0x98>
 800bec4:	2000001c 	.word	0x2000001c

0800bec8 <_raise_r>:
 800bec8:	291f      	cmp	r1, #31
 800beca:	b538      	push	{r3, r4, r5, lr}
 800becc:	4605      	mov	r5, r0
 800bece:	460c      	mov	r4, r1
 800bed0:	d904      	bls.n	800bedc <_raise_r+0x14>
 800bed2:	2316      	movs	r3, #22
 800bed4:	6003      	str	r3, [r0, #0]
 800bed6:	f04f 30ff 	mov.w	r0, #4294967295
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bede:	b112      	cbz	r2, 800bee6 <_raise_r+0x1e>
 800bee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bee4:	b94b      	cbnz	r3, 800befa <_raise_r+0x32>
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 f830 	bl	800bf4c <_getpid_r>
 800beec:	4622      	mov	r2, r4
 800beee:	4601      	mov	r1, r0
 800bef0:	4628      	mov	r0, r5
 800bef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bef6:	f000 b817 	b.w	800bf28 <_kill_r>
 800befa:	2b01      	cmp	r3, #1
 800befc:	d00a      	beq.n	800bf14 <_raise_r+0x4c>
 800befe:	1c59      	adds	r1, r3, #1
 800bf00:	d103      	bne.n	800bf0a <_raise_r+0x42>
 800bf02:	2316      	movs	r3, #22
 800bf04:	6003      	str	r3, [r0, #0]
 800bf06:	2001      	movs	r0, #1
 800bf08:	e7e7      	b.n	800beda <_raise_r+0x12>
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf12:	4798      	blx	r3
 800bf14:	2000      	movs	r0, #0
 800bf16:	e7e0      	b.n	800beda <_raise_r+0x12>

0800bf18 <raise>:
 800bf18:	4b02      	ldr	r3, [pc, #8]	@ (800bf24 <raise+0xc>)
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	6818      	ldr	r0, [r3, #0]
 800bf1e:	f7ff bfd3 	b.w	800bec8 <_raise_r>
 800bf22:	bf00      	nop
 800bf24:	2000001c 	.word	0x2000001c

0800bf28 <_kill_r>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	4d06      	ldr	r5, [pc, #24]	@ (800bf48 <_kill_r+0x20>)
 800bf2e:	4604      	mov	r4, r0
 800bf30:	4608      	mov	r0, r1
 800bf32:	4611      	mov	r1, r2
 800bf34:	602b      	str	r3, [r5, #0]
 800bf36:	f7f6 fb16 	bl	8002566 <_kill>
 800bf3a:	1c43      	adds	r3, r0, #1
 800bf3c:	d102      	bne.n	800bf44 <_kill_r+0x1c>
 800bf3e:	682b      	ldr	r3, [r5, #0]
 800bf40:	b103      	cbz	r3, 800bf44 <_kill_r+0x1c>
 800bf42:	6023      	str	r3, [r4, #0]
 800bf44:	bd38      	pop	{r3, r4, r5, pc}
 800bf46:	bf00      	nop
 800bf48:	20002104 	.word	0x20002104

0800bf4c <_getpid_r>:
 800bf4c:	f7f6 bb04 	b.w	8002558 <_getpid>

0800bf50 <_calloc_r>:
 800bf50:	b570      	push	{r4, r5, r6, lr}
 800bf52:	fba1 5402 	umull	r5, r4, r1, r2
 800bf56:	b934      	cbnz	r4, 800bf66 <_calloc_r+0x16>
 800bf58:	4629      	mov	r1, r5
 800bf5a:	f7fc fecd 	bl	8008cf8 <_malloc_r>
 800bf5e:	4606      	mov	r6, r0
 800bf60:	b928      	cbnz	r0, 800bf6e <_calloc_r+0x1e>
 800bf62:	4630      	mov	r0, r6
 800bf64:	bd70      	pop	{r4, r5, r6, pc}
 800bf66:	220c      	movs	r2, #12
 800bf68:	2600      	movs	r6, #0
 800bf6a:	6002      	str	r2, [r0, #0]
 800bf6c:	e7f9      	b.n	800bf62 <_calloc_r+0x12>
 800bf6e:	462a      	mov	r2, r5
 800bf70:	4621      	mov	r1, r4
 800bf72:	f7fc fca0 	bl	80088b6 <memset>
 800bf76:	e7f4      	b.n	800bf62 <_calloc_r+0x12>

0800bf78 <_malloc_usable_size_r>:
 800bf78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf7c:	1f18      	subs	r0, r3, #4
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bfbc      	itt	lt
 800bf82:	580b      	ldrlt	r3, [r1, r0]
 800bf84:	18c0      	addlt	r0, r0, r3
 800bf86:	4770      	bx	lr

0800bf88 <__swhatbuf_r>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf90:	4615      	mov	r5, r2
 800bf92:	2900      	cmp	r1, #0
 800bf94:	461e      	mov	r6, r3
 800bf96:	b096      	sub	sp, #88	@ 0x58
 800bf98:	da0c      	bge.n	800bfb4 <__swhatbuf_r+0x2c>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfa2:	bf14      	ite	ne
 800bfa4:	2340      	movne	r3, #64	@ 0x40
 800bfa6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bfaa:	2000      	movs	r0, #0
 800bfac:	6031      	str	r1, [r6, #0]
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	b016      	add	sp, #88	@ 0x58
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	466a      	mov	r2, sp
 800bfb6:	f000 f849 	bl	800c04c <_fstat_r>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	dbed      	blt.n	800bf9a <__swhatbuf_r+0x12>
 800bfbe:	9901      	ldr	r1, [sp, #4]
 800bfc0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bfc4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bfc8:	4259      	negs	r1, r3
 800bfca:	4159      	adcs	r1, r3
 800bfcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfd0:	e7eb      	b.n	800bfaa <__swhatbuf_r+0x22>

0800bfd2 <__smakebuf_r>:
 800bfd2:	898b      	ldrh	r3, [r1, #12]
 800bfd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfd6:	079d      	lsls	r5, r3, #30
 800bfd8:	4606      	mov	r6, r0
 800bfda:	460c      	mov	r4, r1
 800bfdc:	d507      	bpl.n	800bfee <__smakebuf_r+0x1c>
 800bfde:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfe2:	6023      	str	r3, [r4, #0]
 800bfe4:	6123      	str	r3, [r4, #16]
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	6163      	str	r3, [r4, #20]
 800bfea:	b003      	add	sp, #12
 800bfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfee:	466a      	mov	r2, sp
 800bff0:	ab01      	add	r3, sp, #4
 800bff2:	f7ff ffc9 	bl	800bf88 <__swhatbuf_r>
 800bff6:	9f00      	ldr	r7, [sp, #0]
 800bff8:	4605      	mov	r5, r0
 800bffa:	4639      	mov	r1, r7
 800bffc:	4630      	mov	r0, r6
 800bffe:	f7fc fe7b 	bl	8008cf8 <_malloc_r>
 800c002:	b948      	cbnz	r0, 800c018 <__smakebuf_r+0x46>
 800c004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c008:	059a      	lsls	r2, r3, #22
 800c00a:	d4ee      	bmi.n	800bfea <__smakebuf_r+0x18>
 800c00c:	f023 0303 	bic.w	r3, r3, #3
 800c010:	f043 0302 	orr.w	r3, r3, #2
 800c014:	81a3      	strh	r3, [r4, #12]
 800c016:	e7e2      	b.n	800bfde <__smakebuf_r+0xc>
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c01e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c022:	81a3      	strh	r3, [r4, #12]
 800c024:	9b01      	ldr	r3, [sp, #4]
 800c026:	6020      	str	r0, [r4, #0]
 800c028:	b15b      	cbz	r3, 800c042 <__smakebuf_r+0x70>
 800c02a:	4630      	mov	r0, r6
 800c02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c030:	f000 f81e 	bl	800c070 <_isatty_r>
 800c034:	b128      	cbz	r0, 800c042 <__smakebuf_r+0x70>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f023 0303 	bic.w	r3, r3, #3
 800c03c:	f043 0301 	orr.w	r3, r3, #1
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	431d      	orrs	r5, r3
 800c046:	81a5      	strh	r5, [r4, #12]
 800c048:	e7cf      	b.n	800bfea <__smakebuf_r+0x18>
	...

0800c04c <_fstat_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	2300      	movs	r3, #0
 800c050:	4d06      	ldr	r5, [pc, #24]	@ (800c06c <_fstat_r+0x20>)
 800c052:	4604      	mov	r4, r0
 800c054:	4608      	mov	r0, r1
 800c056:	4611      	mov	r1, r2
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	f7f6 fae3 	bl	8002624 <_fstat>
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	d102      	bne.n	800c068 <_fstat_r+0x1c>
 800c062:	682b      	ldr	r3, [r5, #0]
 800c064:	b103      	cbz	r3, 800c068 <_fstat_r+0x1c>
 800c066:	6023      	str	r3, [r4, #0]
 800c068:	bd38      	pop	{r3, r4, r5, pc}
 800c06a:	bf00      	nop
 800c06c:	20002104 	.word	0x20002104

0800c070 <_isatty_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	2300      	movs	r3, #0
 800c074:	4d05      	ldr	r5, [pc, #20]	@ (800c08c <_isatty_r+0x1c>)
 800c076:	4604      	mov	r4, r0
 800c078:	4608      	mov	r0, r1
 800c07a:	602b      	str	r3, [r5, #0]
 800c07c:	f7f6 fae1 	bl	8002642 <_isatty>
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	d102      	bne.n	800c08a <_isatty_r+0x1a>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	b103      	cbz	r3, 800c08a <_isatty_r+0x1a>
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	bd38      	pop	{r3, r4, r5, pc}
 800c08c:	20002104 	.word	0x20002104

0800c090 <_init>:
 800c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c092:	bf00      	nop
 800c094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c096:	bc08      	pop	{r3}
 800c098:	469e      	mov	lr, r3
 800c09a:	4770      	bx	lr

0800c09c <_fini>:
 800c09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09e:	bf00      	nop
 800c0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0a2:	bc08      	pop	{r3}
 800c0a4:	469e      	mov	lr, r3
 800c0a6:	4770      	bx	lr
